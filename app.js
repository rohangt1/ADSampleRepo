const PizZip = require('pizzip');
const Docxtemplater = require('docxtemplater');
//const fs = require('fs');
const path = require('path');
const REFRESH_TOKEN = "1//04j2q4QF4bBhRCgYIARAAGAQSNwF-L9Ir7MLqX0FceLsr6nwVJqSLnhgu8RwY1hOTfxUW1ng4jDXtUklZPI4Pi_wli1mzw2-NOeQ";
const CLIENT_SECRET = "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";
const CLIENT_ID = "250608275076-a3ktdemuqome8h0n4emvqfqmnkh8kca2.apps.googleusercontent.com";
const EMAIL = "rohan.c.vishwakarma@gmail.com"

const SALES_REFRESH_TOKEN = "1//04BFsR4QZpMjZCgYIARAAGAQSNgF-L9IrLXvCqa28rHnJv1kOan8v31nE2U1_aJY4maf7UD1-I9netr-V1u6jRMpZGNKgTfdH6w";
const SALES_CLIENT_SECRET = "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";
const SALES_CLIENT_ID = "501158374970-kr37ht65k8u1l2ujhqq2b5bcrtj4jf36.apps.googleusercontent.com";
const SALES_EMAIL = "sales@cwac.in"

const admin = require('firebase-admin');
const express = require('express');
const app = express();
const cors=require('cors');
app.use(cors());
const saltedMd5 = require('salted-md5');
app.set('views', path.join(__dirname, 'static', 'views'));
app.use('/public', express.static(path.join(__dirname, 'static', 'public')));
const bodyParser = require('body-parser');
app.use(bodyParser.json());
const multer = require('multer');
const upload = multer();
var nodemailer = require("nodemailer");
const { google } = require("googleapis");
const OAuth2 = google.auth.OAuth2;
const Ftp = require('ftp');
const ftp = require("basic-ftp")
var fs = require('fs');
app.use(express.urlencoded({extended: true}));
const AUTH_TOKEN = 'dasdalkd9w0aid09wjf9okdpfoj0sjd289unklvxcnjbrb9tg94nv';
var backendPort = 5001
//const DBENDPOINT = "database-2.ckuh6icwhjnc.ap-south-1.rds.amazonaws.com";
//const DBENDPOINT = "database-1.ckuh6icwhjnc.ap-south-1.rds.amazonaws.com";
const DBENDPOINT = "database-1.co3ylwg4ddnh.ap-south-1.rds.amazonaws.com";
//*************************************
const schedule = require('node-schedule');
const e = require('express');
const startTime = new Date(Date.now() + 1000);
const endTime1 = new Date(Date.now() + 10000);
var counter = 0;
var todayDate = new Date();
var dd = String(todayDate.getDate()).padStart(2, '0');
var mm = String(todayDate.getMonth() + 1).padStart(2, '0'); //January is 0!
var yyyy = todayDate.getFullYear();
todayDate = dd + '-' + mm + '-' + yyyy;
var NoToMonth = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
var monthToItsNo = {
    "Jan": '01',
    "Feb": '02',
    "Mar": '03',
    "Apr": '04',
    "May": '05',
    "Jun": '06',
    "Jul": '07',
    "Aug": '08',
    "Sep": '09',
    "Oct": '10',
    "Nov": '11',
    "Dec": '12',
  }
//const job = schedule.scheduleJob({ start: startTime, end: endTime, rule: '*/10 * * * * *' }, async function(){
// const job = schedule.scheduleJob({ start: startTime, rule: '* * * /1 * *' }, async function(){
// //const job = schedule.scheduleJob({ start: startTime, rule: '*/5 * * * * *' }, async function(){
//   counter++;
//   console.log('Monitoring all client data, ', counter);

//   var serviceAccount = require('./admin.json');
//     var client;
//     if (!admin.apps.length) {
//         client = admin.initializeApp({
//             credential: admin.credential.cert(serviceAccount),
//             databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
//             authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
//         });
//     }else {
//         client = admin.app(); // if already initialized, use that one
//         client.delete();
//         client = admin.initializeApp({
//             credential: admin.credential.cert(serviceAccount),
//             databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
//             authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
//         });
//     }

//     var db=admin.database();
//     var userRef=db.ref("client_application_form_data");
//     var keysClientData = [];
//     await userRef.once('value').then((snapshot) => {
//         var index = 0;
//         snapshot.forEach(function(item) {
//             var itemVal = item.val();
//             keysClientData.push({id: Object.keys(snapshot.val())[index], clientname: itemVal['Client Name'], email: itemVal.email, date: itemVal.initial_certification_conclusion_date, surveillance_date: surveillance_audit_date});
//             index++;
//         });
//       }, (errorObject) => {
//         console.log('The read failed: ' + errorObject.name);
//     }); 
//     for (var intIdx = 0; intIdx < keysClientData.length; intIdx++) {
//         var newUserRef=db.ref("surveillance_audit_clients/" + keysClientData[intIdx].id + "/surveillance_audit_date");
//         var surveillance_audit_date = "";
//         var initial_certification_conclusion_date = "";
//         await newUserRef.once('value').then((snapshot) => {
//             var item1 = snapshot.val();
//             if (item1 != null)
//             surveillance_audit_date = item1;
//         });
//         if (surveillance_audit_date == "") {
//             var auditDate = keysClientData[intIdx].date;
//             var today = new Date(todayDate.split('-')[2],todayDate.split('-')[1]-1,todayDate.split('-')[0]);
//             var date2 = new Date(auditDate.split('-')[2],auditDate.split('-')[1]-1,auditDate.split('-')[0]);
//             var timeDiff = Math.abs(date2.getTime() - today.getTime());
//             var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24)); 
//             if (diffDays > 183) {
//                 //console.log('Name: ', keysClientData[intIdx].clientname, 'diffdays: ', diffDays);
//                 const createTransporter = async () => {
//                     const oauth2Client = new OAuth2(
//                         CLIENT_ID,
//                         CLIENT_SECRET,
//                         "https://developers.google.com/oauthplayground"
//                     );
//                     oauth2Client.setCredentials({
//                         refresh_token: REFRESH_TOKEN
//                     });
//                     const accessToken = await new Promise((resolve, reject) => {
//                         oauth2Client.getAccessToken((err, token) => {
//                         if (err) {
//                             res.send(err);
//                         }
//                         resolve(token);
//                         });
//                     });
//                     const transporter = nodemailer.createTransport({
//                         service: "gmail",
//                         auth: {
//                         type: "OAuth2",
//                         user: "cwactechnologies@gmail.com",
//                         accessToken,
//                         clientId: CLIENT_ID,
//                         clientSecret: CLIENT_SECRET,
//                         refreshToken: REFRESH_TOKEN
//                         }
//                     });
//                     return transporter;
//                     };
//                     const sendEmail = async (emailOptions) => {
//                         let emailTransporter = await createTransporter();
//                         await emailTransporter.sendMail(emailOptions, function(error, info) {               
//                             if(error) {
//                                 console.log(error);
//                             } else {
//                                 console.log('Thank you for your submission. We will contact you soon.')
//                             }
//                         });
//                     };
//                     sendEmail({
//                         subject: "Please conduct your surveillance Audit",
//                         //text: "Dear sir,\nYou applied for Initial Certification " + diffDays + " days back. Please apply for initial certification within " + (365 - diffDays) + " days.",
//                         text: "Dear sir,\nYou have completed your Initial Certification Process on " + keysClientData[intIdx].date + ". Please apply for initial certification within " + (365 - diffDays) + " days.",
//                         to: keysClientData[intIdx].email,
//                         from: "cwactechnologies@gmail.com"
//                     });
//             }
//         }
//         var newItem = keysClientData[intIdx];
//         newItem.surveillance_date = surveillance_audit_date;
//         keysClientData[intIdx] = newItem;
//     }
// });
//*************************************
app.post('/addclientapplicationform', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("client_application_form_data");
    addUser({
        'Client Name': req.body['Client Name'],
        'Approved': 'No',
        'description': req.body['description'],
        'date': req.body['date'],
        'assignedToWhom': req.body['assignedToWhom'],
        'stage1_team_assigned': 'No',
        'stage2_team_assigned': 'No',
        'stage1_plan_status': 'Open',
        'stage1_plan_date': "",
        'stage2_plan_status': 'Open',
        'stage2_plan_date': "",
        'quotation_status': 'Open',
        'quotation_date': '',
        'HO_activity_status': 'Open',
        'HO_activity_date': '',
        'stage1_plan_task_status': 'Open',
        'stage1_plan_task_date': '',
        'stage2_plan_task_status': 'Open',
        'stage2_plan_task_date': '',
        'initial_certification_conclusion': 'Open',
        'initial_certification_conclusion_date': '',
        'surveillance_audit_status': 'Open',
        'email': req.body['email'],
        'phone': req.body['phone'],
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['timestamp']);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else res.send('Customer Application Added Successfully');
            client.delete();
        })
    }
});
app.get('/browse_files', async (req, res) => {
    const { JavaCaller } = require("java-caller");
    const java = new JavaCaller({
        classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
        mainClass: 'nodejsofflinefileuploadproject.NodeJSOfflineFileUploadProjectGeneral',// Main class to call, must be available from CLASSPATH,
        rootPath: __dirname,
    });
    const { status, stdout, stderr } = await java.run();
    var paths = stdout.split("\r\n");
    paths = paths.filter(ele => ele != "");
    res.send({'paths': paths});
});
app.post('/offline__addclientapplicationform', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO Form_Data VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + "No"+ "', '" 
        + req.body['Client Name'] + "', '" 
        + "" + "', '" 
        + "Open" + "', '" 
        + req.body['assignedToWhom'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['description'] + "', '" 
        + req.body['email'] + "', '" 
        + "Open" + "', '" 
        + "" + "', '" 
        + req.body['phone'] + "', '" 
        + "" + "', '" 
        + "Open" + "', '" 
        + "" + "', '" 
        + "Open" + "', '" 
        + "" + "', '" 
        + "Open" + "', '" 
        + "No" + "', '" 
        + "" + "', '" 
        + "Open" + "', '" 
        + "" + "', '" 
        + "Open" + "', '" 
        + "No" + "', '" 
        + "Open" + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.CopyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                //console.log("timestamp, ", req.body['timestamp']);
                //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                const { status, stdout, stderr } = await java.run([req.body['timestamp'] + "", JSON.stringify(req.body['fileNames'])]);
                console.log(stdout);
                res.send("Customer Application Added Successfully");
            }
        });
    });
});
app.post('/aws_rds__addclientapplicationform', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO Form_Data VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + "No"+ "', '" 
        + req.body['Client Name'] + "', '" 
        + "" + "', '" 
        + "Open" + "', '" 
        + req.body['assignedToWhom'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['description'] + "', '" 
        + req.body['email'] + "', '" 
        + "Open" + "', '" 
        + "" + "', '" 
        + req.body['phone'] + "', '" 
        + "" + "', '" 
        + "Open" + "', '" 
        + "" + "', '" 
        + "Open" + "', '" 
        + "" + "', '" 
        + "Open" + "', '" 
        + "No" + "', '" 
        + "" + "', '" 
        + "Open" + "', '" 
        + "" + "', '" 
        + "Open" + "', '" 
        + "No" + "', '" 
        + "Open" + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                sql.end();
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.CopyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // //console.log("timestamp, ", req.body['timestamp']);
                // //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                // const { status, stdout, stderr } = await java.run([req.body['timestamp'] + "", JSON.stringify(req.body['fileNames'])]);
                // console.log(stdout);
                sql.end();
                res.send("Customer Application Added Successfully");
            }
        });
    });
});
app.post('/offline__add_quotation', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO quotations VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['QuotationDescription'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                request.query("UPDATE Form_Data SET quotation_date = '" 
                + req.body['date'] + "', quotation_status = 'In-Progress' WHERE client_id = '" 
                + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                    if (iErr)
                    {
                        console.log(iErr);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        const { JavaCaller } = require("java-caller");
                        const java = new JavaCaller({
                            classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                            mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                            rootPath: __dirname,
                        });
                        const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";quotations", JSON.stringify(req.body['fileNames'])]);
                        console.log(stdout);
                        res.send("Quotation Added Successfully");
                    }
                });
            }
        });
    });
});
app.post('/aws_rds__add_quotation', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO quotations VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['QuotationDescription'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                sql.end();
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                sql.query("UPDATE Form_Data SET quotation_date = '" 
                + req.body['date'] + "', quotation_status = 'In-Progress' WHERE client_id = '" 
                + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                    if (iErr)
                    {
                        console.log(iErr);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        // const { JavaCaller } = require("java-caller");
                        // const java = new JavaCaller({
                        //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                        //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                        //     rootPath: __dirname,
                        // });
                        // const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";quotations", JSON.stringify(req.body['fileNames'])]);
                        // console.log(stdout);
                        sql.end();
                        res.send("Quotation Added Successfully");
                    }
                });
            }
        });
    });
});
app.post('/offline__addclientapplicationform_to_logs', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO initial_certification_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['description'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.CopyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                //console.log("timestamp, ", req.body['timestamp']);
                //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + "", JSON.stringify(req.body['fileNames'])]);
                console.log(stdout);
                res.send("Customer Application Added Successfully");
            }
        });
    });
});
app.post('/aws_rds__addclientapplicationform_to_logs', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO initial_certification_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['description'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                sql.end();
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.CopyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // //console.log("timestamp, ", req.body['timestamp']);
                // //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                // const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + "", JSON.stringify(req.body['fileNames'])]);
                // console.log(stdout);
                sql.end();
                res.send("Customer Application Added Successfully");
            }
        });
    });
});
app.post('/addclientapplicationform_to_logs', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("client_application_form_data/" + req.body['clientid'] + "/logs");
    addUser({
        'description': req.body['description'],
        'status': 'Open',
        'date': req.body['date'],
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['timestamp']);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else res.send('Customer Application Added Successfully');
            client.delete();
        })
    }
});
app.post('/addclientapplicationfile', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Incoming Initial Certification', 'No', 'No', '" + 'domains/cwac.in/public_html/init_certification_client_application/' + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
        }
        const ftpClient = new Ftp();
        ftpClient.on( 'ready', function() {
            ftpClient.mkdir('domains/cwac.in/public_html/init_certification_client_application/' + req.body['timestamp'], true, (err) => {
                if (!err) {
                    ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/init_certification_client_application/' + req.body['timestamp'] + "/" + req.file.originalname, async function( iErr, list ) {
                        if ( iErr ) 
                        {
                            throw iErr;
                        }
                        ftpClient.end();   
                        if (req.body['intIdx'] == req.body['fileLength'] - 1)
                        {
                            var mysql = require("mysql");
                            // const fs = require('fs');
                            // var info = {};
                            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                            // allFileContents.split(/\r?\n/).forEach(line =>  {        
                            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                            // });
                            var sql = mysql.createConnection({
                                host     : DBENDPOINT,
                                user     : "admin",
                                password : "qwertyui",
                                port     : "3306",
                                database : "mydb"
                            });
                            const ConnectToSql = (queryForFilter) => {
                                return new Promise((resolve, reject)=>{
                                    sql.connect(function (err) {
                                        if (err) return reject(err);
                                        else return resolve("Connected");
                                    });
                                });
                            };
                            const RemoveIncompleteFileUploadState = () => {
                                return new Promise((resolve, reject)=>{
                                    sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Incoming Initial Certification' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/init_certification_client_application/' + req.body['timestamp'] + "'",  (error, results)=>{
                                        if(error){
                                            return reject(error);
                                        }
                                        return resolve(results);
                                    });
                                });
                            };
                            await ConnectToSql();
                            await RemoveIncompleteFileUploadState();
                        }  
                        res.send('Customer Application Added Successfully'); 
                    });  
                }
                else
                {
                    throw err;
                }
            });
        });
        
        ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_checklist_files', upload.single('file'), (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.mkdir('domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/inspection_templates/' + req.body['checklistid'], true, (err) => {
            if (!err) {
                ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/inspection_templates/' + req.body['checklistid'] + "/" + req.body['file_name'], function( iErr, list ) {
                //ftpClient.put( req.file.buffer, 'domains/cwac.in/softwares_apps/quest_global_mcs/audit_app/inspection_templates/' + req.body['file_name'], function( iErr, list ) {
                    if ( iErr ) throw iErr;
                    ftpClient.end();     
                    res.send('Inspection Checklist Template Data added successfully'); 
                });  
            }
        });
    });
    
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
})
app.get('/sa', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
    ftpClient.on( 'ready', function() {
        ftpClient.mkdir('domains/cwac.in/public_html/softwares_apps/aa', true, (err) => {
            if (!err) {
                ftpClient.end();
                res.send("done");
            }
        });
    });

})
app.post('/addclientapplicationfile_to_logs', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Incoming Initial Certification Logs', 'No', 'No', '" + 'domains/cwac.in/public_html/init_certification_client_application/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
        }
        const ftpClient = new Ftp();
        ftpClient.on( 'ready', function() {
            ftpClient.mkdir('domains/cwac.in/public_html/init_certification_client_application/' + req.body['clientid'] + "/logs/" + req.body['timestamp'], true, (err) => {
                if (!err) {
                    ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/init_certification_client_application/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                        if ( err ) throw err;
                        ftpClient.end();
                        if (req.body['intIdx'] == req.body['fileLength'] - 1)
                        {
                            var mysql = require("mysql");
                            // const fs = require('fs');
                            // var info = {};
                            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                            // allFileContents.split(/\r?\n/).forEach(line =>  {        
                            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                            // });
                            var sql = mysql.createConnection({
                                host     : DBENDPOINT,
                                user     : "admin",
                                password : "qwertyui",
                                port     : "3306",
                                database : "mydb"
                            });
                            const ConnectToSql = (queryForFilter) => {
                                return new Promise((resolve, reject)=>{
                                    sql.connect(function (err) {
                                        if (err) return reject(err);
                                        else return resolve("Connected");
                                    });
                                });
                            };
                            const RemoveIncompleteFileUploadState = () => {
                                return new Promise((resolve, reject)=>{
                                    sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Incoming Initial Certification Logs' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/init_certification_client_application/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "'",  (error, results)=>{
                                        if(error){
                                            return reject(error);
                                        }
                                        return resolve(results);
                                    });
                                });
                            };
                            await ConnectToSql();
                            await RemoveIncompleteFileUploadState();
                        } 
                        res.send('Customer Application Added Successfully'); 
                    });
                }
            });
        });
        
        ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/fetchcustomerapplication_v1', (req, res) => {
    // if (req.body['audit_software_token'] != AUTH_TOKEN) {
    //     res.send({'error_message': "User Not Authorized"});
    //     return;
    // }
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("client_application_form_data");
    userRef.on('value', (snapshot) => {
        var keys = [];
        var index = 0;
        if (snapshot.numChildren() == 0) {
            res.send(keys);
        }
        snapshot.forEach(function(item) {
            var itemVal = item.val();
            itemVal.timestamp = Object.keys(snapshot.val())[index];
            itemVal.selected = false;
            itemVal.index = index;
            if (req.body.request_from == 'Quotation Status' || req.body.request_from == 'HO Activity')
            {
                if (itemVal['Approved'] == 'Yes')
                    keys.push(itemVal);
            }
            else if (req.body.request_from == 'Assign Stage 1 Audit Team')
            {
                if (itemVal['quotation_status'] == 'Completed')
                //if (itemVal['Approved'] == 'Yes')
                    keys.push(itemVal);
            }
            else if (req.body.request_from == 'Stage 1 Audit Plan') {
                if (itemVal['stage1_team_assigned'] == 'Yes')
                    keys.push(itemVal);
            }
            else if (req.body.request_from == 'Assign Stage 2 Audit Team') {
                if (itemVal['stage1_plan_status'] == 'Completed')
                    keys.push(itemVal);
            }
            else if (req.body.request_from == 'Stage 2 Audit Plan') {
                if (itemVal['stage2_team_assigned'] == 'Yes')
                    keys.push(itemVal);
            }
            else if (req.body.request_from == 'Initial Certification Conclusions') {
                if (itemVal['stage2_plan_status'] == 'Completed')
                    keys.push(itemVal);
            }
            else if (req.body.request_from == 'Existing Surveillance Audit Clients') {
                if (itemVal['initial_certification_conclusion'] == 'Completed')
                    keys.push(itemVal);
            }
            else keys.push(itemVal);
            index++;
            if (index == snapshot.numChildren()) {
                res.send(keys);
            }
        });
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/fetchcustomerapplication_v2', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("surveillance_audit_clients");
    userRef.on('value', (snapshot) => {
        var keys = [];
        var index = 0;
        if (snapshot.numChildren() == 0) {
            res.send(keys);
        }
        snapshot.forEach(function(item) {
            var itemVal = item.val();
            itemVal.timestamp = Object.keys(snapshot.val())[index];
            itemVal.selected = false;
            itemVal.index = index;
            if (req.body.request_from == 'Assign Surveillance Audit Team')
            {
                if (itemVal['Status'] == 'Approved')
                    keys.push(itemVal);
            }
            else if (req.body.request_from == 'Surveillance Audit Plan')
            {
                if (itemVal['surveillance_audit_team_assigned'] == 'Yes')
                    keys.push(itemVal);
            }
            else if (req.body.request_from == 'Surveillance Audit Conclusions')
            {
                if (itemVal['surveillance_plan_status'] == 'Completed')
                    keys.push(itemVal);
            }
            else if (req.body.request_from == 'Existing Recertification Audit Clients')
            {
                if (itemVal['surveillance_audit_conclusion'] == 'Completed')
                    keys.push(itemVal);
            }
            else if (req.body.request_from == 'Assign Recertification Audit Team')
            {
                if (itemVal['recertification_status'] == 'Approved')
                    keys.push(itemVal);
            }
            else if (req.body.request_from == 'Recertification Audit Plan')
            {
                if (itemVal['recertification_audit_team_assigned'] == 'Yes')
                    keys.push(itemVal);
            }
            else if (req.body.request_from == 'Recertification Audit Conclusions')
            {
                if (itemVal['recertification_plan_status'] == 'Completed')
                    keys.push(itemVal);
            }
            else keys.push(itemVal);
            index++;
            if (index == snapshot.numChildren()) {
                res.send(keys);
            }
        });
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/fetchcustomerapplication_v3', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("recertification_audit_clients");
    userRef.on('value', (snapshot) => {
        var keys = [];
        var index = 0;
        if (snapshot.numChildren() == 0) {
            res.send(keys);
        }
        snapshot.forEach(function(item) {
            var itemVal = item.val();
            itemVal.timestamp = Object.keys(snapshot.val())[index];
            itemVal.selected = false;
            itemVal.index = index;
            // if (req.body.request_from == 'Assign Surveillance Audit Team')
            // {
            //     if (itemVal['Status'] == 'Approved')
            //         keys.push(itemVal);
            // }
            // else if (req.body.request_from == 'Surveillance Audit Plan')
            // {
            //     if (itemVal['surveillance_audit_team_assigned'] == 'Yes')
            //         keys.push(itemVal);
            // }
            // else if (req.body.request_from == 'Surveillance Audit Conclusions')
            // {
            //     if (itemVal['surveillance_plan_status'] == 'Completed')
            //         keys.push(itemVal);
            // }
            // else if (req.body.request_from == 'Existing Recertification Audit Clients')
            // {
            //     if (itemVal['surveillance_audit_conclusion'] == 'Completed')
            //         keys.push(itemVal);
            // }
            //else if (req.body.request_from == 'Assign Recertification Audit Team')
            if (req.body.request_from == 'Assign Recertification Audit Team')
            {
                if (itemVal['Status'] == 'Approved')
                    keys.push(itemVal);
            }
            else if (req.body.request_from == 'Recertification Audit Plan')
            //if (req.body.request_from == 'Recertification Audit Plan')
            {
                if (itemVal['recertification_audit_team_assigned'] == 'Yes')
                    keys.push(itemVal);
            }
            else if (req.body.request_from == 'Recertification Audit Conclusions')
            {
                if (itemVal['recertification_plan_status'] == 'Completed')
                    keys.push(itemVal);
            }
            // else keys.push(itemVal);
            else keys.push(itemVal);
            index++;
            if (index == snapshot.numChildren()) {
                //console.log(keys);
                res.send(keys);
            }
        });
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.get('/fetchcustomerapplication', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("client_application_form_data");
    userRef.on('value', (snapshot) => {
        res.send(JSON.stringify(snapshot.val()));
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.get('/fetch_stage1_audit_team_members', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("stage1_audit_teams");
    var keys = [];
    var index = 0;
    userRef.on('value', (snapshot) => {
        //console.log(snapshot.val());
        //res.send(JSON.stringify(snapshot.val()));
        if (snapshot.numChildren() == 0) {
            res.send(keys);
        }
        snapshot.forEach(function(item) {
            var itemVal = item.val();
            //itemVal.timestamp = Object.keys(snapshot.val())[index];
            //itemVal.selected = false;
            //itemVal.index = index;
            keys.push(itemVal);
            index++;
            if (index == snapshot.numChildren()) {
                keys = keys.map(ele => ele['Member Name']);
                //console.log(keys);
                res.send(keys);
            }
        })
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/fetch_assigned_stage1_audit_team_members', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("assigned_stage1_audit_teams/" + req.body['clientid'] + "/stage1_audit_teams");
    userRef.on('value', (snapshot) => {
        res.send(JSON.stringify(snapshot.val()));
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/fetch_assigned_stage1_audit_team_members_v1', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("assigned_stage1_audit_teams/" + req.body['clientid'] + "/stage1_audit_teams");
    userRef.on('value', (snapshot) => {
        //res.send(JSON.stringify(snapshot.val()));
        var keys = [];
        var index = 0;
        if (snapshot.numChildren() == 0) {
            res.send(keys);
        }
        snapshot.forEach(function(item) {
            var itemVal = {'Member Name': item.val()};
            itemVal.selected = false;
            itemVal.index = index;
            index++;
            keys.push(itemVal);
            if (index == snapshot.numChildren()) {
                console.log("keyskeys, ", keys);
                res.send(keys);
            }
        });
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/offline__fetch_assigned_stage1_audit_team_members_v1', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM assigned_stage1_audit_teams WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset['recordsets'][0].map((ele, idx) => {
                itemVal = ele;
                itemVal.selected = false;
                itemVal.index = idx;
                return itemVal;
            });
            //resRecordSet = resRecordSet.map(ele => ele['Member Name']);
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    }); 
});
app.post('/aws_rds__fetch_assigned_stage1_audit_team_members_v1', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM assigned_stage1_audit_teams WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err) console.log(err)
            const QueryABFilter = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.query(queryForFilter,  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            if (!recordset) 
            {
                sql.end();
                res.send([]);
                return;
            }
            var resRecordSet = recordset.map((ele, idx) => {
                itemVal = ele;
                itemVal.selected = false;
                itemVal.index = idx;
                return itemVal;
            });
            if (req.body['role'] == 'Accreditation Board')
            {
                var queryData = await QueryABFilter("SELECT filter_value FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Assign Stage 1 Audit Team' AND table_type = 'Logs'");
                queryData = JSON.parse(queryData[0]['filter_value']);
                //console.log(queryData)
                resRecordSet = resRecordSet.filter(ele => {
                    var isMatching = true;
                    for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                    {
                        //console.log(typeof(queryData[intIdx]['value']));
                        if (typeof(queryData[intIdx]['value']) != 'object')
                        {
                            if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                            {
                                isMatching = false;
                                break;
                            }
                        }
                        else
                        {
                            for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                            {
                                var isThisMatchingForOnce = false;
                                if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                {
                                    isThisMatchingForOnce = true;
                                    break;
                                }
                            }
                            if (!isThisMatchingForOnce) isMatching = false;
                        }
                    }
                    if (isMatching) return ele;
                    //if (ele)
                })
            }
            //resRecordSet = resRecordSet.map(ele => ele['Member Name']);
            sql.end();
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    }); 
});
app.post('/offline__fetch_assigned_stage2_audit_team_members_v1', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM assigned_stage2_audit_teams WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset['recordsets'][0].map((ele, idx) => {
                itemVal = ele;
                itemVal.selected = false;
                itemVal.index = idx;
                return itemVal;
            });
            //resRecordSet = resRecordSet.map(ele => ele['Member Name']);
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    }); 
});
app.post('/aws_rds__fetch_assigned_stage2_audit_team_members_v1', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM assigned_stage2_audit_teams WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err) console.log(err)
            const QueryABFilter = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.query(queryForFilter,  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            if (!recordset) 
            {
                res.send([]);
                sql.end();
                return;
            }
            var resRecordSet = recordset.map((ele, idx) => {
                itemVal = ele;
                itemVal.selected = false;
                itemVal.index = idx;
                return itemVal;
            });
            if (req.body['role'] == 'Accreditation Board')
            {
                var queryData = await QueryABFilter("SELECT filter_value FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Assign Stage 2 Audit Team' AND table_type = 'Logs'");
                queryData = JSON.parse(queryData[0]['filter_value']);
                //console.log(queryData)
                resRecordSet = resRecordSet.filter(ele => {
                    var isMatching = true;
                    for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                    {
                        //console.log(typeof(queryData[intIdx]['value']));
                        if (typeof(queryData[intIdx]['value']) != 'object')
                        {
                            if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                            {
                                isMatching = false;
                                break;
                            }
                        }
                        else
                        {
                            for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                            {
                                var isThisMatchingForOnce = false;
                                if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                {
                                    isThisMatchingForOnce = true;
                                    break;
                                }
                            }
                            if (!isThisMatchingForOnce) isMatching = false;
                        }
                    }
                    if (isMatching) return ele;
                    //if (ele)
                })
            }
            //resRecordSet = resRecordSet.map(ele => ele['Member Name']);
            sql.end();
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    }); 
});
app.post('/fetch_assigned_surveillance_audit_team_members_v1', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("assigned_surveillance_audit_teams/" + req.body['clientid'] + "/surveillance_audit_teams");
    userRef.on('value', (snapshot) => {
        //res.send(JSON.stringify(snapshot.val()));
        var keys = [];
        var index = 0;
        if (snapshot.numChildren() == 0) {
            res.send(keys);
        }
        snapshot.forEach(function(item) {
            var itemVal = {'Member Name': item.val()};
            itemVal.selected = false;
            itemVal.index = index;
            index++;
            keys.push(itemVal);
            if (index == snapshot.numChildren()) {
                //console.log(keys);
                res.send(keys);
            }
        });
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/offline__fetch_assigned_surveillance_audit_team_members_v1', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM assigned_surveillance_audit_teams WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset['recordsets'][0].map((ele, idx) => {
                itemVal = ele;
                itemVal.selected = false;
                itemVal.index = idx;
                return itemVal;
            });
            //resRecordSet = resRecordSet.map(ele => ele['Member Name']);
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    }); 
});
app.post('/aws_rds__fetch_assigned_surveillance_audit_team_members_v1', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM assigned_surveillance_audit_teams WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                sql.end();
                res.send([]);
                return;
            }
            const QueryABFilter = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.query(queryForFilter,  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            var resRecordSet = recordset.map((ele, idx) => {
                itemVal = ele;
                itemVal.selected = false;
                itemVal.index = idx;
                return itemVal;
            });
            if (req.body['role'] == 'Accreditation Board')
            {
                queryData = await QueryABFilter("SELECT filter_value FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Assign Surveillance Audit Team' AND table_type = 'Logs'");
                queryData = JSON.parse(queryData[0]['filter_value']);
                //console.log(queryData)
                resRecordSet = resRecordSet.filter(ele => {
                    var isMatching = true;
                    for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                    {
                        //console.log(typeof(queryData[intIdx]['value']));
                        if (typeof(queryData[intIdx]['value']) != 'object')
                        {
                            if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                            {
                                isMatching = false;
                                break;
                            }
                        }
                        else
                        {
                            for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                            {
                                var isThisMatchingForOnce = false;
                                if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                {
                                    isThisMatchingForOnce = true;
                                    break;
                                }
                            }
                            if (!isThisMatchingForOnce) isMatching = false;
                        }
                    }
                    if (isMatching) return ele;
                    //if (ele)
                })
            }
            //resRecordSet = resRecordSet.map(ele => ele['Member Name']);
            sql.end();
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    }); 
});
app.post('/offline__fetch_assigned_surveillance_audit_team_members', (req, res) => {
    var sql = require("mssql");
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM assigned_surveillance_audit_teams WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset['recordsets'][0].map((ele, idx) => {
                itemVal = ele;
                itemVal.selected = false;
                itemVal.index = idx;
                return itemVal;
            });
            //resRecordSet = resRecordSet.map(ele => ele['Member Name']);
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    });  
});
app.post('/aws_rds__fetch_assigned_surveillance_audit_team_members', (req, res) => {
    var mysql = require("mysql");
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM assigned_surveillance_audit_teams WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err) console.log(err)
            const QueryABFilter = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.query(queryForFilter,  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            if (!recordset) 
            {
                res.send([]);
                sql.end();
                return;
            }
            var resRecordSet = recordset.map((ele, idx) => {
                itemVal = ele;
                itemVal.selected = false;
                itemVal.index = idx;
                return itemVal;
            });
            //resRecordSet = resRecordSet.map(ele => ele['Member Name']);
            if (req.body['role'] == 'Accreditation Board')
            {
                var queryData = await QueryABFilter("SELECT filter_value FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Assign Surveillance Audit Team' AND table_type = 'Logs'");
                queryData = JSON.parse(queryData[0]['filter_value']);
                //console.log(queryData)
                resRecordSet = resRecordSet.filter(ele => {
                    var isMatching = true;
                    for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                    {
                        //console.log(typeof(queryData[intIdx]['value']));
                        if (typeof(queryData[intIdx]['value']) != 'object')
                        {
                            if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                            {
                                isMatching = false;
                                break;
                            }
                        }
                        else
                        {
                            for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                            {
                                var isThisMatchingForOnce = false;
                                if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                {
                                    isThisMatchingForOnce = true;
                                    break;
                                }
                            }
                            if (!isThisMatchingForOnce) isMatching = false;
                        }
                    }
                    if (isMatching) return ele;
                    //if (ele)
                })
            }
            sql.end();
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    });  
});
app.post('/fetch_assigned_recertification_audit_team_members_v1', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("assigned_recertification_audit_teams/" + req.body['clientid'] + "/recertification_audit_teams");
    userRef.on('value', (snapshot) => {
        //res.send(JSON.stringify(snapshot.val()));
        var keys = [];
        var index = 0;
        if (snapshot.numChildren() == 0) {
            res.send(keys);
        }
        snapshot.forEach(function(item) {
            var itemVal = {'Member Name': item.val()};
            itemVal.selected = false;
            itemVal.index = index;
            index++;
            keys.push(itemVal);
            if (index == snapshot.numChildren()) {
                //console.log(keys);
                res.send(keys);
            }
        });
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/offline__fetch_assigned_recertification_audit_team_members_v1', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM assigned_recertification_audit_teams WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset['recordsets'][0].map((ele, idx) => {
                itemVal = ele;
                itemVal.selected = false;
                itemVal.index = idx;
                return itemVal;
            });
            //resRecordSet = resRecordSet.map(ele => ele['Member Name']);
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    }); 
});
app.post('/aws_rds__fetch_assigned_recertification_audit_team_members_v1', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM assigned_recertification_audit_teams WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                sql.end();
                return;
            }
            var resRecordSet = recordset.map((ele, idx) => {
                itemVal = ele;
                itemVal.selected = false;
                itemVal.index = idx;
                return itemVal;
            });
            //resRecordSet = resRecordSet.map(ele => ele['Member Name']);
            sql.end();
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    }); 
});
app.post('/offline__fetch_assigned_recertification_audit_team_members', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM assigned_recertification_audit_teams WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset['recordsets'][0].map((ele, idx) => {
                itemVal = ele;
                itemVal.selected = false;
                itemVal.index = idx;
                return itemVal;
            });
            //resRecordSet = resRecordSet.map(ele => ele['Member Name']);
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/aws_rds__fetch_assigned_recertification_audit_team_members', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM assigned_recertification_audit_teams WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                sql.end();
                res.send([]);
                return;
            }
            const QueryABFilter = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.query(queryForFilter,  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            var resRecordSet = recordset.map((ele, idx) => {
                itemVal = ele;
                itemVal.selected = false;
                itemVal.index = idx;
                return itemVal;
            });
            //resRecordSet = resRecordSet.map(ele => ele['Member Name']);
            if (req.body['role'] == 'Accreditation Board')
            {
                var queryData = await QueryABFilter("SELECT filter_value FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Assign Recertification Audit Team' AND table_type = 'Logs'");
                queryData = JSON.parse(queryData[0]['filter_value']);
                //console.log(queryData)
                resRecordSet = resRecordSet.filter(ele => {
                    var isMatching = true;
                    for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                    {
                        //console.log(typeof(queryData[intIdx]['value']));
                        if (typeof(queryData[intIdx]['value']) != 'object')
                        {
                            if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                            {
                                isMatching = false;
                                break;
                            }
                        }
                        else
                        {
                            for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                            {
                                var isThisMatchingForOnce = false;
                                if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                {
                                    isThisMatchingForOnce = true;
                                    break;
                                }
                            }
                            if (!isThisMatchingForOnce) isMatching = false;
                        }
                    }
                    if (isMatching) return ele;
                    //if (ele)
                })
            }
            sql.end();
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/fetch_assigned_stage2_audit_team_members_v1', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("assigned_stage2_audit_teams/" + req.body['clientid'] + "/stage2_audit_teams");
    userRef.on('value', (snapshot) => {
        //res.send(JSON.stringify(snapshot.val()));
        var keys = [];
        var index = 0;
        if (snapshot.numChildren() == 0) {
            res.send(keys);
        }
        snapshot.forEach(function(item) {
            var itemVal = {'Member Name': item.val()};
            itemVal.selected = false;
            itemVal.index = index;
            index++;
            keys.push(itemVal);
            if (index == snapshot.numChildren()) {
                //console.log(keys);
                res.send(keys);
            }
        });
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/fetch_stage1_audit_plan', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("stage1_audit_plans/" + req.body['clientid']);
    userRef.on('value', (snapshot) => {
        if (snapshot.val() != null) {
            var val = snapshot.val();
            var keys = [];
            if (val.logs) {
                Object.entries(val.logs).forEach(([key, value]) => {
                    keys.push({id: key, stage1PlanDescription: value.stage1PlanDescription, status: value.status, date: value.date});
                });
            }
            res.send({stage1PlanDescription: val.stage1PlanDescription, logs: keys});
        }
        else res.send({stage1PlanDescription: "", logs: []});
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/offline__fetch_stage1_audit_plan', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        var query = "SELECT * FROM stage1_audit_plans WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        request.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;
            request.query("SELECT * FROM stage1_audit_plan_logs WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "stage1_audit_plans"]);
                var lstImageFiles = stdout.split("\r\n");
                //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                lstImageFiles = lstImageFiles.filter(ele => ele != "");
                if (resRecordSet['recordset'].length > 0)
                    res.send({"description": resRecordSet['recordset'][0]['stage1PlanDescription'], "logs": iResRecordSet, "lstFiles": lstImageFiles});
                else res.send({"description": "", "logs": iResRecordSet, "lstFiles": lstImageFiles});
            });
        });
    });
});
app.post('/aws_rds__fetch_stage1_audit_plan', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        const QueryABFilter = (queryForFilter) => {
            return new Promise((resolve, reject)=>{
                sql.query(queryForFilter,  (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        const QuerySQL = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query, (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        var resDataToDelete = await QuerySQL("SELECT * FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND category = 'Stage 1 Audit Plan Logs'");
        resDataToDelete.forEach(async (ele) => {
            await QuerySQL("DELETE FROM stage1_audit_plan_logs WHERE user_id = '" + req.body['userid'] + "' AND id = '" + ele['client_id'] + "'");
        })
        await QuerySQL("UPDATE incomplete_file_upload_cleanup SET deleted_from_database_or_not = 'Yes' WHERE user_id = '" + req.body['userid'] + "' AND category = 'Stage 1 Audit Plan Logs'");
        //var request = new sql.Request();
        var query = "SELECT * FROM stage1_audit_plans WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        sql.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                sql.end();
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;
            sql.query("SELECT * FROM stage1_audit_plan_logs WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                var lstImageFiles = [];
                if (req.body['role'] == 'Accreditation Board')
                {
                    var queryData = await QueryABFilter("SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Stage 1 Audit Plan' AND table_type = 'Logs'");
                    var dateQueryData = JSON.parse(queryData[0]['date_filter_value']);
                    queryData = JSON.parse(queryData[0]['filter_value']);
                    //console.log(queryData)
                    var mToday = new Date();
                    var mdd = String(mToday.getDate()).padStart(2, '0');
                    var mmm = String(mToday.getMonth() + 1).padStart(2, '0'); //January is 0!
                    var myyyy = mToday.getFullYear();
                    mToday = myyyy + '-' + mmm + '-' + mdd;
                    if ((dateQueryData.fromDateLogs || dateQueryData.toDateLogs) && dateQueryData.filterDateLogs)
                    {
                        var fromDate = dateQueryData.fromDateLogs ? dateQueryData.fromDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                        var toDate = dateQueryData.toDateLogs ? dateQueryData.toDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                        iResRecordSet = iResRecordSet.filter(ele => {
                            var curDate = ele['date'].split("-")[2] + ele['date'].split("-")[1] + ele['date'].split("-")[0];
                            if (fromDate <= curDate && curDate <= toDate) {
                            return ele;
                            }
                        })
                    }
                    iResRecordSet = iResRecordSet.filter(ele => {
                        var isMatching = true;
                        for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                        {
                            //console.log(typeof(queryData[intIdx]['value']));
                            if (typeof(queryData[intIdx]['value']) != 'object')
                            {
                                if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                                {
                                    isMatching = false;
                                    break;
                                }
                            }
                            else
                            {
                                for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                                {
                                    var isThisMatchingForOnce = false;
                                    if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                    {
                                        isThisMatchingForOnce = true;
                                        break;
                                    }
                                }
                                if (!isThisMatchingForOnce) isMatching = false;
                            }
                        }
                        if (isMatching) return ele;
                        //if (ele)
                    })
                }
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "stage1_audit_plans"]);
                // lstImageFiles = stdout.split("\r\n");
                // //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                // lstImageFiles = lstImageFiles.filter(ele => ele != "");
                sql.end();
                if (resRecordSet.length > 0)
                    res.send({"stage1PlanDescription": resRecordSet[0]['stage1PlanDescription'], "logs": iResRecordSet, "lstFiles": lstImageFiles});
                else res.send({"stage1PlanDescription": "", "logs": iResRecordSet, "lstFiles": lstImageFiles});
            });
        });
    });
});
app.post('/offline__fetch_stage2_audit_plan', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        var query = "SELECT * FROM stage2_audit_plans WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        request.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;
            request.query("SELECT * FROM stage2_audit_plan_logs WHERE client_id = '" + req.body['clientid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "stage2_audit_plans"]);
                var lstImageFiles = stdout.split("\r\n");
                //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                lstImageFiles = lstImageFiles.filter(ele => ele != "");
                if (resRecordSet['recordset'].length > 0)
                    res.send({"description": resRecordSet['recordset'][0]['stage2PlanDescription'], "logs": iResRecordSet, "lstFiles": lstImageFiles});
                else res.send({"description": "", "logs": iResRecordSet, "lstFiles": lstImageFiles});
            });
        });
    });
});
app.post('/aws_rds__fetch_stage2_audit_plan', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        var query = "SELECT * FROM stage2_audit_plans WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        sql.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;
            const QuerySQL = (query) => {
                return new Promise((resolve, reject)=>{
                    sql.query(query, (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            var resDataToDelete = await QuerySQL("SELECT * FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND category = 'Stage 2 Audit Plan Logs'");
            resDataToDelete.forEach(async (ele) => {
                await QuerySQL("DELETE FROM stage2_audit_plan_logs WHERE user_id = '" + req.body['userid'] + "' AND id = '" + ele['client_id'] + "'");
            })
            await QuerySQL("UPDATE incomplete_file_upload_cleanup SET deleted_from_database_or_not = 'Yes' WHERE user_id = '" + req.body['userid'] + "' AND category = 'Stage 2 Audit Plan Logs'");
            sql.query("SELECT * FROM stage2_audit_plan_logs WHERE client_id = '" + req.body['clientid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                const QueryABFilter = (queryForFilter) => {
                    return new Promise((resolve, reject)=>{
                        sql.query(queryForFilter,  (error, results)=>{
                            if(error){
                                return reject(error);
                            }
                            return resolve(results);
                        });
                    });
                };
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                var lstImageFiles = [];
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "stage2_audit_plans"]);
                // lstImageFiles = stdout.split("\r\n");
                // //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                // lstImageFiles = lstImageFiles.filter(ele => ele != "");
                if (req.body['role'] == 'Accreditation Board')
                {
                    var queryData = await QueryABFilter("SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Stage 2 Audit Plan' AND table_type = 'Logs'");
                    var dateQueryData = JSON.parse(queryData[0]['date_filter_value']);
                    queryData = JSON.parse(queryData[0]['filter_value']);
                    //console.log(queryData)
                    var mToday = new Date();
                    var mdd = String(mToday.getDate()).padStart(2, '0');
                    var mmm = String(mToday.getMonth() + 1).padStart(2, '0'); //January is 0!
                    var myyyy = mToday.getFullYear();
                    mToday = myyyy + '-' + mmm + '-' + mdd;
                    if ((dateQueryData.fromDateLogs || dateQueryData.toDateLogs) && dateQueryData.filterDateLogs)
                    {
                        var fromDate = dateQueryData.fromDateLogs ? dateQueryData.fromDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                        var toDate = dateQueryData.toDateLogs ? dateQueryData.toDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                        iResRecordSet = iResRecordSet.filter(ele => {
                            var curDate = ele['date'].split("-")[2] + ele['date'].split("-")[1] + ele['date'].split("-")[0];
                            if (fromDate <= curDate && curDate <= toDate) {
                            return ele;
                            }
                        })
                    }
                    iResRecordSet = iResRecordSet.filter(ele => {
                        var isMatching = true;
                        for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                        {
                            //console.log(typeof(queryData[intIdx]['value']));
                            if (typeof(queryData[intIdx]['value']) != 'object')
                            {
                                if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                                {
                                    isMatching = false;
                                    break;
                                }
                            }
                            else
                            {
                                for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                                {
                                    var isThisMatchingForOnce = false;
                                    if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                    {
                                        isThisMatchingForOnce = true;
                                        break;
                                    }
                                }
                                if (!isThisMatchingForOnce) isMatching = false;
                            }
                        }
                        if (isMatching) return ele;
                        //if (ele)
                    })
                }
                sql.end();
                if (resRecordSet.length > 0)
                    res.send({"stage2PlanDescription": resRecordSet[0]['stage2PlanDescription'], "logs": iResRecordSet, "lstFiles": lstImageFiles});
                else res.send({"stage2PlanDescription": "", "logs": iResRecordSet, "lstFiles": lstImageFiles});
            });
        });
    });
});
app.post('/fetch_surveillance_audit_plan', (req, res) => {
    //console.log(req.body['clientid'] );
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    //var userRef=db.ref("stage1_audit_plans/" + req.body['clientid'] + "/stage1PlanDescription");
    var userRef=db.ref("surveillance_audit_plans/" + req.body['clientid']);
    userRef.on('value', (snapshot) => {
        //if (snapshot.val() != null)
        //    res.send(snapshot.val());
        //else res.send({surveillanceAuditPlanDescription: "", taskList: []});
        //client.delete();
        if (snapshot.val() != null) {
            var val = snapshot.val();
            var keys = [];
            if (val.logs) {
                Object.entries(val.logs).forEach(([key, value]) => {
                    keys.push({id: key, description: value.description, status: value.status, date: value.date});
                });
            }
            res.send({surveillancePlanDescription: val.surveillanceAuditPlanDescription, logs: keys});
        }
        else res.send({stage2PlanDescription: "", logs: []});
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/offline__fetch_surveillance_audit_plan', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        var query = "SELECT * FROM surveillance_audit_plans WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        request.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;
            request.query("SELECT * FROM surveillance_audit_plan_logs WHERE client_id = '" + req.body['clientid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "surveillance_audit_plans"]);
                var lstImageFiles = stdout.split("\r\n");
                //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                lstImageFiles = lstImageFiles.filter(ele => ele != "");
                if (resRecordSet['recordset'].length > 0)
                    res.send({"description": resRecordSet['recordset'][0]['surveillanceAuditPlanDescription'], "logs": iResRecordSet, "lstFiles": lstImageFiles});
                else res.send({"description": "", "logs": iResRecordSet, "lstFiles": lstImageFiles});
            });
        });
    });
});
app.post('/aws_rds__fetch_surveillance_audit_plan', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        const QuerySQL = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query, (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        var resDataToDelete = await QuerySQL("SELECT * FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND category = 'Surveillance Audit Plan Logs'");
        resDataToDelete.forEach(async (ele) => {
            await QuerySQL("DELETE FROM surveillance_audit_plan_logs WHERE user_id = '" + req.body['userid'] + "' AND id = '" + ele['client_id'] + "'");
        })
        await QuerySQL("UPDATE incomplete_file_upload_cleanup SET deleted_from_database_or_not = 'Yes' WHERE user_id = '" + req.body['userid'] + "' AND category = 'Surveillance Audit Plan Logs'");
        //var request = new sql.Request();
        var query = "SELECT * FROM surveillance_audit_plans WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        sql.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;
            sql.query("SELECT * FROM surveillance_audit_plan_logs WHERE client_id = '" + req.body['clientid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                var lstImageFiles = [];
                const QueryABFilter = (queryForFilter) => {
                    return new Promise((resolve, reject)=>{
                        sql.query(queryForFilter,  (error, results)=>{
                            if(error){
                                return reject(error);
                            }
                            return resolve(results);
                        });
                    });
                };
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "surveillance_audit_plans"]);
                // lstImageFiles = stdout.split("\r\n");
                // //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                // lstImageFiles = lstImageFiles.filter(ele => ele != "");
                if (req.body['role'] == 'Accreditation Board')
                {
                    var queryData = await QueryABFilter("SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Surveillance Audit Plan' AND table_type = 'Logs'");
                    var dateQueryData = JSON.parse(queryData[0]['date_filter_value']);
                    queryData = JSON.parse(queryData[0]['filter_value']);
                    var mToday = new Date();
                    var mdd = String(mToday.getDate()).padStart(2, '0');
                    var mmm = String(mToday.getMonth() + 1).padStart(2, '0'); //January is 0!
                    var myyyy = mToday.getFullYear();
                    mToday = myyyy + '-' + mmm + '-' + mdd;
                    if ((dateQueryData.fromDateLogs || dateQueryData.toDateLogs) && dateQueryData.filterDateLogs)
                    {
                        var fromDate = dateQueryData.fromDateLogs ? dateQueryData.fromDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                        var toDate = dateQueryData.toDateLogs ? dateQueryData.toDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                        iResRecordSet = iResRecordSet.filter(ele => {
                            var curDate = ele['date'].split("-")[2] + ele['date'].split("-")[1] + ele['date'].split("-")[0];
                            if (fromDate <= curDate && curDate <= toDate) {
                            return ele;
                            }
                        })
                    }
                    //console.log(queryData)
                    iResRecordSet = iResRecordSet.filter(ele => {
                        var isMatching = true;
                        for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                        {
                            //console.log(typeof(queryData[intIdx]['value']));
                            if (typeof(queryData[intIdx]['value']) != 'object')
                            {
                                if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                                {
                                    isMatching = false;
                                    break;
                                }
                            }
                            else
                            {
                                for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                                {
                                    var isThisMatchingForOnce = false;
                                    if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                    {
                                        isThisMatchingForOnce = true;
                                        break;
                                    }
                                }
                                if (!isThisMatchingForOnce) isMatching = false;
                            }
                        }
                        if (isMatching) return ele;
                        //if (ele)
                    })
                }
                sql.end();
                if (resRecordSet.length > 0)
                    res.send({"surveillancePlanDescription": resRecordSet[0]['surveillanceAuditPlanDescription'], "logs": iResRecordSet, "lstFiles": lstImageFiles});
                else res.send({"surveillancePlanDescription": "", "logs": iResRecordSet, "lstFiles": lstImageFiles});
            });
        });
    });
});
app.post('/fetch_recertification_audit_plan', (req, res) => {
    //console.log(req.body['clientid'] );
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    //var userRef=db.ref("stage1_audit_plans/" + req.body['clientid'] + "/stage1PlanDescription");
    var userRef=db.ref("recertification_audit_plans/" + req.body['clientid']);
    userRef.on('value', (snapshot) => {
        //res.send(JSON.stringify(snapshot.val()));
        //console.log(snapshot.val());
        // if (snapshot.val() != null)
        //     res.send(snapshot.val());
        // else res.send({recertificationAuditPlanDescription: "", taskList: []});
        // client.delete();
        if (snapshot.val() != null) {
            var val = snapshot.val();
            var keys = [];
            if (val.logs) {
                Object.entries(val.logs).forEach(([key, value]) => {
                    keys.push({id: key, description: value.description, status: value.status, date: value.date});
                });
            }
            res.send({recertificationPlanDescription: val.recertificationAuditPlanDescription, logs: keys});
        }
        else res.send({stage2PlanDescription: "", logs: []});
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/offline__fetch_recertification_audit_plan', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        var query = "SELECT * FROM recertification_audit_plans WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        request.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;
            request.query("SELECT * FROM recertification_audit_plan_logs WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "recertification_audit_plans"]);
                var lstImageFiles = stdout.split("\r\n");
                //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                lstImageFiles = lstImageFiles.filter(ele => ele != "");
                if (resRecordSet['recordset'].length > 0)
                    res.send({"description": resRecordSet['recordset'][0]['recertificationAuditPlanDescription'], "logs": iResRecordSet, "lstFiles": lstImageFiles});
                else res.send({"description": "", "logs": iResRecordSet, "lstFiles": lstImageFiles});
            });
        });
    });
});
app.post('/aws_rds__fetch_recertification_audit_plan', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        const QuerySQL = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query, (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        var resDataToDelete = await QuerySQL("SELECT * FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND category = 'Recertification Audit Plan Logs'");
        resDataToDelete.forEach(async (ele) => {
            await QuerySQL("DELETE FROM recertification_audit_plan_logs WHERE user_id = '" + req.body['userid'] + "' AND id = '" + ele['client_id'] + "'");
        })
        await QuerySQL("UPDATE incomplete_file_upload_cleanup SET deleted_from_database_or_not = 'Yes' WHERE user_id = '" + req.body['userid'] + "' AND category = 'Recertification Audit Plan Logs'");
        var query = "SELECT * FROM recertification_audit_plans WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        sql.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;
            sql.query("SELECT * FROM recertification_audit_plan_logs WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                const QueryABFilter = (queryForFilter) => {
                    return new Promise((resolve, reject)=>{
                        sql.query(queryForFilter,  (error, results)=>{
                            if(error){
                                return reject(error);
                            }
                            return resolve(results);
                        });
                    });
                };
                var iResRecordSet = iRecordset;
                var lstImageFiles = [];
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "recertification_audit_plans"]);
                // lstImageFiles = stdout.split("\r\n");
                // //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                // lstImageFiles = lstImageFiles.filter(ele => ele != "");
                if (req.body['role'] == 'Accreditation Board')
                {
                    var queryData = await QueryABFilter("SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Recertification Audit Plan' AND table_type = 'Logs'");
                    var dateQueryData = JSON.parse(queryData[0]['date_filter_value']);
                    queryData = JSON.parse(queryData[0]['filter_value']);
                    var mToday = new Date();
                    var mdd = String(mToday.getDate()).padStart(2, '0');
                    var mmm = String(mToday.getMonth() + 1).padStart(2, '0'); //January is 0!
                    var myyyy = mToday.getFullYear();
                    mToday = myyyy + '-' + mmm + '-' + mdd;
                    if ((dateQueryData.fromDateLogs || dateQueryData.toDateLogs) && dateQueryData.filterDateLogs)
                    {
                        var fromDate = dateQueryData.fromDateLogs ? dateQueryData.fromDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                        var toDate = dateQueryData.toDateLogs ? dateQueryData.toDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                        iResRecordSet = iResRecordSet.filter(ele => {
                            var curDate = ele['date'].split("-")[2] + ele['date'].split("-")[1] + ele['date'].split("-")[0];
                            if (fromDate <= curDate && curDate <= toDate) {
                            return ele;
                            }
                        })
                    }
                    //console.log(queryData)
                    iResRecordSet = iResRecordSet.filter(ele => {
                        var isMatching = true;
                        for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                        {
                            //console.log(typeof(queryData[intIdx]['value']));
                            if (typeof(queryData[intIdx]['value']) != 'object')
                            {
                                if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                                {
                                    isMatching = false;
                                    break;
                                }
                            }
                            else
                            {
                                for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                                {
                                    var isThisMatchingForOnce = false;
                                    if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                    {
                                        isThisMatchingForOnce = true;
                                        break;
                                    }
                                }
                                if (!isThisMatchingForOnce) isMatching = false;
                            }
                        }
                        if (isMatching) return ele;
                        //if (ele)
                    })
                }
                sql.end();
                if (resRecordSet.length > 0)
                    res.send({"recertificationPlanDescription": resRecordSet[0]['recertificationAuditPlanDescription'], "logs": iResRecordSet, "lstFiles": lstImageFiles});
                else res.send({"recertificationPlanDescription": "", "logs": iResRecordSet, "lstFiles": lstImageFiles});
            });
        });
    });
});
app.post('/fetch_stage1_task_list', (req, res) => {
    //console.log(req.body['clientid'] );
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    //var userRef=db.ref("stage1_audit_plans/" + req.body['clientid'] + "/stage1PlanDescription");
    var userRef=db.ref("stage1_audit_plans/" + req.body['clientid'] + "/taskList");
    userRef.on('value', (snapshot) => {
        //res.send(JSON.stringify(snapshot.val()));
        //res.send(snapshot.val());
        var keys = [];
        var index = 0;
        if (snapshot.numChildren() == 0) {
            res.send(keys);
        }
        snapshot.forEach(function(item) {
            var itemVal = item.val();
            itemVal.timestamp = Object.keys(snapshot.val())[index];
            itemVal.selected = false;
            itemVal.index = index;
            index++;
            keys.push(itemVal);
            if (index == snapshot.numChildren()) {
                //console.log(keys);
                res.send(keys);
            }
        });
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/offline__fetch_stage1_task_list', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM stage1_audit_plan_task_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset['recordsets'][0].map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['client_id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            res.send(resRecordSet);
        });
    });
});
app.post('/aws_rds__fetch_stage1_task_list', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM stage1_audit_plan_task_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err) console.log(err)
            const QueryABFilter = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.query(queryForFilter,  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            if (!recordset) 
            {
                sql.end();
                res.send([]);
                return;
            }
            var resRecordSet = recordset.map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['client_id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            if (req.body['role'] == 'Accreditation Board')
            {
                var queryData = await QueryABFilter("SELECT filter_value FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Stage 1 Audit Plan Tasks' AND table_type = 'Logs'");
                queryData = JSON.parse(queryData[0]['filter_value']);
                //console.log(queryData)
                resRecordSet = resRecordSet.filter(ele => {
                    var isMatching = true;
                    for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                    {
                        //console.log(typeof(queryData[intIdx]['value']));
                        if (typeof(queryData[intIdx]['value']) != 'object')
                        {
                            if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                            {
                                isMatching = false;
                                break;
                            }
                        }
                        else
                        {
                            for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                            {
                                var isThisMatchingForOnce = false;
                                if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                {
                                    isThisMatchingForOnce = true;
                                    break;
                                }
                            }
                            if (!isThisMatchingForOnce) isMatching = false;
                        }
                    }
                    if (isMatching) return ele;
                    //if (ele)
                })
            }
            sql.end();
            res.send(resRecordSet);
        });
    });
});
app.get("/avcc", async (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    const QueryEmailId = (id) =>{
        return new Promise((resolve, reject)=>{
            sql.query("Select `Member Email` from stage1_audit_teams WHERE id = '" + id + "'",  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    var result = await QueryEmailId("1663861327491");
    sql.end();
    console.log(result[0]['Member Email']);
    res.send(result[0]['Member Email']);
})
app.post('/aws_rds__fetch_stage1_attendance_list_for_app', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    const QueryEmailId = (id) => {
        return new Promise((resolve, reject)=>{
            sql.query("Select `Member Email` from stage1_audit_teams WHERE id = '" + id + "'",  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    const QueryStage1AttendanceList = () => {
        return new Promise((resolve, reject)=>{
            sql.query("Select * from attendance_list WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['clientid'] + "' AND audit_type = 'Stage 1 Audit'",  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM stage1_audit_plan_attendance_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "' AND (checklist_id = '" + req.body['checklist_id'] + "' OR checklist_id = '')", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                sql.end();
                res.send([]);
                return;
            }
            for (var intIdx = 0; intIdx < recordset.length; intIdx++)
            {
                var newRecord = recordset[intIdx];
                var email = "";
                newRecord.timestamp = newRecord['client_id'];
                email = await QueryEmailId(newRecord['member_id']);
                newRecord['email'] = email[0]['Member Email'];
                newRecord.selected = false;
                newRecord.index = intIdx;
                recordset[intIdx] = newRecord;
            }
            var validAttendanceIds = [];
            validAttendanceIds = recordset.map(ele => ele['attendance_id']);
            var stage1AttendanceList = await QueryStage1AttendanceList("Select * from attendance_list WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['clientid'] + "' AND audit_type = 'Stage 1 Audit'");
            var firstAttendanceSessionData = recordset.filter(ele => ele['attendance_id'] == stage1AttendanceList[0]['attendance_id']);
            sql.end();
            res.send({
                "data": recordset,
                "attendance_list": stage1AttendanceList,
                "firstAttendanceSessionData": firstAttendanceSessionData,
                "firstAttendanceId": stage1AttendanceList.length > 0 ? stage1AttendanceList[0]['attendance_id'] : "",
                "validAttendanceIds": validAttendanceIds
            });
        });
    });
});
app.post('/aws_rds__fetch_stage2_attendance_list_for_app', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    const QueryEmailId = (id) => {
        return new Promise((resolve, reject)=>{
            sql.query("Select `Member Email` from stage2_audit_teams WHERE id = '" + id + "'",  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    const QueryStage2AttendanceList = () => {
        return new Promise((resolve, reject)=>{
            sql.query("Select * from attendance_list WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['clientid'] + "' AND audit_type = 'Stage 2 Audit'",  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM stage2_audit_plan_attendance_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "' AND (checklist_id = '" + req.body['checklist_id'] + "' OR checklist_id = '')", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                sql.end();
                res.send([]);
                return;
            }
            for (var intIdx = 0; intIdx < recordset.length; intIdx++)
            {
                var newRecord = recordset[intIdx];
                var email = "";
                newRecord.timestamp = newRecord['client_id'];
                email = await QueryEmailId(newRecord['member_id']);
                newRecord['email'] = email[0]['Member Email'];
                newRecord.selected = false;
                newRecord.index = intIdx;
                recordset[intIdx] = newRecord;
            }
            var validAttendanceIds = [];
            validAttendanceIds = recordset.map(ele => ele['attendance_id']);
            var stage2AttendanceList = await QueryStage2AttendanceList();
            var firstAttendanceSessionData = recordset.filter(ele => ele['attendance_id'] == stage2AttendanceList[0]['attendance_id']);
            sql.end();
            res.send({
                "data": recordset, 
                "attendance_list": stage2AttendanceList, 
                "firstAttendanceSessionData": firstAttendanceSessionData,
                "firstAttendanceId": stage2AttendanceList.length > 0 ? stage2AttendanceList[0]['attendance_id'] : "",
                "validAttendanceIds": validAttendanceIds
            });
        });
    });
});
app.post('/aws_rds__fetch_surveillance_attendance_list_for_app', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    const QueryEmailId = (id) => {
        return new Promise((resolve, reject) => {
            sql.query("Select `Member Email` from employees WHERE employee_id = '" + id + "' AND `Member Designation` = 'Surveillance Auditor'",  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    const QuerySurveillanceAttendanceList = () => {
        return new Promise((resolve, reject)=>{
            sql.query("Select * from attendance_list WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['clientid'] + "' AND audit_type = 'Surveillance Audit'",  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM surveillance_audit_plan_attendance_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "' AND (checklist_id = '" + req.body['checklist_id'] + "' OR checklist_id = '')", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                sql.end();
                res.send([]);
                return;
            }
            for (var intIdx = 0; intIdx < recordset.length; intIdx++)
            {
                var newRecord = recordset[intIdx];
                var email = "";
                newRecord.timestamp = newRecord['client_id'];
                email = await QueryEmailId(newRecord['member_id']);
                newRecord['email'] = email[0]['Member Email'];
                newRecord.selected = false;
                newRecord.index = intIdx;
                recordset[intIdx] = newRecord;
            }
            var validAttendanceIds = [];
            validAttendanceIds = recordset.map(ele => ele['attendance_id']);
            var surveillanceAttendanceList = await QuerySurveillanceAttendanceList();
            var firstAttendanceSessionData = recordset.filter(ele => ele['attendance_id'] == surveillanceAttendanceList[0]['attendance_id']);
            sql.end();
            res.send({
                "data": recordset, 
                "attendance_list": surveillanceAttendanceList, 
                "firstAttendanceSessionData": firstAttendanceSessionData,
                "firstAttendanceId": surveillanceAttendanceList.length > 0 ? surveillanceAttendanceList[0]['attendance_id'] : "",
                "validAttendanceIds": validAttendanceIds
            });
        });
    });
});
app.post('/aws_rds__fetch_recertification_attendance_list_for_app', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    const QueryEmailId = (id) => {
        return new Promise((resolve, reject) => {
            sql.query("Select `Member Email` from employees WHERE employee_id = '" + id + "' AND `Member Designation` = 'Recertification Auditor'",  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    const QueryRecertificationAttendanceList = () => {
        return new Promise((resolve, reject)=>{
            sql.query("Select * from attendance_list WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['clientid'] + "' AND audit_type = 'Recertification Audit'",  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM recertification_audit_plan_attendance_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "' AND (checklist_id = '" + req.body['checklist_id'] + "' OR checklist_id = '')", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                sql.end();
                res.send([]);
                return;
            }
            for (var intIdx = 0; intIdx < recordset.length; intIdx++)
            {
                var newRecord = recordset[intIdx];
                var email = "";
                newRecord.timestamp = newRecord['client_id'];
                email = await QueryEmailId(newRecord['member_id']);
                newRecord['email'] = email[0]['Member Email'];
                newRecord.selected = false;
                newRecord.index = intIdx;
                recordset[intIdx] = newRecord;
            }
            var validAttendanceIds = [];
            validAttendanceIds = recordset.map(ele => ele['attendance_id']);
            var recertificationAttendanceList = await QueryRecertificationAttendanceList();
            var firstAttendanceSessionData = recordset.filter(ele => ele['attendance_id'] == recertificationAttendanceList[0]['attendance_id']);
            sql.end();
            res.send({
                "data": recordset, 
                "attendance_list": recertificationAttendanceList, 
                "firstAttendanceSessionData": firstAttendanceSessionData,
                "firstAttendanceId": recertificationAttendanceList.length > 0 ? recertificationAttendanceList[0]['attendance_id'] : "",
                "validAttendanceIds": validAttendanceIds
            });
        });
    });
});
app.post('/aws_rds__fetch_stage1_attendance_list', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    const QueryEmailId = (id) => {
        return new Promise((resolve, reject)=>{
            sql.query("Select `Member Email` from stage1_audit_teams WHERE id = '" + id + "'",  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM stage1_audit_plan_attendance_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "' AND attendance_id = '" + req.body['attendance_id'] + "'", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                sql.end();
                res.send([]);
                return;
            }
            for (var intIdx = 0; intIdx < recordset.length; intIdx++)
            {
                var newRecord = recordset[intIdx];
                var email = "";
                newRecord.timestamp = newRecord['client_id'];
                email = await QueryEmailId(newRecord['member_id']);
                newRecord['email'] = email[0]['Member Email'];
                newRecord.selected = false;
                newRecord.index = intIdx;
                recordset[intIdx] = newRecord;
            }
            sql.end();
            res.send({"data": recordset});
        });
    });
});
app.post('/aws_rds__fetch_attendance_list', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    const QueryData = (query) =>{
        return new Promise((resolve, reject)=>{
            sql.query(query,  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM attendance_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "' AND audit_type = '" + req.body['audit_type'] + "'", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                sql.end();
                res.send([]);
                return;
            }
            var resRecordSet = recordset.map((record, index) => {
                var newRecord = record;
                newRecord['name'] = "Attendance List " + (index + 1);
                return newRecord;
            });
            //var assignedTeams = await QueryAssignedStage1AuditTeam();
            var query = '';
            var queryForClientAddress;
            if (req.body['audit_type'] == 'Stage 1 Audit')
            {
                query = "SELECT * FROM assigned_stage1_audit_teams WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
                queryForClientAddress = "SELECT * FROM stage1_audit_plan_attendance_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
            }
            else if (req.body['audit_type'] == 'Stage 2 Audit')
            {
                query = "SELECT * FROM assigned_stage2_audit_teams WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
                queryForClientAddress = "SELECT * FROM stage2_audit_plan_attendance_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
            }
            else if (req.body['audit_type'] == 'Surveillance Audit')
            {
                query = "SELECT * FROM assigned_surveillance_audit_teams WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
                queryForClientAddress = "SELECT * FROM surveillance_audit_plan_attendance_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
            }
            else if (req.body['audit_type'] == 'Recertification Audit')
            {
                query = "SELECT * FROM assigned_recertification_audit_teams WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
                queryForClientAddress = "SELECT * FROM recertification_audit_plan_attendance_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
            }
            var assignedTeams = await QueryData(query);
            var inspectionChecklists = await QueryData("SELECT * FROM inspection_checklist_templates WHERE user_id = '" + req.body['userid'] + "' OR user_id = ''");
            //var clientAddressData = await QueryData(queryForClientAddress);
            sql.end();
            //res.send({"data": resRecordSet, "teams": assignedTeams, "inspectionChecklists": inspectionChecklists, "clientAddrDetails": clientAddressData});
            res.send({"data": resRecordSet, "teams": assignedTeams, "inspectionChecklists": inspectionChecklists});
        });
    });
});
app.post('/aws_rds__fetch_stage2_attendance_list', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    // const QueryAssignedStage2AuditTeam = (tableName) =>{
    //     return new Promise((resolve, reject)=>{
    //         sql.query("SELECT * FROM assigned_stage2_audit_teams WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'",  (error, results)=>{
    //             if(error){
    //                 return reject(error);
    //             }
    //             return resolve(results);
    //         });
    //     });
    // };
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM stage2_audit_plan_attendance_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "' AND attendance_id = '" + req.body['attendance_id'] + "'", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                sql.end();
                res.send([]);
                return;
            }
            var resRecordSet = recordset.map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['client_id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            //var assignedTeams = await QueryAssignedStage2AuditTeam();
            sql.end();
            //res.send({"data": resRecordSet, "teams": assignedTeams});
            res.send(resRecordSet);
        });
    });
});
app.post('/aws_rds__fetch_surveillance_attendance_list', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM surveillance_audit_plan_attendance_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "' AND attendance_id = '" + req.body['attendance_id'] + "'", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                sql.end();
                res.send([]);
                return;
            }
            var resRecordSet = recordset.map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['client_id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            //var assignedTeams = await QueryAssignedStage1AuditTeam();
            sql.end();
            res.send(resRecordSet);
        });
    });
});
// app.post('/aws_rds__fetch_surveillance_attendance_list', (req, res) => {
//     var mysql = require("mysql");
//     // const fs = require('fs');
//     // var info = {};
//     // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
//     // allFileContents.split(/\r?\n/).forEach(line =>  {        
//     //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
//     // });
//     var sql = mysql.createConnection({
//         host     : DBENDPOINT,
//         user     : "admin",
//         password : "qwertyui",
//         port     : "3306",
//         database : "mydb"
//     });
//     const QueryAssignedSurveillanceAuditTeam = (tableName) =>{
//         return new Promise((resolve, reject)=>{
//             sql.query("SELECT * FROM assigned_surveillance_audit_teams WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'",  (error, results)=>{
//                 if(error){
//                     return reject(error);
//                 }
//                 return resolve(results);
//             });
//         });
//     };
//     sql.connect(function (err) {
//         if (err) console.log(err);
//         else console.log('connected');
//         //var request = new sql.Request();
//         sql.query("SELECT * FROM surveillance_audit_plan_attendance_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
//             if (err) console.log(err)
//             if (!recordset) 
//             {
//                 sql.end();
//                 res.send([]);
//                 return;
//             }
//             var resRecordSet = recordset.map((record, index) => {
//                 var newRecord = record;
//                 newRecord.timestamp = record['client_id'];
//                 newRecord.selected = false;
//                 newRecord.index = index;
//                 return newRecord;
//             });
//             var assignedTeams = await QueryAssignedSurveillanceAuditTeam();
//             sql.end();
//             res.send({"data": resRecordSet, "teams": assignedTeams});
//         });
//     });
// });
app.post('/aws_rds__fetch_recertification_attendance_list', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM recertification_audit_plan_attendance_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "' AND attendance_id = '" + req.body['attendance_id'] + "'", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                sql.end();
                res.send([]);
                return;
            }
            var resRecordSet = recordset.map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['client_id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            //var assignedTeams = await QueryAssignedStage1AuditTeam();
            sql.end();
            res.send(resRecordSet);
        });
    });
});
// app.post('/aws_rds__fetch_recertification_attendance_list', (req, res) => {
//     var mysql = require("mysql");
//     // const fs = require('fs');
//     // var info = {};
//     // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
//     // allFileContents.split(/\r?\n/).forEach(line =>  {        
//     //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
//     // });
//     var sql = mysql.createConnection({
//         host     : DBENDPOINT,
//         user     : "admin",
//         password : "qwertyui",
//         port     : "3306",
//         database : "mydb"
//     });
//     const QueryAssignedRecertificationAuditTeam = (tableName) =>{
//         return new Promise((resolve, reject)=>{
//             sql.query("SELECT * FROM assigned_recertification_audit_teams WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'",  (error, results)=>{
//                 if(error){
//                     return reject(error);
//                 }
//                 return resolve(results);
//             });
//         });
//     };
//     sql.connect(function (err) {
//         if (err) console.log(err);
//         else console.log('connected');
//         //var request = new sql.Request();
//         sql.query("SELECT * FROM recertification_audit_plan_attendance_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
//             if (err) console.log(err)
//             if (!recordset) 
//             {
//                 sql.end();
//                 res.send([]);
//                 return;
//             }
//             var resRecordSet = recordset.map((record, index) => {
//                 var newRecord = record;
//                 newRecord.timestamp = record['client_id'];
//                 newRecord.selected = false;
//                 newRecord.index = index;
//                 return newRecord;
//             });
//             var assignedTeams = await QueryAssignedRecertificationAuditTeam();
//             sql.end();
//             res.send({"data": resRecordSet, "teams": assignedTeams});
//         });
//     });
// });
app.post('/offline__fetch_stage2_task_list', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM stage2_audit_plan_task_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset['recordsets'][0].map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['client_id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            res.send(resRecordSet);
        });
    });
});
app.post('/aws_rds__fetch_stage2_task_list', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM stage2_audit_plan_task_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                sql.end();
                res.send([]);
                return;
            }
            const QueryABFilter = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.query(queryForFilter,  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            var resRecordSet = recordset.map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['client_id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            if (req.body['role'] == 'Accreditation Board')
            {
                var queryData = await QueryABFilter("SELECT filter_value FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Stage 2 Audit Plan Tasks' AND table_type = 'Logs'");
                queryData = JSON.parse(queryData[0]['filter_value']);
                //console.log(queryData)
                resRecordSet = resRecordSet.filter(ele => {
                    var isMatching = true;
                    for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                    {
                        //console.log(typeof(queryData[intIdx]['value']));
                        if (typeof(queryData[intIdx]['value']) != 'object')
                        {
                            if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                            {
                                isMatching = false;
                                break;
                            }
                        }
                        else
                        {
                            for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                            {
                                var isThisMatchingForOnce = false;
                                if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                {
                                    isThisMatchingForOnce = true;
                                    break;
                                }
                            }
                            if (!isThisMatchingForOnce) isMatching = false;
                        }
                    }
                    if (isMatching) return ele;
                    //if (ele)
                })
            }
            sql.end();
            res.send(resRecordSet);
        });
    });
});
app.post('/fetch_surveillance_audit_task_list', (req, res) => {
    //console.log(req.body['clientid'] );
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    //var userRef=db.ref("stage1_audit_plans/" + req.body['clientid'] + "/stage1PlanDescription");
    var userRef=db.ref("surveillance_audit_plans/" + req.body['clientid'] + "/taskList");
    userRef.on('value', (snapshot) => {
        //res.send(JSON.stringify(snapshot.val()));
        //res.send(snapshot.val());
        var keys = [];
        var index = 0;
        if (snapshot.numChildren() == 0) {
            res.send(keys);
        }
        snapshot.forEach(function(item) {
            var itemVal = item.val();
            itemVal.timestamp = Object.keys(snapshot.val())[index];
            itemVal.selected = false;
            itemVal.index = index;
            index++;
            keys.push(itemVal);
            if (index == snapshot.numChildren()) {
                //console.log(keys);
                res.send(keys);
            }
        });
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/offline__fetch_surveillance_audit_task_list', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM surveillance_audit_plan_task_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset['recordsets'][0].map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['client_id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            res.send(resRecordSet);
        });
    });
});
app.post('/aws_rds__fetch_surveillance_audit_task_list', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM surveillance_audit_plan_task_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                sql.end();
                res.send([]);
                return;
            }
            const QueryABFilter = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.query(queryForFilter,  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            var resRecordSet = recordset.map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['client_id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            if (req.body['role'] == 'Accreditation Board')
            {
                var queryData = await QueryABFilter("SELECT filter_value FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Surveillance Audit Plan Tasks' AND table_type = 'Logs'");
                queryData = JSON.parse(queryData[0]['filter_value']);
                //console.log(queryData)
                resRecordSet = resRecordSet.filter(ele => {
                    var isMatching = true;
                    for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                    {
                        //console.log(typeof(queryData[intIdx]['value']));
                        if (typeof(queryData[intIdx]['value']) != 'object')
                        {
                            if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                            {
                                isMatching = false;
                                break;
                            }
                        }
                        else
                        {
                            for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                            {
                                var isThisMatchingForOnce = false;
                                if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                {
                                    isThisMatchingForOnce = true;
                                    break;
                                }
                            }
                            if (!isThisMatchingForOnce) isMatching = false;
                        }
                    }
                    if (isMatching) return ele;
                    //if (ele)
                })
            }
            sql.end();
            res.send(resRecordSet);
        });
    });
});
app.post('/fetch_recertification_audit_task_list', (req, res) => {
    //console.log(req.body['clientid'] );
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    //var userRef=db.ref("stage1_audit_plans/" + req.body['clientid'] + "/stage1PlanDescription");
    var userRef=db.ref("recertification_audit_plans/" + req.body['clientid'] + "/taskList");
    userRef.on('value', (snapshot) => {
        //res.send(JSON.stringify(snapshot.val()));
        //res.send(snapshot.val());
        var keys = [];
        var index = 0;
        if (snapshot.numChildren() == 0) {
            res.send(keys);
        }
        snapshot.forEach(function(item) {
            var itemVal = item.val();
            itemVal.timestamp = Object.keys(snapshot.val())[index];
            itemVal.selected = false;
            itemVal.index = index;
            index++;
            keys.push(itemVal);
            if (index == snapshot.numChildren()) {
                //console.log(keys);
                res.send(keys);
            }
        });
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/offline__fetch_recertification_audit_task_list', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM recertification_audit_plan_task_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset['recordsets'][0].map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['client_id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            res.send(resRecordSet);
        });
    });
});
app.post('/aws_rds__fetch_recertification_audit_task_list', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM recertification_audit_plan_task_list WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err) console.log(err)
            const QueryABFilter = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.query(queryForFilter,  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            if (!recordset) 
            {
                sql.end();
                res.send([]);
                return;
            }
            var resRecordSet = recordset.map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['client_id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            if (req.body['role'] == 'Accreditation Board')
            {
                var queryData = await QueryABFilter("SELECT filter_value FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Recertification Audit Plan Tasks' AND table_type = 'Logs'");
                queryData = JSON.parse(queryData[0]['filter_value']);
                //console.log(queryData)
                resRecordSet = resRecordSet.filter(ele => {
                    var isMatching = true;
                    for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                    {
                        //console.log(typeof(queryData[intIdx]['value']));
                        if (typeof(queryData[intIdx]['value']) != 'object')
                        {
                            if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                            {
                                isMatching = false;
                                break;
                            }
                        }
                        else
                        {
                            for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                            {
                                var isThisMatchingForOnce = false;
                                if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                {
                                    isThisMatchingForOnce = true;
                                    break;
                                }
                            }
                            if (!isThisMatchingForOnce) isMatching = false;
                        }
                    }
                    if (isMatching) return ele;
                    //if (ele)
                })
            }
            sql.end();
            res.send(resRecordSet);
        });
    });
});
app.post('/fetch_stage2_task_list', (req, res) => {
    //console.log(req.body['clientid'] );
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    //var userRef=db.ref("stage1_audit_plans/" + req.body['clientid'] + "/stage1PlanDescription");
    var userRef=db.ref("stage2_audit_plans/" + req.body['clientid'] + "/taskList");
    userRef.on('value', (snapshot) => {
        //res.send(JSON.stringify(snapshot.val()));
        //res.send(snapshot.val());
        var keys = [];
        var index = 0;
        if (snapshot.numChildren() == 0) {
            res.send(keys);
        }
        snapshot.forEach(function(item) {
            var itemVal = item.val();
            itemVal.timestamp = Object.keys(snapshot.val())[index];
            itemVal.selected = false;
            itemVal.index = index;
            index++;
            keys.push(itemVal);
            if (index == snapshot.numChildren()) {
                //console.log(keys);
                res.send(keys);
            }
        });
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/fetch_stage1_audit_plan_v1', (req, res) => {
    //console.log(req.body['clientid'] );
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("stage1_audit_plans/" + req.body['clientid'] + "/stage1PlanDescription");
    userRef.on('value', (snapshot) => {
        //res.send(JSON.stringify(snapshot.val()));
        var keys = [];
        var index = 0;
        if (snapshot.numChildren() == 0) {
            res.send(keys);
        }
        snapshot.forEach(function(item) {
            var itemVal = item.val();
            itemVal.timestamp = Object.keys(snapshot.val())[index];
            itemVal.selected = false;
            itemVal.index = index;
            index++;
            keys.push(itemVal);
            if (index == snapshot.numChildren()) {
                //console.log(keys);
                res.send(keys);
            }
        });
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
// app.post('/fetch_stage2_audit_plan', (req, res) => {
//     //console.log(req.body['clientid'] );
//     var serviceAccount = require('./admin.json');
//     var client;
//     if (!admin.apps.length) {
//         client = admin.initializeApp({
//             credential: admin.credential.cert(serviceAccount),
//             databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
//             authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
//         });
//     }else {
//         client = admin.app(); // if already initialized, use that one
//         client.delete();
//         client = admin.initializeApp({
//             credential: admin.credential.cert(serviceAccount),
//             databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
//             authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
//         });
//     }
//     var db=admin.database();
//     var userRef=db.ref("stage2_audit_plans/" + req.body['clientid'] + "/stage2PlanDescription");
//     userRef.on('value', (snapshot) => {
//         res.send(JSON.stringify(snapshot.val()));
//         client.delete();
//       }, (errorObject) => {
//         console.log('The read failed: ' + errorObject.name);
//       }); 
// });
app.post('/fetch_stage2_audit_plan', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("stage2_audit_plans/" + req.body['clientid']);
    userRef.on('value', (snapshot) => {
        if (snapshot.val() != null) {
            var val = snapshot.val();
            var keys = [];
            if (val.logs) {
                Object.entries(val.logs).forEach(([key, value]) => {
                    keys.push({id: key, stage2PlanDescription: value.stage2PlanDescription, status: value.status, date: value.date});
                });
            }
            res.send({stage2PlanDescription: val.stage2PlanDescription, logs: keys});
        }
        else res.send({stage2PlanDescription: "", logs: []});
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/fetch_HOActivity', (req, res) => {
    //console.log(req.body['clientid'] );
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("ho_activities/" + req.body['clientid']);
    userRef.on('value', (snapshot) => {
        //res.send(JSON.stringify(snapshot.val()));
        //client.delete();
        //console.log(snapshot.val() );
        if (snapshot.val() != null) {
            var val = snapshot.val();
            var keys = [];
            if (val.logs) {
                Object.entries(val.logs).forEach(([key, value]) => {
                    keys.push({id: key, description: value.description, status: value.status, date: value.date});
                });
            }
            res.send({description: val.HOActivityDescription, logs: keys});
        }
        else res.send({description: "", logs: []});
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/offline__fetch_HOActivity', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        var query = "SELECT * FROM ho_activities WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        request.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;
            request.query("SELECT * FROM ho_activity_logs WHERE client_id = '" + req.body['clientid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "ho_activities"]);
                var lstImageFiles = stdout.split("\r\n");
                //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                var lstMainFiles = lstImageFiles.filter(ele => ele != "");
                var lstDirs = ['contract_review_form', 'checklist', 
                    'certificate_recommendation'];
                var lstAllFiles = [];
                for (var intIdx = 0; intIdx < lstDirs.length; intIdx++)
                {
                    const java = new JavaCaller({
                        classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                        mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFormFiles',// Main class to call, must be available from CLASSPATH,
                        rootPath: __dirname,
                    });
                    const { status, stdout, stderr } = await java.run(["ho_activities\\" + req.body['clientid'] + "\\" + lstDirs[intIdx]]);
                    var lstImageFiles = stdout.split("\r\n");
                    lstImageFiles = lstImageFiles.filter(ele => ele != "");
                    lstAllFiles.push({[lstDirs[intIdx]]: lstImageFiles});
                }
                if (resRecordSet['recordset'].length > 0)
                    res.send({"description": resRecordSet['recordset'][0]['HOActivityDescription'], "logs": iResRecordSet, "lstFiles": lstMainFiles, "otherFiles": lstAllFiles});
                else res.send({"description": "", "logs": iResRecordSet, "lstFiles": lstImageFiles, "otherFiles": lstAllFiles});
            });
        });
    });
});
app.post('/aws_rds__fetch_HOActivity', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        const QuerySQL = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query, (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        var resDataToDelete = await QuerySQL("SELECT * FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND category = 'HO Activity Logs'");
        resDataToDelete.forEach(async (ele) => {
            await QuerySQL("DELETE FROM ho_activity_logs WHERE user_id = '" + req.body['userid'] + "' AND id = '" + ele['client_id'] + "'");
        })
        await QuerySQL("UPDATE incomplete_file_upload_cleanup SET deleted_from_database_or_not = 'Yes' WHERE user_id = '" + req.body['userid'] + "' AND category = 'HO Activity Logs'");
        //var request = new sql.Request();
        var query = "SELECT * FROM ho_activities WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        sql.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;
            sql.query("SELECT * FROM ho_activity_logs WHERE client_id = '" + req.body['clientid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                var lstMainFiles = [];
                var lstAllFiles = [];
                var lstImageFiles = [];
                // const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "ho_activities"]);
                // lstImageFiles = stdout.split("\r\n");
                // //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                // var lstMainFiles = lstImageFiles.filter(ele => ele != "");
                // var lstDirs = ['contract_review_form', 'checklist', 
                //     'certificate_recommendation'];
                // for (var intIdx = 0; intIdx < lstDirs.length; intIdx++)
                // {
                //     const java = new JavaCaller({
                //         classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //         mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFormFiles',// Main class to call, must be available from CLASSPATH,
                //         rootPath: __dirname,
                //     });
                //     const { status, stdout, stderr } = await java.run(["ho_activities\\" + req.body['clientid'] + "\\" + lstDirs[intIdx]]);
                //     var lstImageFiles = stdout.split("\r\n");
                //     lstImageFiles = lstImageFiles.filter(ele => ele != "");
                //     lstAllFiles.push({[lstDirs[intIdx]]: lstImageFiles});
                // }
                const QueryABFilter = (queryForFilter) => {
                    return new Promise((resolve, reject)=>{
                        sql.query(queryForFilter,  (error, results)=>{
                            if(error){
                                return reject(error);
                            }
                            return resolve(results);
                        });
                    });
                };
                if (req.body['role'] == 'Accreditation Board')
                {
                    var queryData = await QueryABFilter("SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'HO Activities' AND table_type = 'Logs'");
                    var dateQueryData = JSON.parse(queryData[0]['date_filter_value']);
                    queryData = JSON.parse(queryData[0]['filter_value']);
                    var mToday = new Date();
                    var mdd = String(mToday.getDate()).padStart(2, '0');
                    var mmm = String(mToday.getMonth() + 1).padStart(2, '0'); //January is 0!
                    var myyyy = mToday.getFullYear();
                    mToday = myyyy + '-' + mmm + '-' + mdd;
                    if ((dateQueryData.fromDateLogs || dateQueryData.toDateLogs) && dateQueryData.filterDateLogs)
                    {
                        var fromDate = dateQueryData.fromDateLogs ? dateQueryData.fromDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                        var toDate = dateQueryData.toDateLogs ? dateQueryData.toDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                        iResRecordSet = iResRecordSet.filter(ele => {
                            var curDate = ele['date'].split("-")[2] + ele['date'].split("-")[1] + ele['date'].split("-")[0];
                            if (fromDate <= curDate && curDate <= toDate) {
                            return ele;
                            }
                        })
                    }
                    //console.log(queryData)
                    iResRecordSet = iResRecordSet.filter(ele => {
                        var isMatching = true;
                        for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                        {
                            //console.log(typeof(queryData[intIdx]['value']));
                            if (typeof(queryData[intIdx]['value']) != 'object')
                            {
                                if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                                {
                                    isMatching = false;
                                    break;
                                }
                            }
                            else
                            {
                                for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                                {
                                    var isThisMatchingForOnce = false;
                                    if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                    {
                                        isThisMatchingForOnce = true;
                                        break;
                                    }
                                }
                                if (!isThisMatchingForOnce) isMatching = false;
                            }
                        }
                        if (isMatching) return ele;
                        //if (ele)
                    })
                }
                sql.end();
                if (resRecordSet.length > 0)
                    res.send({"description": resRecordSet[0]['HOActivityDescription'], "logs": iResRecordSet, "lstFiles": lstMainFiles, "otherFiles": lstAllFiles});
                else res.send({"description": "", "logs": iResRecordSet, "lstFiles": lstImageFiles, "otherFiles": lstAllFiles});
            });
        });
    });
});
app.post('/fetch_initial_certification_conclusion', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("initial_certification_conclusion/" + req.body['clientid']);
    userRef.on('value', (snapshot) => {
        if (snapshot.val() != null) {
            var val = snapshot.val();
            var keys = [];
            if (val.logs) {
                Object.entries(val.logs).forEach(([key, value]) => {
                    keys.push({id: key, description: value.description, status: value.status, date: value.date});
                });
            }
            res.send({description: val.conclusionDescription, logs: keys});
        }
        else res.send({description: "", logs: []});
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/offline__fetch_initial_certification_conclusion', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        var query = "SELECT * FROM initial_certification_conclusion WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        request.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;

            request.query("SELECT * FROM initial_certification_conclusion_logs WHERE client_id = '" + req.body['clientid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "init_certification_conclusion"]);
                var lstImageFiles = stdout.split("\r\n");
                //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                lstImageFiles = lstImageFiles.filter(ele => ele != "");
                if (resRecordSet['recordset'].length > 0)
                    res.send({"description": resRecordSet['recordset'][0]['conclusionDescription'], "logs": iResRecordSet, "lstFiles": lstImageFiles});
                else res.send({"description": "", "logs": iResRecordSet, "lstFiles": lstImageFiles});
            });
        });
    });
});
app.post('/aws_rds__fetch_initial_certification_conclusion', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        const QuerySQL = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query, (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        var resDataToDelete = await QuerySQL("SELECT * FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND category = 'Initial Certification Conclusion Logs'");
        resDataToDelete.forEach(async (ele) => {
            await QuerySQL("DELETE FROM initial_certification_conclusion_logs WHERE user_id = '" + req.body['userid'] + "' AND id = '" + ele['client_id'] + "'");
        })
        await QuerySQL("UPDATE incomplete_file_upload_cleanup SET deleted_from_database_or_not = 'Yes' WHERE user_id = '" + req.body['userid'] + "' AND category = 'Initial Certification Conclusion Logs'");
        //var request = new sql.Request();
        var query = "SELECT * FROM initial_certification_conclusion WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        sql.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;

            sql.query("SELECT * FROM initial_certification_conclusion_logs WHERE client_id = '" + req.body['clientid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                var lstImageFiles = []
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "init_certification_conclusion"]);
                // lstImageFiles = stdout.split("\r\n");
                // //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                // lstImageFiles = lstImageFiles.filter(ele => ele != "");
                const QueryABFilter = (queryForFilter) => {
                    return new Promise((resolve, reject)=>{
                        sql.query(queryForFilter,  (error, results)=>{
                            if(error){
                                return reject(error);
                            }
                            return resolve(results);
                        });
                    });
                };
                if (req.body['role'] == 'Accreditation Board')
                {
                    var queryData = await QueryABFilter("SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Initial Certification Conclusion' AND table_type = 'Logs'");
                    var dateQueryData = JSON.parse(queryData[0]['date_filter_value']);
                    queryData = JSON.parse(queryData[0]['filter_value']);
                    //console.log(queryData)
                    var mToday = new Date();
                    var mdd = String(mToday.getDate()).padStart(2, '0');
                    var mmm = String(mToday.getMonth() + 1).padStart(2, '0'); //January is 0!
                    var myyyy = mToday.getFullYear();
                    mToday = myyyy + '-' + mmm + '-' + mdd;
                    if ((dateQueryData.fromDateLogs || dateQueryData.toDateLogs) && dateQueryData.filterDateLogs)
                    {
                        var fromDate = dateQueryData.fromDateLogs ? dateQueryData.fromDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                        var toDate = dateQueryData.toDateLogs ? dateQueryData.toDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                        iResRecordSet = iResRecordSet.filter(ele => {
                            var curDate = ele['date'].split("-")[2] + ele['date'].split("-")[1] + ele['date'].split("-")[0];
                            if (fromDate <= curDate && curDate <= toDate) {
                            return ele;
                            }
                        })
                    }
                    iResRecordSet = iResRecordSet.filter(ele => {
                        var isMatching = true;
                        for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                        {
                            //console.log(typeof(queryData[intIdx]['value']));
                            if (typeof(queryData[intIdx]['value']) != 'object')
                            {
                                if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                                {
                                    isMatching = false;
                                    break;
                                }
                            }
                            else
                            {
                                for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                                {
                                    var isThisMatchingForOnce = false;
                                    if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                    {
                                        isThisMatchingForOnce = true;
                                        break;
                                    }
                                }
                                if (!isThisMatchingForOnce) isMatching = false;
                            }
                        }
                        if (isMatching) return ele;
                        //if (ele)
                    })
                }
                sql.end();
                if (resRecordSet.length > 0)
                    res.send({"description": resRecordSet[0]['conclusionDescription'], "logs": iResRecordSet, "lstFiles": lstImageFiles});
                else res.send({"description": "", "logs": iResRecordSet, "lstFiles": lstImageFiles});
            });
        });
    });
});
app.post('/fetch_surveillance_audit_conclusion', (req, res) => {
    //console.log(req.body['clientid'] );
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("surveillance_audit_conclusion/" + req.body['clientid']);
    userRef.on('value', (snapshot) => {
        //res.send(JSON.stringify(snapshot.val()));
        //client.delete();
        //console.log(req.body['clientid']);
        if (snapshot.val() != null) {
            var val = snapshot.val();
            var keys = [];
            if (val.logs) {
                Object.entries(val.logs).forEach(([key, value]) => {
                    keys.push({id: key, description: value.description, status: value.status, date: value.date});
                });
            }
            //console.log({description: val.conclusionDescription, logs: keys});
            res.send({description: val.conclusionDescription, logs: keys});
        }
        else res.send({description: "", logs: []});
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/offline__fetch_surveillance_audit_conclusion', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        var query = "SELECT * FROM surveillance_audit_conclusion WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        request.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;

            request.query("SELECT * FROM surveillance_audit_conclusion_logs WHERE client_id = '" + req.body['clientid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "surveillance_audit_conclusion"]);
                var lstImageFiles = stdout.split("\r\n");
                //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                lstImageFiles = lstImageFiles.filter(ele => ele != "");
                if (resRecordSet['recordset'].length > 0)
                    res.send({"description": resRecordSet['recordset'][0]['conclusionDescription'], "logs": iResRecordSet, "lstFiles": lstImageFiles});
                else res.send({"description": "", "logs": iResRecordSet, "lstFiles": lstImageFiles});
            });
        });
    });
});
app.post('/aws_rds__fetch_surveillance_audit_conclusion', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        const QuerySQL = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query, (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        var resDataToDelete = await QuerySQL("SELECT * FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND category = 'Surveillance Audit Conclusion Logs'");
        resDataToDelete.forEach(async (ele) => {
            await QuerySQL("DELETE FROM surveillance_audit_conclusion_logs WHERE user_id = '" + req.body['userid'] + "' AND id = '" + ele['client_id'] + "'");
        })
        await QuerySQL("UPDATE incomplete_file_upload_cleanup SET deleted_from_database_or_not = 'Yes' WHERE user_id = '" + req.body['userid'] + "' AND category = 'Surveillance Audit Conclusion Logs'");
        //var request = new sql.Request();
        var query = "SELECT * FROM surveillance_audit_conclusion WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        sql.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;

            sql.query("SELECT * FROM surveillance_audit_conclusion_logs WHERE client_id = '" + req.body['clientid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                var lstImageFiles = [];
                const QueryABFilter = (queryForFilter) => {
                    return new Promise((resolve, reject)=>{
                        sql.query(queryForFilter,  (error, results)=>{
                            if(error){
                                return reject(error);
                            }
                            return resolve(results);
                        });
                    });
                };
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "surveillance_audit_conclusion"]);
                // lstImageFiles = stdout.split("\r\n");
                // //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                // lstImageFiles = lstImageFiles.filter(ele => ele != "");
                if (req.body['role'] == 'Accreditation Board')
                {
                    var queryData = await QueryABFilter("SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Surveillance Audit Conclusion' AND table_type = 'Logs'");
                    var dateQueryData = JSON.parse(queryData[0]['date_filter_value']);
                    queryData = JSON.parse(queryData[0]['filter_value']);
                    var mToday = new Date();
                    var mdd = String(mToday.getDate()).padStart(2, '0');
                    var mmm = String(mToday.getMonth() + 1).padStart(2, '0'); //January is 0!
                    var myyyy = mToday.getFullYear();
                    mToday = myyyy + '-' + mmm + '-' + mdd;
                    if ((dateQueryData.fromDateLogs || dateQueryData.toDateLogs) && dateQueryData.filterDateLogs)
                    {
                        var fromDate = dateQueryData.fromDateLogs ? dateQueryData.fromDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                        var toDate = dateQueryData.toDateLogs ? dateQueryData.toDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                        iResRecordSet = iResRecordSet.filter(ele => {
                            var curDate = ele['date'].split("-")[2] + ele['date'].split("-")[1] + ele['date'].split("-")[0];
                            if (fromDate <= curDate && curDate <= toDate) {
                            return ele;
                            }
                        })
                    }
                    //console.log(queryData)
                    iResRecordSet = iResRecordSet.filter(ele => {
                        var isMatching = true;
                        for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                        {
                            //console.log(typeof(queryData[intIdx]['value']));
                            if (typeof(queryData[intIdx]['value']) != 'object')
                            {
                                if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                                {
                                    isMatching = false;
                                    break;
                                }
                            }
                            else
                            {
                                for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                                {
                                    var isThisMatchingForOnce = false;
                                    if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                    {
                                        isThisMatchingForOnce = true;
                                        break;
                                    }
                                }
                                if (!isThisMatchingForOnce) isMatching = false;
                            }
                        }
                        if (isMatching) return ele;
                        //if (ele)
                    })
                }
                sql.end();
                if (resRecordSet.length > 0)
                    res.send({"description": resRecordSet[0]['conclusionDescription'], "logs": iResRecordSet, "lstFiles": lstImageFiles});
                else res.send({"description": "", "logs": iResRecordSet, "lstFiles": lstImageFiles});
            });
        });
    });
});
app.post('/fetch_recertification_audit_conclusion', (req, res) => {
    //console.log(req.body['clientid'] );
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("recertification_audit_conclusion/" + req.body['clientid']);
    userRef.on('value', (snapshot) => {
        //res.send(JSON.stringify(snapshot.val()));
        //client.delete();
        if (snapshot.val() != null) {
            var val = snapshot.val();
            var keys = [];
            if (val.logs) {
                Object.entries(val.logs).forEach(([key, value]) => {
                    keys.push({id: key, description: value.description, status: value.status, date: value.date});
                });
            }
            res.send({description: val.conclusionDescription, logs: keys});
        }
        else res.send({description: "", logs: []});
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/offline__fetch_recertification_audit_conclusion', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        var query = "SELECT * FROM recertification_audit_conclusion WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        request.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;

            request.query("SELECT * FROM recertification_audit_conclusion_logs WHERE client_id = '" + req.body['clientid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "recertification_audit_conclusion"]);
                var lstImageFiles = stdout.split("\r\n");
                //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                lstImageFiles = lstImageFiles.filter(ele => ele != "");
                if (resRecordSet['recordset'].length > 0)
                    res.send({"description": resRecordSet['recordset'][0]['conclusionDescription'], "logs": iResRecordSet, "lstFiles": lstImageFiles});
                else res.send({"description": "", "logs": iResRecordSet, "lstFiles": lstImageFiles});
            });
        });
    });
});
app.post('/aws_rds__fetch_recertification_audit_conclusion', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        const QuerySQL = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query, (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        var resDataToDelete = await QuerySQL("SELECT * FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND category = 'Recertification Audit Conclusion Logs'");
        resDataToDelete.forEach(async (ele) => {
            await QuerySQL("DELETE FROM recertification_audit_conclusion_logs WHERE user_id = '" + req.body['userid'] + "' AND id = '" + ele['client_id'] + "'");
        })
        await QuerySQL("UPDATE incomplete_file_upload_cleanup SET deleted_from_database_or_not = 'Yes' WHERE user_id = '" + req.body['userid'] + "' AND category = 'Recertification Audit Conclusion Logs'");
        //var request = new sql.Request();
        var query = "SELECT * FROM recertification_audit_conclusion WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        sql.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;

            sql.query("SELECT * FROM recertification_audit_conclusion_logs WHERE client_id = '" + req.body['clientid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                const QueryABFilter = (queryForFilter) => {
                    return new Promise((resolve, reject)=>{
                        sql.query(queryForFilter,  (error, results)=>{
                            if(error){
                                return reject(error);
                            }
                            return resolve(results);
                        });
                    });
                };
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                var lstImageFiles = [];
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "recertification_audit_conclusion"]);
                // lstImageFiles = stdout.split("\r\n");
                // //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                // lstImageFiles = lstImageFiles.filter(ele => ele != "");

                if (req.body['role'] == 'Accreditation Board')
                {
                    var queryData = await QueryABFilter("SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Recertification Audit Conclusion' AND table_type = 'Logs'");
                    var dateQueryData = JSON.parse(queryData[0]['date_filter_value']);
                    queryData = JSON.parse(queryData[0]['filter_value']);
                    var mToday = new Date();
                    var mdd = String(mToday.getDate()).padStart(2, '0');
                    var mmm = String(mToday.getMonth() + 1).padStart(2, '0'); //January is 0!
                    var myyyy = mToday.getFullYear();
                    mToday = myyyy + '-' + mmm + '-' + mdd;
                    if ((dateQueryData.fromDateLogs || dateQueryData.toDateLogs) && dateQueryData.filterDateLogs)
                    {
                        var fromDate = dateQueryData.fromDateLogs ? dateQueryData.fromDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                        var toDate = dateQueryData.toDateLogs ? dateQueryData.toDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                        iResRecordSet = iResRecordSet.filter(ele => {
                            var curDate = ele['date'].split("-")[2] + ele['date'].split("-")[1] + ele['date'].split("-")[0];
                            if (fromDate <= curDate && curDate <= toDate) {
                            return ele;
                            }
                        })
                    }
                    //console.log(queryData)
                    iResRecordSet = iResRecordSet.filter(ele => {
                        var isMatching = true;
                        for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                        {
                            //console.log(typeof(queryData[intIdx]['value']));
                            if (typeof(queryData[intIdx]['value']) != 'object')
                            {
                                if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                                {
                                    isMatching = false;
                                    break;
                                }
                            }
                            else
                            {
                                for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                                {
                                    var isThisMatchingForOnce = false;
                                    if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                    {
                                        isThisMatchingForOnce = true;
                                        break;
                                    }
                                }
                                if (!isThisMatchingForOnce) isMatching = false;
                            }
                        }
                        if (isMatching) return ele;
                        //if (ele)
                    })
                }
                sql.end();
                if (resRecordSet.length > 0)
                    res.send({"description": resRecordSet[0]['conclusionDescription'], "logs": iResRecordSet, "lstFiles": lstImageFiles});
                else res.send({"description": "", "logs": iResRecordSet, "lstFiles": lstImageFiles});
            });
        });
    });
});
app.post('/fetch_surveillance_audit', (req, res) => {
    //console.log(req.body['clientid'] );
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("surveillance_audit_clients/" + req.body['clientid']);
    userRef.on('value', (snapshot) => {
        //res.send(JSON.stringify(snapshot.val()));
        //client.delete();
        if (snapshot.val() != null) {
            var val = snapshot.val();
            var keys = [];
            if (val.logs) {
                Object.entries(val.logs).forEach(([key, value]) => {
                    keys.push({id: key, description: value.description, status: value.status, date: value.date});
                });
            }
            //console.log({description: val.description, logs: keys});
            res.send({description: val.description, logs: keys});
        }
        else res.send({description: "", logs: []});
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/offline__fetch_surveillance_audit', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        var query = "SELECT * FROM surveillance_audit_clients WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        request.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;

            request.query("SELECT * FROM surveillance_audit_client_logs WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "surveillance_audit_client_files"]);
                var lstImageFiles = stdout.split("\r\n");
                //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                lstImageFiles = lstImageFiles.filter(ele => ele != "");
                if (resRecordSet['recordset'].length > 0)
                    res.send({"description": resRecordSet['recordset'][0]['description'], "logs": iResRecordSet, "lstFiles": lstImageFiles});
                else res.send({"description": "", "logs": iResRecordSet, "lstFiles": lstImageFiles});
            });
        });
    });
});
app.post('/aws_rds__fetch_surveillance_audit', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        const QuerySQL = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query, (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        var resDataToDelete = await QuerySQL("SELECT * FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND category = 'Surveillance Audit Client Logs'");
        resDataToDelete.forEach(async (ele) => {
            await QuerySQL("DELETE FROM surveillance_audit_client_logs WHERE user_id = '" + req.body['userid'] + "' AND id = '" + ele['client_id'] + "'");
        })
        await QuerySQL("UPDATE incomplete_file_upload_cleanup SET deleted_from_database_or_not = 'Yes' WHERE user_id = '" + req.body['userid'] + "' AND category = 'Surveillance Audit Client Logs'");
        //var request = new sql.Request();
        var query = "SELECT * FROM surveillance_audit_clients WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        sql.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;

            sql.query("SELECT * FROM surveillance_audit_client_logs WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                var lstImageFiles = [];
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "surveillance_audit_client_files"]);
                // lstImageFiles = stdout.split("\r\n");
                // //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                // lstImageFiles = lstImageFiles.filter(ele => ele != "");
                const QueryABFilter = (queryForFilter) => {
                    return new Promise((resolve, reject)=>{
                        sql.query(queryForFilter,  (error, results)=>{
                            if(error){
                                return reject(error);
                            }
                            return resolve(results);
                        });
                    });
                };
                if (req.body['role'] == 'Accreditation Board')
                {
                    var queryData = await QueryABFilter("SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Surveillance Audit Application' AND table_type = 'Logs'");
                    var dateQueryData = JSON.parse(queryData[0]['date_filter_value']);
                    queryData = JSON.parse(queryData[0]['filter_value']);
                    var mToday = new Date();
                    var mdd = String(mToday.getDate()).padStart(2, '0');
                    var mmm = String(mToday.getMonth() + 1).padStart(2, '0'); //January is 0!
                    var myyyy = mToday.getFullYear();
                    mToday = myyyy + '-' + mmm + '-' + mdd;
                    if ((dateQueryData.fromDateLogs || dateQueryData.toDateLogs) && dateQueryData.filterDateLogs)
                    {
                        var fromDate = dateQueryData.fromDateLogs ? dateQueryData.fromDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                        var toDate = dateQueryData.toDateLogs ? dateQueryData.toDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                        iResRecordSet = iResRecordSet.filter(ele => {
                            var curDate = ele['date'].split("-")[2] + ele['date'].split("-")[1] + ele['date'].split("-")[0];
                            if (fromDate <= curDate && curDate <= toDate) {
                            return ele;
                            }
                        })
                    }
                    //console.log(queryData)
                    iResRecordSet = iResRecordSet.filter(ele => {
                        var isMatching = true;
                        for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                        {
                            //console.log(typeof(queryData[intIdx]['value']));
                            if (typeof(queryData[intIdx]['value']) != 'object')
                            {
                                if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                                {
                                    isMatching = false;
                                    break;
                                }
                            }
                            else
                            {
                                for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                                {
                                    var isThisMatchingForOnce = false;
                                    if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                    {
                                        isThisMatchingForOnce = true;
                                        break;
                                    }
                                }
                                if (!isThisMatchingForOnce) isMatching = false;
                            }
                        }
                        if (isMatching) return ele;
                        //if (ele)
                    })
                }
                sql.end();
                if (resRecordSet.length > 0)
                    res.send({"description": resRecordSet[0]['description'], "logs": iResRecordSet, "lstFiles": lstImageFiles});
                else res.send({"description": "", "logs": iResRecordSet, "lstFiles": lstImageFiles});
            });
        });
    });
});
app.post('/fetch_recertification_audit', (req, res) => {
    //console.log(req.body['clientid'] );
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    //var userRef=db.ref("surveillance_audit_clients/" + req.body['clientid'] + "/recertification_description");
    var userRef=db.ref("recertification_audit_clients/" + req.body['clientid']);
    userRef.on('value', (snapshot) => {
        //res.send(JSON.stringify(snapshot.val()));
        //client.delete();
        if (snapshot.val() != null) {
            var val = snapshot.val();
            var keys = [];
            if (val.logs) {
                Object.entries(val.logs).forEach(([key, value]) => {
                    keys.push({id: key, description: value.description, status: value.status, date: value.date});
                });
            }
            res.send({description: val.description, logs: keys});
        }
        else res.send({description: "", logs: []});
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/offline__fetch_recertification_audit', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        var query = "SELECT * FROM recertification_audit_clients WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        request.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;

            request.query("SELECT * FROM recertification_audit_client_logs WHERE client_id = '" + req.body['clientid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "recertification_audit_client_files"]);
                var lstImageFiles = stdout.split("\r\n");
                //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                lstImageFiles = lstImageFiles.filter(ele => ele != "");
                if (resRecordSet['recordset'].length > 0)
                    res.send({"description": resRecordSet['recordset'][0]['description'], "logs": iResRecordSet, "lstFiles": lstImageFiles});
                else res.send({"description": "", "logs": iResRecordSet, "lstFiles": lstImageFiles});
            });
        });
    });
});
app.post('/aws_rds__fetch_recertification_audit', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        const QuerySQL = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query, (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        var resDataToDelete = await QuerySQL("SELECT * FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND category = 'Recertification Audit Client Logs'");
        resDataToDelete.forEach(async (ele) => {
            await QuerySQL("DELETE FROM recertification_audit_client_logs WHERE user_id = '" + req.body['userid'] + "' AND id = '" + ele['client_id'] + "'");
        })
        await QuerySQL("UPDATE incomplete_file_upload_cleanup SET deleted_from_database_or_not = 'Yes' WHERE user_id = '" + req.body['userid'] + "' AND category = 'Recertification Audit Client Logs'");
        var query = "SELECT * FROM recertification_audit_clients WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        sql.query(query, async function (err, recordset) {
            if (err) console.log(err)
            const QueryABFilter = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.query(queryForFilter,  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;

            sql.query("SELECT * FROM recertification_audit_client_logs WHERE client_id = '" + req.body['clientid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                var lstImageFiles = [];
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "recertification_audit_client_files"]);
                // lstImageFiles = stdout.split("\r\n");
                // //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                // lstImageFiles = lstImageFiles.filter(ele => ele != "");
                if (req.body['role'] == 'Accreditation Board')
                {
                    var queryData = await QueryABFilter("SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Recertification Audit Application' AND table_type = 'Logs'");
                    var dateQueryData = JSON.parse(queryData[0]['date_filter_value']);
                    queryData = JSON.parse(queryData[0]['filter_value']);
                    var mToday = new Date();
                    var mdd = String(mToday.getDate()).padStart(2, '0');
                    var mmm = String(mToday.getMonth() + 1).padStart(2, '0'); //January is 0!
                    var myyyy = mToday.getFullYear();
                    mToday = myyyy + '-' + mmm + '-' + mdd;
                    if ((dateQueryData.fromDateLogs || dateQueryData.toDateLogs) && dateQueryData.filterDateLogs)
                    {
                        var fromDate = dateQueryData.fromDateLogs ? dateQueryData.fromDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                        var toDate = dateQueryData.toDateLogs ? dateQueryData.toDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                        iResRecordSet = iResRecordSet.filter(ele => {
                            var curDate = ele['date'].split("-")[2] + ele['date'].split("-")[1] + ele['date'].split("-")[0];
                            if (fromDate <= curDate && curDate <= toDate) {
                            return ele;
                            }
                        })
                    }
                    //console.log(queryData)
                    iResRecordSet = iResRecordSet.filter(ele => {
                        var isMatching = true;
                        for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                        {
                            //console.log(typeof(queryData[intIdx]['value']));
                            if (typeof(queryData[intIdx]['value']) != 'object')
                            {
                                if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                                {
                                    isMatching = false;
                                    break;
                                }
                            }
                            else
                            {
                                for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                                {
                                    var isThisMatchingForOnce = false;
                                    if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                    {
                                        isThisMatchingForOnce = true;
                                        break;
                                    }
                                }
                                if (!isThisMatchingForOnce) isMatching = false;
                            }
                        }
                        if (isMatching) return ele;
                        //if (ele)
                    })
                }
                sql.end();
                if (resRecordSet.length > 0)
                    res.send({"description": resRecordSet[0]['description'], "logs": iResRecordSet, "lstFiles": lstImageFiles});
                else res.send({"description": "", "logs": iResRecordSet, "lstFiles": lstImageFiles});
            });
        });
    });
});
app.post('/fetch_quotations', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("quotations/" + req.body['clientid']);
    userRef.on('value', (snapshot) => {
        if (snapshot.val() != null) {
            var val = snapshot.val();
            var keys = [];
            if (val.logs) {
                Object.entries(val.logs).forEach(([key, value]) => {
                    keys.push({id: key, description: value.description, status: value.status, date: value.date});
                });
            }
            res.send({description: val.quotation_description, logs: keys});
        }
        else res.send({description: "", logs: []});
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/offline__fetch_quotations', async (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        var query = "SELECT * FROM quotations WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        request.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;

            request.query("SELECT * FROM quotation_logs WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "quotations"]);
                var lstImageFiles = stdout.split("\r\n");
                //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                lstImageFiles = lstImageFiles.filter(ele => ele != "");
                if (resRecordSet['recordset'].length > 0)
                    res.send({"description": resRecordSet['recordset'][0]['quotation_description'], "logs": iResRecordSet, "lstFiles": lstImageFiles});
                else res.send({"description": "", "logs": iResRecordSet, "lstFiles": lstImageFiles});
            });
            // const { JavaCaller } = require("java-caller");
            // const java = new JavaCaller({
            //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
            //     mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
            //     rootPath: __dirname,
            // });
            // const { status, stdout, stderr } = await java.run([req.body['timestamp'] + "", "quotations"]);
            // var lstImageFiles = stdout.split("\r\n");
            // lstImageFiles = lstImageFiles.filter(ele => ele != "");
            // res.send({"logs": resRecordSet, "lstFiles": lstImageFiles});
        });
    });
});
app.post('/aws_rds__fetch_quotations', async (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        const QueryABFilter = () => {
            return new Promise((resolve, reject)=>{
                sql.query("SELECT filter_value FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Existing Applications' AND table_type = 'Logs'",  (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        const QuerySQL = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query, (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        var resDataToDelete = await QuerySQL("SELECT * FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND category = 'Quotation and Order Confirmation Logs'");
        resDataToDelete.forEach(async (ele) => {
            await QuerySQL("DELETE FROM quotation_logs WHERE user_id = '" + req.body['userid'] + "' AND id = '" + ele['client_id'] + "'");
        })
        await QuerySQL("UPDATE incomplete_file_upload_cleanup SET deleted_from_database_or_not = 'Yes' WHERE user_id = '" + req.body['userid'] + "' AND category = 'Quotation and Order Confirmation Logs'");
        //var request = new sql.Request();
        var query = "SELECT * FROM quotations WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'";
        sql.query(query, async function (err, recordset) {
            if (err) console.log(err)
            const QueryABFilter = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.query(queryForFilter,  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            if (!recordset) 
            {
                //res.send([]);
                //return;
                recordset = [];
            }
            var resRecordSet = recordset;

            sql.query("SELECT * FROM quotation_logs WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                if (iErr) console.log(iErr)
                if (!iRecordset) 
                {
                    //res.send([]);
                    //return;
                    iRecordset = [];
                }
                var iResRecordSet = iRecordset;
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // const { status, stdout, stderr } = await java.run([req.body['clientid'] + "", "quotations"]);
                // var lstImageFiles = stdout.split("\r\n");
                //console.log("resRecordSet['recordset'][0]['quotation_description'], ", resRecordSet['recordset'][0]['quotation_description']);
                lstImageFiles = [];
                if (req.body['role'] == 'Accreditation Board')
                {
                var queryData = await QueryABFilter("SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Quotation & Order Confirmation' AND table_type = 'Logs'")
                var dateQueryData = JSON.parse(queryData[0]['date_filter_value']);
                queryData = JSON.parse(queryData[0]['filter_value']);

                var mToday = new Date();
                var mdd = String(mToday.getDate()).padStart(2, '0');
                var mmm = String(mToday.getMonth() + 1).padStart(2, '0'); //January is 0!
                var myyyy = mToday.getFullYear();
                mToday = myyyy + '-' + mmm + '-' + mdd;
                if ((dateQueryData.fromDateLogs || dateQueryData.toDateLogs) && dateQueryData.filterDateLogs)
                {
                    var fromDate = dateQueryData.fromDateLogs ? dateQueryData.fromDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                    var toDate = dateQueryData.toDateLogs ? dateQueryData.toDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                    iResRecordSet = iResRecordSet.filter(ele => {
                        var curDate = ele['date'].split("-")[2] + ele['date'].split("-")[1] + ele['date'].split("-")[0];
                        if (fromDate <= curDate && curDate <= toDate) {
                        return ele;
                        }
                    })
                }

                iResRecordSet = iResRecordSet.filter(ele => {
                    var isMatching = true;
                    for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                    {
                        //console.log(typeof(queryData[intIdx]['value']));
                        if (typeof(queryData[intIdx]['value']) != 'object')
                        {
                            if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                            {
                                isMatching = false;
                                break;
                            }
                        }
                        else
                        {
                            for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                            {
                                var isThisMatchingForOnce = false;
                                if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                {
                                    isThisMatchingForOnce = true;
                                    break;
                                }
                            }
                            if (!isThisMatchingForOnce) isMatching = false;
                        }
                    }
                    if (isMatching) return ele;
                    //if (ele)
                })
                }
                //lstImageFiles = lstImageFiles.filter(ele => ele != "");
                sql.end();
                if (resRecordSet.length > 0)
                    res.send({"description": resRecordSet[0]['quotation_description'], "logs": iResRecordSet, "lstFiles": lstImageFiles});
                else res.send({"description": "", "logs": iResRecordSet, "lstFiles": lstImageFiles});
            });
            // const { JavaCaller } = require("java-caller");
            // const java = new JavaCaller({
            //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
            //     mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
            //     rootPath: __dirname,
            // });
            // const { status, stdout, stderr } = await java.run([req.body['timestamp'] + "", "quotations"]);
            // var lstImageFiles = stdout.split("\r\n");
            // lstImageFiles = lstImageFiles.filter(ele => ele != "");
            // res.send({"logs": resRecordSet, "lstFiles": lstImageFiles});
        });
    });
});
app.post('/fetch_assigned_stage2_audit_team_members', (req, res) => {
    //console.log(req.body['clientid'] );
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("assigned_stage2_audit_teams/" + req.body['clientid'] + "/stage2_audit_teams");
    userRef.on('value', (snapshot) => {
        res.send(JSON.stringify(snapshot.val()));
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      });
});
app.get('/fetch_stage2_audit_team_members', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("stage2_audit_teams");
    userRef.on('value', (snapshot) => {
        res.send(JSON.stringify(snapshot.val()));
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/fetchcustomerapplicationfiles', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/init_certification_client_application/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    if (list[intIdx].name != 'logs' && list[intIdx].name != 'forms')
                        fileNames.push(list[intIdx].name);
                }
            }
            res.send({"fileNames" : fileNames});
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/aws_rds__fetchcustomerapplicationfiles', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        const QueryABFilter = () => {
            return new Promise((resolve, reject)=>{
                sql.query("SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Existing Applications' AND table_type = 'Logs'",  (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        const QuerySQL = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query, (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        var resDataToDelete = await QuerySQL("SELECT * FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND category = 'Incoming Initial Certification Logs'");
        resDataToDelete.forEach(async (ele) => {
            await QuerySQL("DELETE FROM initial_certification_logs WHERE user_id = '" + req.body['userid'] + "' AND id = '" + ele['client_id'] + "'");
        })
        await QuerySQL("UPDATE incomplete_file_upload_cleanup SET deleted_from_database_or_not = 'Yes' WHERE user_id = '" + req.body['userid'] + "' AND category = 'Incoming Initial Certification Logs'");
        //var request = new sql.Request();
        var query = "SELECT * FROM initial_certification_logs WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'";
        sql.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                sql.end();
                res.send([]);
                return;
            }
            var resRecordSet = recordset;
            // const { JavaCaller } = require("java-caller");
            // const java = new JavaCaller({
            //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
            //     mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
            //     rootPath: __dirname,
            // });
            // const { status, stdout, stderr } = await java.run([req.body['timestamp'] + "", "init_certification_files"]);
            // var lstImageFiles = stdout.split("\r\n");
            // lstImageFiles = lstImageFiles.filter(ele => ele != "");
            // res.send({"logs": resRecordSet, "lstFiles": lstImageFiles});

            const ftpClient = new Ftp();
            ftpClient.on( 'ready', function() {
                ftpClient.list("domains/cwac.in/public_html/init_certification_client_application/" + req.body.timestamp, false, async function( err, list ) {
                    if ( err ) throw err;
                    var fileNames = [];
                    for (var intIdx = 0; intIdx < list.length; intIdx++)
                    {
                        if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                        {
                            if (list[intIdx].name != 'logs' && list[intIdx].name != 'forms')
                                fileNames.push(list[intIdx].name);
                        }
                    }
                    if (req.body['role'] == 'Accreditation Board')
                    {
                        var queryData = await QueryABFilter();
                        var dateQueryData = JSON.parse(queryData[0]['date_filter_value']);
                        queryData = JSON.parse(queryData[0]['filter_value']);

                        var mToday = new Date();
                        var mdd = String(mToday.getDate()).padStart(2, '0');
                        var mmm = String(mToday.getMonth() + 1).padStart(2, '0'); //January is 0!
                        var myyyy = mToday.getFullYear();
                        mToday = myyyy + '-' + mmm + '-' + mdd;
                        if ((dateQueryData.fromDateLogs || dateQueryData.toDateLogs) && dateQueryData.filterDateLogs)
                        {
                            var fromDate = dateQueryData.fromDateLogs ? dateQueryData.fromDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                            var toDate = dateQueryData.toDateLogs ? dateQueryData.toDateLogs : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                            resRecordSet = resRecordSet.filter(ele => {
                                var curDate = ele['date'].split("-")[2] + ele['date'].split("-")[1] + ele['date'].split("-")[0];
                                if (fromDate <= curDate && curDate <= toDate) {
                                return ele;
                                }
                            })
                        }
                        //console.log(queryData)
                        resRecordSet = resRecordSet.filter(ele => {
                            var isMatching = true;
                            for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                            {
                                if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                                {
                                    isMatching = false;
                                    break;
                                }
                            }
                            if (isMatching) return ele;
                            //if (ele)
                        })
                    }
                    sql.end();
                    res.send({"logs": resRecordSet, "fileNames" : fileNames});
                    ftpClient.end();
                });
            });
            ftpClient.connect( {
                'host': 'ftp.cwac.in',
                'user': 'cwacin',
                'password': '$Rv01111996'
            } );
        });
    });
});
app.post('/offline__fetchcustomerapplicationfiles', async (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        var query = "SELECT * FROM initial_certification_logs WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'";
        request.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset;
            const { JavaCaller } = require("java-caller");
            const java = new JavaCaller({
                classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
                rootPath: __dirname,
            });
            const { status, stdout, stderr } = await java.run([req.body['timestamp'] + "", "init_certification_files"]);
            var lstImageFiles = stdout.split("\r\n");
            lstImageFiles = lstImageFiles.filter(ele => ele != "");
            res.send({"logs": resRecordSet, "lstFiles": lstImageFiles});
        });
    });
});
app.post('/offline__fetch_initial_certification_log_files', async (req, res) => {
    const { JavaCaller } = require("java-caller");
    const java = new JavaCaller({
        classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
        mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
        rootPath: __dirname,
    });
    const { status, stdout, stderr } = await java.run([req.body['timestamp'] + "", "init_certification_files\\" + req.body['clientid'] + "\\logs"]);
    var lstImageFiles = stdout.split("\r\n");
    lstImageFiles = lstImageFiles.filter(ele => ele != "");
    console.log("lstImageFiles, ", lstImageFiles);
    res.send(lstImageFiles);
});
app.post('/fetch_stage1_audit_plan_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/stage1_audit_plan/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    if (list[intIdx].name != 'attendance_sheet' && 
                        list[intIdx].name != 'audit_report' && 
                        list[intIdx].name != 'auditor_appointment_form' && 
                        list[intIdx].name != 'confidentiality_statement' && 
                        list[intIdx].name != 'document_review_report' && 
                        list[intIdx].name != 'nc_report' && 
                        list[intIdx].name != 'logs' && 
                        list[intIdx].name != 'forms' &&
                        list[intIdx].name != 'surveillance_audit_report')
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/fetch_stage1_audit_plan_log_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/stage1_audit_plan/" + req.body.clientid + "/logs/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/offline__fetch_stage1_audit_plan_log_files', async (req, res) => {
    const { JavaCaller } = require("java-caller");
    const java = new JavaCaller({
        classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
        mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
        rootPath: __dirname,
    });
    const { status, stdout, stderr } = await java.run([req.body['timestamp'] + "", "stage1_audit_plans\\" + req.body['clientid'] + "\\logs"]);
    var lstImageFiles = stdout.split("\r\n");
    lstImageFiles = lstImageFiles.filter(ele => ele != "");
    console.log("lstImageFiles, ", lstImageFiles);
    res.send(lstImageFiles);
});
app.post('/offline__fetch_stage2_audit_plan_log_files', async (req, res) => {
    const { JavaCaller } = require("java-caller");
    const java = new JavaCaller({
        classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
        mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
        rootPath: __dirname,
    });
    const { status, stdout, stderr } = await java.run([req.body['timestamp'] + "", "stage2_audit_plans\\" + req.body['clientid'] + "\\logs"]);
    var lstImageFiles = stdout.split("\r\n");
    lstImageFiles = lstImageFiles.filter(ele => ele != "");
    console.log("lstImageFiles, ", lstImageFiles);
    res.send(lstImageFiles);
});
app.post('/fetch_initial_certification_log_files', (req, res) => {
    const ftpClient = new Ftp();
    //console.log(req.body.clientid);
    //console.log(req.body.timestamp);
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/init_certification_client_application/" + req.body.clientid + "/logs/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/fetch_stage2_audit_plan_log_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/stage2_audit_plan/" + req.body.clientid + "/logs/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/fetch_surveillance_audit_plan_log_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/surveillance_audit_plans/" + req.body.clientid + "/logs/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/offline__fetch_surveillance_audit_plan_log_files', async (req, res) => {
    const { JavaCaller } = require("java-caller");
    const java = new JavaCaller({
        classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
        mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
        rootPath: __dirname,
    });
    const { status, stdout, stderr } = await java.run([req.body['timestamp'] + "", "surveillance_audit_plans\\" + req.body['clientid'] + "\\logs"]);
    var lstImageFiles = stdout.split("\r\n");
    lstImageFiles = lstImageFiles.filter(ele => ele != "");
    console.log("lstImageFiles, ", lstImageFiles);
    res.send(lstImageFiles);
});
app.post('/fetch_recertification_audit_plan_log_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/recertification_audit_plans/" + req.body.clientid + "/logs/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/offline__fetch_recertification_audit_plan_log_files', async (req, res) => {
    const { JavaCaller } = require("java-caller");
    const java = new JavaCaller({
        classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
        mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
        rootPath: __dirname,
    });
    const { status, stdout, stderr } = await java.run([req.body['timestamp'] + "", "recertification_audit_plans\\" + req.body['clientid'] + "\\logs"]);
    var lstImageFiles = stdout.split("\r\n");
    lstImageFiles = lstImageFiles.filter(ele => ele != "");
    console.log("lstImageFiles, ", lstImageFiles);
    res.send(lstImageFiles);
});
app.post('/fetch_quotation_log_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/quotation_files/" + req.body.clientid + "/logs/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/offline__fetch_quotation_log_files', async (req, res) => {
    const { JavaCaller } = require("java-caller");
    const java = new JavaCaller({
        classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
        mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
        rootPath: __dirname,
    });
    const { status, stdout, stderr } = await java.run([req.body['timestamp'] + "", "quotations\\" + req.body['clientid'] + "\\logs"]);
    var lstImageFiles = stdout.split("\r\n");
    lstImageFiles = lstImageFiles.filter(ele => ele != "");
    console.log("lstImageFiles, ", lstImageFiles);
    res.send(lstImageFiles);
});
app.post('/fetch_ho_activity_log_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/HOActivity_files/" + req.body.clientid + "/logs/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/offline__fetch_ho_activity_log_files', async (req, res) => {
    const { JavaCaller } = require("java-caller");
    const java = new JavaCaller({
        classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
        mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
        rootPath: __dirname,
    });
    const { status, stdout, stderr } = await java.run([req.body['timestamp'] + "", "ho_activities\\" + req.body['clientid'] + "\\logs"]);
    var lstImageFiles = stdout.split("\r\n");
    lstImageFiles = lstImageFiles.filter(ele => ele != "");
    //console.log("lstImageFiles, ", lstImageFiles);
    res.send(lstImageFiles);
});
app.post('/fetch_initial_certification_conclusion_log_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/initial_certification_conclusion_files/" + req.body.clientid + "/logs/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/offline__fetch_initial_certification_conclusion_log_files', async (req, res) => {
    const { JavaCaller } = require("java-caller");
    const java = new JavaCaller({
        classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
        mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
        rootPath: __dirname,
    });
    const { status, stdout, stderr } = await java.run([req.body['timestamp'] + "", "init_certification_conclusion\\" + req.body['clientid'] + "\\logs"]);
    var lstImageFiles = stdout.split("\r\n");
    lstImageFiles = lstImageFiles.filter(ele => ele != "");
    console.log("lstImageFiles, ", lstImageFiles);
    res.send(lstImageFiles);
});
app.post('/fetch_surveillance_audit_conclusion_log_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/surveillance_audit_conclusion_files/" + req.body.clientid + "/logs/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/offline__fetch_surveillance_audit_conclusion_log_files', async (req, res) => {
    const { JavaCaller } = require("java-caller");
    const java = new JavaCaller({
        classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
        mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
        rootPath: __dirname,
    });
    const { status, stdout, stderr } = await java.run([req.body['timestamp'] + "", "surveillance_audit_conclusion\\" + req.body['clientid'] + "\\logs"]);
    var lstImageFiles = stdout.split("\r\n");
    lstImageFiles = lstImageFiles.filter(ele => ele != "");
    console.log("lstImageFiles, ", lstImageFiles);
    res.send(lstImageFiles);
});
app.post('/fetch_recertification_audit_conclusion_log_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/recertification_audit_conclusion_files/" + req.body.clientid + "/logs/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/offline__fetch_recertification_audit_conclusion_log_files', async (req, res) => {
    const { JavaCaller } = require("java-caller");
    const java = new JavaCaller({
        classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
        mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
        rootPath: __dirname,
    });
    const { status, stdout, stderr } = await java.run([req.body['timestamp'] + "", "recertification_audit_conclusion\\" + req.body['clientid'] + "\\logs"]);
    var lstImageFiles = stdout.split("\r\n");
    lstImageFiles = lstImageFiles.filter(ele => ele != "");
    console.log("lstImageFiles, ", lstImageFiles);
    res.send(lstImageFiles);
});
app.post('/fetch_surveillance_audit_log_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/surveillance_audit_files/" + req.body.clientid + "/logs/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/offline__fetch_surveillance_audit_log_files', async (req, res) => {
    const { JavaCaller } = require("java-caller");
    const java = new JavaCaller({
        classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
        mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
        rootPath: __dirname,
    });
    const { status, stdout, stderr } = await java.run([req.body['timestamp'] + "", "surveillance_audit_client_files\\" + req.body['clientid'] + "\\logs"]);
    var lstImageFiles = stdout.split("\r\n");
    lstImageFiles = lstImageFiles.filter(ele => ele != "");
    console.log("lstImageFiles, ", lstImageFiles);
    res.send(lstImageFiles)
});
app.post('/fetch_recertification_audit_log_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/recertification_audit_files/" + req.body.clientid + "/logs/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/offline__fetch_recertification_audit_log_files', async (req, res) => {
    const { JavaCaller } = require("java-caller");
    const java = new JavaCaller({
        classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
        mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFiles',// Main class to call, must be available from CLASSPATH,
        rootPath: __dirname,
    });
    const { status, stdout, stderr } = await java.run([req.body['timestamp'] + "", "recertification_audit_client_files\\" + req.body['clientid'] + "\\logs"]);
    var lstImageFiles = stdout.split("\r\n");
    lstImageFiles = lstImageFiles.filter(ele => ele != "");
    console.log("lstImageFiles, ", lstImageFiles);
    res.send(lstImageFiles)
});
app.post('/fetch_surveillance_audit_plan_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/surveillance_audit_plans/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..' && list[intIdx].name !== 'logs' && list[intIdx].name != 'forms')
                {
                    // if (list[intIdx].name != 'attendance_sheet' && 
                    //     list[intIdx].name != 'audit_report' && 
                    //     list[intIdx].name != 'auditor_appointment_form' && 
                    //     list[intIdx].name != 'confidentiality_statement' && 
                    //     list[intIdx].name != 'document_review_report' && 
                    //     list[intIdx].name != 'nc_report' && 
                    //     list[intIdx].name != 'surveillance_audit_report')
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/fetch_recertification_audit_plan_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/recertification_audit_plans/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..' && list[intIdx].name !== 'logs' && list[intIdx].name != 'forms')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/fetch_stage1_audit_plan_form_files', async (req, res) => {
    const ftpClient = new Ftp();
    await ftpClient.connect({
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
    var allFileNames = [];
    await ftpClient.on( 'ready', async function() {
        await ftpClient.list("domains/cwac.in/public_html/stage1_audit_plan/" + req.body.timestamp + "/auditor_appointment_form", false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            allFileNames.push({'auditor_appointment_form': fileNames})
        });
        await ftpClient.list("domains/cwac.in/public_html/stage1_audit_plan/" + req.body.timestamp + "/confidentiality_statement", false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            allFileNames.push({'confidentiality_statement': fileNames})
        });
        await ftpClient.list("domains/cwac.in/public_html/stage1_audit_plan/" + req.body.timestamp + "/document_review_report", false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            allFileNames.push({'document_review_report': fileNames})
        });
        await ftpClient.list("domains/cwac.in/public_html/stage1_audit_plan/" + req.body.timestamp + "/attendance_sheet", false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            allFileNames.push({'attendance_sheet': fileNames})
        });
        await ftpClient.list("domains/cwac.in/public_html/stage1_audit_plan/" + req.body.timestamp + "/audit_report", false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            allFileNames.push({'audit_report': fileNames})
        });
        await ftpClient.list("domains/cwac.in/public_html/stage1_audit_plan/" + req.body.timestamp + "/surveillance_audit_report", false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            allFileNames.push({'surveillance_audit_report': fileNames})
        });
        await ftpClient.list("domains/cwac.in/public_html/stage1_audit_plan/" + req.body.timestamp + "/nc_report", false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            allFileNames.push({'nc_report': fileNames})
            //console.log(allFileNames);
            res.send(allFileNames);
            ftpClient.end();
        });
    });
});
app.post('/offline__fetch_stage1_audit_plan_form_files', async (req, res) => {
    const { JavaCaller } = require("java-caller");
    var lstDirs = ['auditor_appointment_form', 'confidentiality_statement', 
        'document_review_report', 'attendance_sheet', 'audit_report',
        'surveillance_audit_report', 'nc_report'];
    var lstAllFiles = [];
    for (var intIdx = 0; intIdx < lstDirs.length; intIdx++)
    {
        const java = new JavaCaller({
            classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
            mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFormFiles',// Main class to call, must be available from CLASSPATH,
            rootPath: __dirname,
        });
        const { status, stdout, stderr } = await java.run(["stage1_audit_plans\\" + req.body['clientid'] + "\\" + lstDirs[intIdx]]);
        var lstImageFiles = stdout.split("\r\n");
        lstImageFiles = lstImageFiles.filter(ele => ele != "");
        lstAllFiles.push({[lstDirs[intIdx]]: lstImageFiles});
    }
    //console.log("lstAllFiles, ", lstAllFiles);
    res.send(lstAllFiles);
});
app.post('/offline__fetch_stage2_audit_plan_form_files', async (req, res) => {
    const { JavaCaller } = require("java-caller");
    var lstDirs = ['auditor_appointment_form', 'confidentiality_statement', 
        'document_review_report', 'attendance_sheet', 'audit_report',
        'surveillance_audit_report', 'nc_report'];
    var lstAllFiles = [];
    for (var intIdx = 0; intIdx < lstDirs.length; intIdx++)
    {
        const java = new JavaCaller({
            classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
            mainClass: 'nodejsofflinefileuploadproject.FetchAuditSoftwareFormFiles',// Main class to call, must be available from CLASSPATH,
            rootPath: __dirname,
        });
        const { status, stdout, stderr } = await java.run(["stage2_audit_plans\\" + req.body['clientid'] + "\\" + lstDirs[intIdx]]);
        var lstImageFiles = stdout.split("\r\n");
        lstImageFiles = lstImageFiles.filter(ele => ele != "");
        lstAllFiles.push({[lstDirs[intIdx]]: lstImageFiles});
    }
    //console.log("lstAllFiles, ", lstAllFiles);
    res.send(lstAllFiles);
});
app.post('/fetch_stage2_audit_plan_form_files', async (req, res) => {
    const ftpClient = new Ftp();
    await ftpClient.connect({
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
    var allFileNames = [];
    await ftpClient.on( 'ready', async function() {
        await ftpClient.list("domains/cwac.in/public_html/stage2_audit_plan/" + req.body.timestamp + "/auditor_appointment_form", false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            allFileNames.push({'auditor_appointment_form': fileNames})
        });
        await ftpClient.list("domains/cwac.in/public_html/stage2_audit_plan/" + req.body.timestamp + "/confidentiality_statement", false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            allFileNames.push({'confidentiality_statement': fileNames})
        });
        await ftpClient.list("domains/cwac.in/public_html/stage2_audit_plan/" + req.body.timestamp + "/document_review_report", false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            allFileNames.push({'document_review_report': fileNames})
        });
        await ftpClient.list("domains/cwac.in/public_html/stage2_audit_plan/" + req.body.timestamp + "/attendance_sheet", false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            allFileNames.push({'attendance_sheet': fileNames})
        });
        await ftpClient.list("domains/cwac.in/public_html/stage2_audit_plan/" + req.body.timestamp + "/audit_report", false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            allFileNames.push({'audit_report': fileNames})
        });
        await ftpClient.list("domains/cwac.in/public_html/stage2_audit_plan/" + req.body.timestamp + "/surveillance_audit_report", false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            allFileNames.push({'surveillance_audit_report': fileNames})
        });
        await ftpClient.list("domains/cwac.in/public_html/stage2_audit_plan/" + req.body.timestamp + "/nc_report", false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            allFileNames.push({'nc_report': fileNames})
            //console.log(allFileNames);
            res.send(allFileNames);
            ftpClient.end();
        });
    });
});
app.post('/fetch_stage2_audit_plan_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/stage2_audit_plan/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    if (list[intIdx].name != 'attendance_sheet' && 
                        list[intIdx].name != 'audit_report' && 
                        list[intIdx].name != 'auditor_appointment_form' && 
                        list[intIdx].name != 'confidentiality_statement' && 
                        list[intIdx].name != 'document_review_report' && 
                        list[intIdx].name != 'nc_report' && 
                        list[intIdx].name != 'logs' && 
                        list[intIdx].name != 'forms' &&
                        list[intIdx].name != 'surveillance_audit_report')
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/fetch_HOActivity_files', async (req, res) => {
    const ftpClient = new Ftp();
    await ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
    var fileNames = [];
    var fileNamesContractReviewForm = [];
    var fileNamesAuditDocumentChecklist = [];
    var fileNamesCertificationRecommendationReport = [];
    await ftpClient.on( 'ready', async function() {
        await ftpClient.list("domains/cwac.in/public_html/HOActivity_files/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..' && list[intIdx].name !== 'logs' && list[intIdx].name != 'forms')
                {
                    if (list[intIdx].name != 'audit_document_checklist' && 
                        list[intIdx].name != 'certification_recommendation_report' && 
                        list[intIdx].name != 'contract_review_form')
                    fileNames.push(list[intIdx].name);
                }
            }
            //res.send(fileNames);
            //ftpClient.end();
        });
        await ftpClient.list("domains/cwac.in/public_html/HOActivity_files/" + req.body.timestamp + "/contract_review_form", false, function( err, list ) {
            if ( err ) throw err;
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                    fileNamesContractReviewForm.push(list[intIdx].name);
            }
            //res.send(fileNames);
            //ftpClient.end();
        });
        await ftpClient.list("domains/cwac.in/public_html/HOActivity_files/" + req.body.timestamp + "/audit_document_checklist", false, function( err, list ) {
            if ( err ) throw err;
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                    fileNamesAuditDocumentChecklist.push(list[intIdx].name);
            }
            //res.send(fileNames);
            //ftpClient.end();
        });
        await ftpClient.list("domains/cwac.in/public_html/HOActivity_files/" + req.body.timestamp + "/certification_recommendation_report", false, function( err, list ) {
            if ( err ) throw err;
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                    fileNamesCertificationRecommendationReport.push(list[intIdx].name);
            }
            //res.send(fileNames);
            res.send({
                fileNames: fileNames,
                fileNamesContractReviewForm: fileNamesContractReviewForm,
                fileNamesAuditDocumentChecklist: fileNamesAuditDocumentChecklist,
                fileNamesCertificationRecommendationReport: fileNamesCertificationRecommendationReport,
            });
            ftpClient.end();
        });
    });
});
app.post('/fetch_quotation_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/quotation_files/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..' && list[intIdx].name !== 'logs' && list[intIdx].name != 'forms')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/fetch_surveillance_audit_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/surveillance_audit_files/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..' && list[intIdx].name !== 'logs' && list[intIdx].name != 'forms')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/fetch_recertification_audit_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/recertification_audit_files/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..' && list[intIdx].name !== 'logs' && list[intIdx].name != 'forms')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/fetch_initial_certification_conclusion_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/initial_certification_conclusion_files/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..' && list[intIdx].name !== 'logs' && list[intIdx].name != 'forms')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/fetch_surveillance_audit_conclusion_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/surveillance_audit_conclusion_files/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..' && list[intIdx].name !== 'logs' && list[intIdx].name != 'forms')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/fetch_recertification_audit_conclusion_files', (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        ftpClient.list("domains/cwac.in/public_html/recertification_audit_conclusion_files/" + req.body.timestamp, false, function( err, list ) {
            if ( err ) throw err;
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..' && list[intIdx].name !== 'logs' && list[intIdx].name != 'forms')
                {
                    fileNames.push(list[intIdx].name);
                }
            }
            res.send(fileNames);
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/approve_client_init_cert', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("client_application_form_data");
    ApproveDisapprove();
    function ApproveDisapprove() {
    userRef.on('value', (snapshot) => {
        var stringrecord = JSON.stringify(snapshot);
        recordsets = stringrecord.substring(1, stringrecord.length - 2).split("},");
        for (var intIdx = recordsets.length - 1; intIdx >= 0; intIdx--)
        {
            var timestamp = recordsets[intIdx].substring(0, recordsets[intIdx].indexOf('":')).replace('{"', "").replace('"', '');
            if (timestamp === req.body.timestamp) {
                var userRefApproved=db.ref("client_application_form_data/" + timestamp + "/Approved");
                userRefApproved.set(req.body['Approved']);
                client.delete();
                break;
            }
        }
        
    }, (errorObject) => {

    }); 
    res.send('Operation Completed Successfully');
}
});
app.post('/aws_rds__approve_client_init_cert', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE Form_Data SET Approved = '" + req.body['Approved'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/offline__approve_client_init_cert', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE Form_Data SET Approved = '" + req.body['Approved'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_surveillance_audit_status', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("surveillance_audit_clients");
    ApproveDisapprove();
    function ApproveDisapprove() {
    userRef.on('value', (snapshot) => {
        var stringrecord = JSON.stringify(snapshot);
        recordsets = stringrecord.substring(1, stringrecord.length - 2).split("},");
        for (var intIdx = recordsets.length - 1; intIdx >= 0; intIdx--)
        {
            var timestamp = recordsets[intIdx].substring(0, recordsets[intIdx].indexOf('":')).replace('{"', "").replace('"', '');
            if (timestamp === req.body.timestamp) {
                var userRefApproved=db.ref("surveillance_audit_clients/" + timestamp + "/Status");
                userRefApproved.set(req.body['status']);
                client.delete();
                break;
            }
        }
        
    }, (errorObject) => {

    }); 
    res.send('Operation Completed Successfully');
}
});
app.post('/offline__mark_surveillance_audit_status', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE surveillance_audit_clients SET Status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_surveillance_audit_status', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE surveillance_audit_clients SET Status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_recertification_audit_status', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("recertification_audit_clients");
    ApproveDisapprove();
    function ApproveDisapprove() {
    userRef.on('value', (snapshot) => {
        var stringrecord = JSON.stringify(snapshot);
        recordsets = stringrecord.substring(1, stringrecord.length - 2).split("},");
        for (var intIdx = recordsets.length - 1; intIdx >= 0; intIdx--)
        {
            var timestamp = recordsets[intIdx].substring(0, recordsets[intIdx].indexOf('":')).replace('{"', "").replace('"', '');
            if (timestamp === req.body.timestamp) {
                var userRefApproved=db.ref("recertification_audit_clients/" + timestamp + "/Status");
                userRefApproved.set(req.body['status']);
                client.delete();
                break;
            }
        }
        
    }, (errorObject) => {

    }); 
    res.send('Operation Completed Successfully');
}
});
app.post('/offline__mark_recertification_audit_status', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE recertification_audit_clients SET Status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_recertification_audit_status', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE recertification_audit_clients SET Status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_surveillance_audit_conclusion', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    //var userRef=db.ref("surveillance_audit_clients");
    var userRefApproved=db.ref("surveillance_audit_clients/" + req.body['clientid'] + "/surveillance_audit_conclusion");
    userRefApproved.set(req.body['status'], (err) => {
        //client.delete();
        if (err) {
            res.send(err);
        }
        else {
            if (req.body['status'] == 'Completed') {
                var userRefSurveillanceAudit = db.ref("recertification_audit_clients");
                addUser({
                    'Client Name': req.body['clientName'],
                    'Status': 'Not Conducted',
                    'recertification_status': 'Not Conducted',
                    'description': '',
                    'recertification_audit_date': '',
                    'recertification_description': '',
                    //'surveillance_audit_team_assigned': 'No',
                    'recertification_audit_team_assigned': 'No',
                    //'surveillance_plan_status': 'Open',
                    'recertification_plan_status': 'Open',
                    //'surveillance_plan_task_status': 'Open',
                    'recertification_plan_task_status': 'Open',
                    //'surveillance_audit_conclusion': 'Open',
                    'recertification_audit_conclusion': 'Open',
                    'recertification_audit_plan_date': '',
                    'recertification_audit_conclusion_date': ''
                })
                async function addUser(obj1) {
                    //console.log('reached here');
                    var oneUser=userRefSurveillanceAudit.child(req.body['clientid']);
                    await oneUser.update(obj1,(err)=>{
                        client.delete();
                        if(err){
                            res.send('Something went wrong. Please submit again.');
                        }
                        else res.send('Operation Completed Successfully');
                        //else res.send('Customer Application Added Successfully');
                        //else res.send('Operation Completed Successfully');
                        //client.delete();
                        //res.send('Operation Completed Successfully');
                    })
                }
            }
            else {
                //console.log("surveillance_audit_clients/" + timestamp);
                var userRefSurveillanceAudit = db.ref("recertification_audit_clients/" + req.body['clientid']);
                //userRefSurveillanceAudit.remove();
                userRefSurveillanceAudit.remove((err) => {
                    client.delete();
                    if (err) {
                        console.log(err);
                        res.send(err)
                    }
                    else res.send('Operation Completed Successfully');
                })
            }
        }
        //res.send('Operation Completed Successfully');
    });
    //ApproveDisapprove();
    // function ApproveDisapprove() {
    // userRef.on('value', (snapshot) => {
    //     var stringrecord = JSON.stringify(snapshot);
    //     recordsets = stringrecord.substring(1, stringrecord.length - 2).split("},");
    //     for (var intIdx = recordsets.length - 1; intIdx >= 0; intIdx--)
    //     {
    //         var timestamp = recordsets[intIdx].substring(0, recordsets[intIdx].indexOf('":')).replace('{"', "").replace('"', '');
    //         if (timestamp === req.body.clientid) {
    //             var userRefApproved=db.ref("surveillance_audit_clients/" + timestamp + "/surveillance_audit_conclusion");
    //             userRefApproved.set(req.body['status']);
    //             client.delete();
    //             break;
    //         }
    //     }
        
    // }, (errorObject) => {

    // }); 
    
    // }
});
app.post('/offline__mark_surveillance_audit_conclusion', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE surveillance_audit_clients SET surveillance_audit_conclusion = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                if (req.body['status'] == 'Completed')
                    await request.query("INSERT INTO recertification_audit_clients Values ('"
                    + req.body['userid'] + "', '"
                    + req.body['timestamp'] + "', '"
                    + req.body['clientName'] + "', '"
                    + "Not Conducted" + "', '"
                    + "" + "', '"
                    + "Open" + "', '"
                    + "" + "', '"
                    + "" + "', '"
                    + "" + "', '"
                    + "No" + "', '"
                    + "" + "', '"
                    + "Open" + "', '"
                    + "Open" + "', '"
                    + "Open" + "')");
                else await request.query("DELETE FROM recertification_audit_clients WHERE client_id = '" + req.body['timestamp'] + "'");
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_surveillance_audit_conclusion', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE surveillance_audit_clients SET surveillance_audit_conclusion = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                sql.end();
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                if (req.body['status'] == 'Completed')
                    await sql.query("INSERT INTO recertification_audit_clients Values ('"
                    + req.body['userid'] + "', '"
                    + req.body['timestamp'] + "', '"
                    + req.body['clientName'] + "', '"
                    + "Not Conducted" + "', '"
                    + "" + "', '"
                    + "Open" + "', '"
                    + "" + "', '"
                    + "" + "', '"
                    + "" + "', '"
                    + "No" + "', '"
                    + "" + "', '"
                    + "Open" + "', '"
                    + "Open" + "', '"
                    + "Open" + "')");
                else await sql.query("DELETE FROM recertification_audit_clients WHERE client_id = '" + req.body['timestamp'] + "'");
                sql.end();
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_recertification_audit_conclusion', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("recertification_audit_clients/" + req.body['clientid'] + "/recertification_audit_conclusion");
    userRef.set(req.body['status'], (err) => {
        client.delete();
        if (err) {
            res.send(err);
        }
        else res.send('Operation Completed Successfully');
    })
    //var userRef=db.ref("recertification_audit_clients");
    // ApproveDisapprove();
    // function ApproveDisapprove() {
    // userRef.on('value', (snapshot) => {
    //     var stringrecord = JSON.stringify(snapshot);
    //     recordsets = stringrecord.substring(1, stringrecord.length - 2).split("},");
    //     for (var intIdx = recordsets.length - 1; intIdx >= 0; intIdx--)
    //     {
    //         var timestamp = recordsets[intIdx].substring(0, recordsets[intIdx].indexOf('":')).replace('{"', "").replace('"', '');
    //         if (timestamp === req.body.timestamp) {
    //             var userRefApproved=db.ref("recertification_audit_clients/" + timestamp + "/recertification_audit_conclusion");
    //             userRefApproved.set(req.body['status']);
    //             client.delete();
    //             break;
    //         }
    //     }
        
    //     }, (errorObject) => {

    //     }); 
    //     res.send('Operation Completed Successfully');
    // }
});
app.post('/offline__mark_recertification_audit_conclusion', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE recertification_audit_clients SET recertification_audit_conclusion = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_recertification_audit_conclusion', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE recertification_audit_clients SET recertification_audit_conclusion = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_stage1_audit_plan', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("client_application_form_data");
    ApproveDisapprove();
    function ApproveDisapprove() {
    userRef.on('value', (snapshot) => {
        var stringrecord = JSON.stringify(snapshot);
        recordsets = stringrecord.substring(1, stringrecord.length - 2).split("},");
        for (var intIdx = recordsets.length - 1; intIdx >= 0; intIdx--)
        {
            var timestamp = recordsets[intIdx].substring(0, recordsets[intIdx].indexOf('":')).replace('{"', "").replace('"', '');
            if (timestamp === req.body.timestamp) {
                var userRefApproved=db.ref("client_application_form_data/" + timestamp + "/stage1_plan_status");
                userRefApproved.set(req.body['status']);
                client.delete();
                break;
            }
        }
        
    }, (errorObject) => {

    }); 
    res.send('Operation Completed Successfully');
}
});
app.post('/offline__mark_stage1_audit_plan', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE Form_Data SET stage1_plan_status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_stage1_audit_plan', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE Form_Data SET stage1_plan_status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/offline__mark_stage2_audit_plan', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE Form_Data SET stage2_plan_status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_stage2_audit_plan', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE Form_Data SET stage2_plan_status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_stage1_audit_plan_log', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("stage1_audit_plans/" + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/status");
    userRef.set(req.body['status'], (err) => {
        client.delete();
        if (err) {
            res.send(err);
        }
        res.send('Operation Completed Successfully');
    });
});
app.post('/offline__mark_stage1_audit_plan_log', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE stage1_audit_plan_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_stage1_audit_plan_log', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE stage1_audit_plan_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/offline__mark_stage2_audit_plan_log', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE stage2_audit_plan_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_stage2_audit_plan_log', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE stage2_audit_plan_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_initial_certification_log', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("client_application_form_data/" + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/status");
    userRef.set(req.body['status'], (err) => {
        client.delete();
        if (err) {
            res.send(err);
        }
        res.send('Operation Completed Successfully');
    });
});
app.post('/offline__mark_initial_certification_log', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE initial_certification_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_initial_certification_log', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE initial_certification_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_stage2_audit_plan_log', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("stage2_audit_plans/" + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/status");
    userRef.set(req.body['status'], (err) => {
        client.delete();
        if (err) {
            res.send(err);
        }
        res.send('Operation Completed Successfully');
    });
});
app.post('/mark_surveillance_audit_plan_log', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("surveillance_audit_plans/" + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/status");
    userRef.set(req.body['status'], (err) => {
        client.delete();
        if (err) {
            res.send(err);
        }
        res.send('Operation Completed Successfully');
    });
});
app.post('/offline__mark_surveillance_audit_plan_log', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE surveillance_audit_plan_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_surveillance_audit_plan_log', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE surveillance_audit_plan_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_recertification_audit_plan_log', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("recertification_audit_plans/" + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/status");
    userRef.set(req.body['status'], (err) => {
        client.delete();
        if (err) {
            res.send(err);
        }
        res.send('Operation Completed Successfully');
    });
});
app.post('/offline__mark_recertification_audit_plan_log', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE recertification_audit_plan_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_recertification_audit_plan_log', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE recertification_audit_plan_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_quotation_log', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("quotations/" + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/status");
    userRef.set(req.body['status'], (err) => {
        client.delete();
        if (err) {
            res.send(err);
        }
        res.send('Operation Completed Successfully');
    });
});
app.post('/mark_ho_activity_log', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("ho_activities/" + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/status");
    userRef.set(req.body['status'], (err) => {
        client.delete();
        if (err) {
            res.send(err);
        }
        res.send('Operation Completed Successfully');
    });
});
app.post('/offline__mark_ho_activity_log', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE ho_activity_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_ho_activity_log', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE ho_activity_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_initial_certification_conclusion_log', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("initial_certification_conclusion/" + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/status");
    userRef.set(req.body['status'], (err) => {
        client.delete();
        if (err) {
            res.send(err);
        }
        res.send('Operation Completed Successfully');
    });
});
app.post('/offline__mark_initial_certification_conclusion_log', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE initial_certification_conclusion_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_initial_certification_conclusion_log', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE initial_certification_conclusion_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_surveillance_audit_conclusion_log', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("surveillance_audit_conclusion/" + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/status");
    userRef.set(req.body['status'], (err) => {
        client.delete();
        if (err) {
            res.send(err);
        }
        res.send('Operation Completed Successfully');
    });
});
app.post('/offline__mark_surveillance_audit_conclusion_log', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE surveillance_audit_conclusion_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_surveillance_audit_conclusion_log', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE surveillance_audit_conclusion_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_recertification_audit_conclusion_log', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("recertification_audit_conclusion/" + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/status");
    userRef.set(req.body['status'], (err) => {
        client.delete();
        if (err) {
            res.send(err);
        }
        res.send('Operation Completed Successfully');
    });
});
app.post('/offline__mark_recertification_audit_conclusion_log', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE recertification_audit_conclusion_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_recertification_audit_conclusion_log', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE recertification_audit_conclusion_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_surveillance_audit_log', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("surveillance_audit_clients/" + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/status");
    userRef.set(req.body['status'], (err) => {
        client.delete();
        if (err) {
            res.send(err);
        }
        res.send('Operation Completed Successfully');
    });
});
app.post('/offline__mark_surveillance_audit_log', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE surveillance_audit_client_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_surveillance_audit_log', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE surveillance_audit_client_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_surveillance_audit_log', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE surveillance_audit_client_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_recertification_audit_log', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("recertification_audit_clients/" + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/status");
    userRef.set(req.body['status'], (err) => {
        client.delete();
        if (err) {
            res.send(err);
        }
        res.send('Operation Completed Successfully');
    });
});
app.post('/offline__mark_recertification_audit_log', (req, res) => {
var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE recertification_audit_client_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_recertification_audit_log', (req, res) => {
    var mysql = require("mysql");
        // const fs = require('fs');
        // var info = {};
        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
        // allFileContents.split(/\r?\n/).forEach(line =>  {        
        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
        // });
        var sql = mysql.createConnection({
            host     : DBENDPOINT,
            user     : "admin",
            password : "qwertyui",
            port     : "3306",
            database : "mydb"
        });
        sql.connect(function (err) {
            if (err) console.log(err);
            else console.log('connected');
            //var request = new sql.Request();
            sql.query("UPDATE recertification_audit_client_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
                sql.end();
                if (err)
                {
                    console.log(err);
                    res.send('Something went wrong. Please submit again.')
                }
                else 
                {
                    res.send("Operation Completed Successfully");
                }
            });
        });
    });
app.post('/mark_surveillance_audit_plan', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("surveillance_audit_clients");
    ApproveDisapprove();
    function ApproveDisapprove() {
    userRef.on('value', (snapshot) => {
        var stringrecord = JSON.stringify(snapshot);
        recordsets = stringrecord.substring(1, stringrecord.length - 2).split("},");
        for (var intIdx = recordsets.length - 1; intIdx >= 0; intIdx--)
        {
            var timestamp = recordsets[intIdx].substring(0, recordsets[intIdx].indexOf('":')).replace('{"', "").replace('"', '');
            if (timestamp === req.body.timestamp) {
                var userRefApproved=db.ref("surveillance_audit_clients/" + timestamp + "/surveillance_plan_status");
                userRefApproved.set(req.body['status']);
                client.delete();
                break;
            }
        }
        
    }, (errorObject) => {

    }); 
    res.send('Operation Completed Successfully');
}
});
app.post('/offline__mark_surveillance_audit_plan', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE surveillance_audit_clients SET surveillance_plan_status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_surveillance_audit_plan', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE surveillance_audit_clients SET surveillance_plan_status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_recertification_audit_plan', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("recertification_audit_clients");
    ApproveDisapprove();
    function ApproveDisapprove() {
    userRef.on('value', (snapshot) => {
        var stringrecord = JSON.stringify(snapshot);
        recordsets = stringrecord.substring(1, stringrecord.length - 2).split("},");
        for (var intIdx = recordsets.length - 1; intIdx >= 0; intIdx--)
        {
            var timestamp = recordsets[intIdx].substring(0, recordsets[intIdx].indexOf('":')).replace('{"', "").replace('"', '');
            if (timestamp === req.body.timestamp) {
                var userRefApproved=db.ref("recertification_audit_clients/" + timestamp + "/recertification_plan_status");
                userRefApproved.set(req.body['status']);
                client.delete();
                break;
            }
        }
        
    }, (errorObject) => {

    }); 
    res.send('Operation Completed Successfully');
}
});
app.post('/offline__mark_recertification_audit_plan', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE recertification_audit_clients SET recertification_plan_status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_recertification_audit_plan', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE recertification_audit_clients SET recertification_plan_status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_stage1_plan_task', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("client_application_form_data");
    ApproveDisapprove();
    function ApproveDisapprove() {
    userRef.on('value', (snapshot) => {
        var stringrecord = JSON.stringify(snapshot);
        recordsets = stringrecord.substring(1, stringrecord.length - 2).split("},");
        for (var intIdx = recordsets.length - 1; intIdx >= 0; intIdx--)
        {
            var timestamp = recordsets[intIdx].substring(0, recordsets[intIdx].indexOf('":')).replace('{"', "").replace('"', '');
            if (timestamp === req.body.timestamp) {
                var userRefApproved=db.ref("client_application_form_data/" + timestamp + "/stage1_plan_task_status");
                userRefApproved.set(req.body['status']);
                client.delete();
                break;
            }
        }
        
    }, (errorObject) => {

    }); 
    res.send('Operation Completed Successfully');
}
});
app.post('/offline__mark_stage1_plan_task', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE Form_Data SET stage1_plan_task_status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_stage1_plan_task', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE Form_Data SET stage1_plan_task_status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/offline__mark_stage2_plan_task', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE Form_Data SET stage2_plan_task_status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_stage2_plan_task', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE Form_Data SET stage2_plan_task_status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_surveillance_plan_task', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("surveillance_audit_clients");
    ApproveDisapprove();
    function ApproveDisapprove() {
    userRef.on('value', (snapshot) => {
        var stringrecord = JSON.stringify(snapshot);
        recordsets = stringrecord.substring(1, stringrecord.length - 2).split("},");
        for (var intIdx = recordsets.length - 1; intIdx >= 0; intIdx--)
        {
            var timestamp = recordsets[intIdx].substring(0, recordsets[intIdx].indexOf('":')).replace('{"', "").replace('"', '');
            if (timestamp === req.body.timestamp) {
                var userRefApproved=db.ref("surveillance_audit_clients/" + timestamp + "/surveillance_plan_task_status");
                userRefApproved.set(req.body['status']);
                client.delete();
                break;
            }
        }
        
    }, (errorObject) => {

    }); 
    res.send('Operation Completed Successfully');
}
});
app.post('/offline__mark_surveillance_plan_task', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE surveillance_audit_clients SET surveillance_plan_task_status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_surveillance_plan_task', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE surveillance_audit_clients SET surveillance_plan_task_status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_recertification_plan_task', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("recertification_audit_clients");
    ApproveDisapprove();
    function ApproveDisapprove() {
    userRef.on('value', (snapshot) => {
        var stringrecord = JSON.stringify(snapshot);
        recordsets = stringrecord.substring(1, stringrecord.length - 2).split("},");
        for (var intIdx = recordsets.length - 1; intIdx >= 0; intIdx--)
        {
            var timestamp = recordsets[intIdx].substring(0, recordsets[intIdx].indexOf('":')).replace('{"', "").replace('"', '');
            if (timestamp === req.body.timestamp) {
                var userRefApproved=db.ref("recertification_audit_clients/" + timestamp + "/recertification_plan_task_status");
                userRefApproved.set(req.body['status']);
                client.delete();
                break;
            }
        }
        
    }, (errorObject) => {

    }); 
    res.send('Operation Completed Successfully');
}
});
app.post('/offline__mark_recertification_plan_task', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE recertification_audit_clients SET recertification_plan_task_status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_recertification_plan_task', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE recertification_audit_clients SET recertification_plan_task_status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_stage2_plan_task', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("client_application_form_data");
    ApproveDisapprove();
    function ApproveDisapprove() {
    userRef.on('value', (snapshot) => {
        var stringrecord = JSON.stringify(snapshot);
        recordsets = stringrecord.substring(1, stringrecord.length - 2).split("},");
        for (var intIdx = recordsets.length - 1; intIdx >= 0; intIdx--)
        {
            var timestamp = recordsets[intIdx].substring(0, recordsets[intIdx].indexOf('":')).replace('{"', "").replace('"', '');
            if (timestamp === req.body.timestamp) {
                var userRefApproved=db.ref("client_application_form_data/" + timestamp + "/stage2_plan_task_status");
                userRefApproved.set(req.body['status']);
                client.delete();
                break;
            }
        }
        
    }, (errorObject) => {

    }); 
    res.send('Operation Completed Successfully');
}
});
app.post('/mark_stage2_audit_plan', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("client_application_form_data");
    ApproveDisapprove();
    function ApproveDisapprove() {
    userRef.on('value', (snapshot) => {
        var stringrecord = JSON.stringify(snapshot);
        recordsets = stringrecord.substring(1, stringrecord.length - 2).split("},");
        for (var intIdx = recordsets.length - 1; intIdx >= 0; intIdx--)
        {
            var timestamp = recordsets[intIdx].substring(0, recordsets[intIdx].indexOf('":')).replace('{"', "").replace('"', '');
            if (timestamp === req.body.timestamp) {
                var userRefApproved=db.ref("client_application_form_data/" + timestamp + "/stage2_plan_status");
                userRefApproved.set(req.body['status']);
                client.delete();
                break;
            }
        }
        
    }, (errorObject) => {

    }); 
    res.send('Operation Completed Successfully');
}
});
app.post('/mark_quotation', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("client_application_form_data");
    ApproveDisapprove();
    function ApproveDisapprove() {
    userRef.on('value', (snapshot) => {
        var stringrecord = JSON.stringify(snapshot);
        recordsets = stringrecord.substring(1, stringrecord.length - 2).split("},");
        for (var intIdx = recordsets.length - 1; intIdx >= 0; intIdx--)
        {
            var timestamp = recordsets[intIdx].substring(0, recordsets[intIdx].indexOf('":')).replace('{"', "").replace('"', '');
            if (timestamp === req.body.timestamp) {
                var userRefApproved=db.ref("client_application_form_data/" + timestamp + "/quotation_status");
                userRefApproved.set(req.body['status']);
                client.delete();
                break;
            }
        }
        
    }, (errorObject) => {

    }); 
    res.send('Operation Completed Successfully');
}
});
app.post('/offline__mark_quotation', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE Form_Data SET quotation_status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_quotation', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE Form_Data SET quotation_status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/offline__mark_quotation_log', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE quotation_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_quotation_log', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE quotation_logs SET status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_HOActivity', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("client_application_form_data");
    ApproveDisapprove();
    function ApproveDisapprove() {
    userRef.on('value', (snapshot) => {
        var stringrecord = JSON.stringify(snapshot);
        recordsets = stringrecord.substring(1, stringrecord.length - 2).split("},");
        for (var intIdx = recordsets.length - 1; intIdx >= 0; intIdx--)
        {
            var timestamp = recordsets[intIdx].substring(0, recordsets[intIdx].indexOf('":')).replace('{"', "").replace('"', '');
            if (timestamp === req.body.timestamp) {
                var userRefApproved=db.ref("client_application_form_data/" + timestamp + "/HO_activity_status");
                userRefApproved.set(req.body['status']);
                client.delete();
                break;
            }
        }
        
    }, (errorObject) => {

    }); 
    res.send('Operation Completed Successfully');
}
});
app.post('/offline__mark_HOActivity', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE Form_Data SET HO_activity_status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_HOActivity', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE Form_Data SET HO_activity_status = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/mark_initial_certification_conclusion', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("client_application_form_data");
    ApproveDisapprove();
    async function ApproveDisapprove() {
    //userRef.on('value', (snapshot) => {
    await userRef.once('value').then((snapshot) => {
        var stringrecord = JSON.stringify(snapshot);
        recordsets = stringrecord.substring(1, stringrecord.length - 2).split("},");
        for (var intIdx = recordsets.length - 1; intIdx >= 0; intIdx--)
        {
            var timestamp = recordsets[intIdx].substring(0, recordsets[intIdx].indexOf('":')).replace('{"', "").replace('"', '');
            if (timestamp === req.body.timestamp) {
                var userRefApproved=db.ref("client_application_form_data/" + timestamp + "/initial_certification_conclusion");
                userRefApproved.set(req.body['status']);
                if (req.body['status'] == 'Completed') {
                    var userRefSurveillanceAudit = db.ref("surveillance_audit_clients");
                    addUser({
                        'Client Name': req.body['clientName'],
                        'Status': 'Not Conducted',
                        //'recertification_status': 'Not Conducted',
                        'description': '',
                        'surveillance_audit_date': '',
                        //'recertification_description': '',
                        'surveillance_audit_team_assigned': 'No',
                        //'recertification_audit_team_assigned': 'No',
                        'surveillance_plan_status': 'Open',
                        //'recertification_plan_status': 'Open',
                        'surveillance_plan_task_status': 'Open',
                        //'recertification_plan_task_status': 'Open',
                        'surveillance_audit_conclusion': 'Open',
                        //'recertification_conclusion': 'Open',
                        'surveillance_audit_plan_date': '',
                        'surveillance_audit_conclusion_date': ''
                    })
                    async function addUser(obj1) {
                        //console.log('reached here');
                        var oneUser=userRefSurveillanceAudit.child(timestamp);
                        await oneUser.update(obj1,(err)=>{
                            client.delete();
                            if(err){
                                res.send('Something went wrong. Please submit again.');
                            }
                            else res.send('Operation Completed Successfully');
                            //else res.send('Customer Application Added Successfully');
                            //else res.send('Operation Completed Successfully');
                            client.delete();
                            //res.send('Operation Completed Successfully');
                        })
                    }
                }
                else {
                    //console.log("surveillance_audit_clients/" + timestamp);
                    var userRefSurveillanceAudit = db.ref("surveillance_audit_clients/" + timestamp);
                    //userRefSurveillanceAudit.remove();
                    userRefSurveillanceAudit.remove((err) => {
                        client.delete();
                        if (err) {
                            console.log(err);
                            res.send(err)
                        }
                        else res.send('Operation Completed Successfully');
                    })
                }
                //client.delete();
                break;
            }
        }
        
    }, (errorObject) => {

    }); 
    }
    //res.send('Operation Completed Successfully');
});
app.post('/offline__mark_initial_certification_conclusion', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE Form_Data SET initial_certification_conclusion = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                if (req.body['status'] == 'Completed')
                    await request.query("INSERT INTO surveillance_audit_clients Values ('"
                    + req.body['userid'] + "', '"
                    + req.body['timestamp'] + "', '"
                    + req.body['clientName'] + "', '"
                    + "Not Conducted" + "', '"
                    + "" + "', '"
                    + "Open" + "', '"
                    + "" + "', '"
                    + "" + "', '"
                    + "" + "', '"
                    + "No" + "', '"
                    + "Open" + "', '"
                    + "Open" + "')");
                else await request.query("DELETE FROM surveillance_audit_clients WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'");
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/aws_rds__mark_initial_certification_conclusion', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE Form_Data SET initial_certification_conclusion = '" + req.body['status'] + "' WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                sql.end();
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                if (req.body['status'] == 'Completed')
                    await sql.query("INSERT INTO surveillance_audit_clients Values ('"
                    + req.body['userid'] + "', '"
                    + req.body['timestamp'] + "', '"
                    + req.body['clientName'] + "', '"
                    + "Not Conducted" + "', '"
                    + "" + "', '"
                    + "Open" + "', '"
                    + "" + "', '"
                    + "" + "', '"
                    + "" + "', '"
                    + "No" + "', '"
                    + "Open" + "', '"
                    + "Open" + "')");
                else await sql.query("DELETE FROM surveillance_audit_clients WHERE client_id = '" + req.body['timestamp'] + "' AND user_id = '" + req.body['userid'] + "'");
                sql.end();
                res.send("Operation Completed Successfully");
            }
        });
    });
});
app.post('/add_stage1_audit_team', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("assigned_stage1_audit_teams");
    addUser({
        'stage1_audit_teams': req.body['list_stage1_teams'],
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body.clientid);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                db=admin.database();
                userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/stage1_team_assigned");
                userRef.set("Yes");
                res.send('Stage 1 Audit Team Assigned Successfully');
                client.delete();
            }
        })
    }
});
app.post('/offline__add_stage1_audit_team', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        for (var intIdx = 0; intIdx < req.body['list_stage1_teams'].length; intIdx++)
        {
            await request.query("INSERT INTO assigned_stage1_audit_teams VALUES ('" 
            + req.body['userid'] + "', '"
            + req.body['clientid'] + "', '"
            + req.body['list_stage1_teams'][intIdx] + "')");
        }
        await request.query("UPDATE Form_Data SET stage1_team_assigned = 'Yes' WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'");
        res.send('Stage 1 Audit Team Assigned Successfully');
    });
});
app.post('/aws_rds__add_stage1_audit_team', (req, res) => {
    try
    {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        for (var intIdx = 0; intIdx < req.body['list_stage1_teams'].length; intIdx++)
        {
            await sql.query("INSERT INTO assigned_stage1_audit_teams VALUES ('" 
            + req.body['userid'] + "', '"
            + req.body['clientid'] + "', '"
            + req.body['list_stage1_teams'][intIdx]['id'] + "', '"
            + req.body['list_stage1_teams'][intIdx]['group_chat_google_id'] + "', '"
            + req.body['list_stage1_teams'][intIdx]['personal_chat_google_id'] + "', '"
            + req.body['list_stage1_teams'][intIdx]['Member Name'] + "')");
        }
        await sql.query("UPDATE Form_Data SET stage1_team_assigned = 'Yes' WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'");
        sql.end();
        res.send('Stage 1 Audit Team Assigned Successfully');
    });
    }
    catch(error)
    {
        console.log(error);
        if (sql) sql.end();
    }
});
app.post('/aws_rds__add_surveillance_audit_reminder', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        for (var intIdx = 0; intIdx < req.body['list_stage1_teams'].length; intIdx++)
        {
            await sql.query("INSERT INTO assigned_stage1_audit_teams VALUES ('" 
            + req.body['userid'] + "', '"
            + req.body['clientid'] + "', '"
            + req.body['list_stage1_teams'][intIdx] + "')");
        }
        await sql.query("UPDATE Form_Data SET stage1_team_assigned = 'Yes' WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'");
        sql.end();
        res.send('Stage 1 Audit Team Assigned Successfully');
    });
});
app.post('/offline__add_stage2_audit_team', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        for (var intIdx = 0; intIdx < req.body['list_stage2_teams'].length; intIdx++)
        {
            await request.query("INSERT INTO assigned_stage2_audit_teams VALUES ('" 
            + req.body['userid'] + "', '"
            + req.body['clientid'] + "', '"
            + req.body['list_stage2_teams'][intIdx] + "')");
        }
        await request.query("UPDATE Form_Data SET stage2_team_assigned = 'Yes' WHERE client_id = '" + req.body['clientid'] + "'");
        res.send('Stage 2 Audit Team Assigned Successfully');
    });
});
app.post('/aws_rds__add_stage2_audit_team', (req, res) => {
    try
    {
        var mysql = require("mysql");
        // const fs = require('fs');
        // var info = {};
        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
        // allFileContents.split(/\r?\n/).forEach(line =>  {        
        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
        // });
        var sql = mysql.createConnection({
            host     : DBENDPOINT,
            user     : "admin",
            password : "qwertyui",
            port     : "3306",
            database : "mydb"
        });
        sql.connect(async function (err) {
            if (err) console.log(err);
            else console.log('connected');
            //var request = new sql.Request();
            for (var intIdx = 0; intIdx < req.body['list_stage2_teams'].length; intIdx++)
            {
                await sql.query("INSERT INTO assigned_stage2_audit_teams VALUES ('" 
                + req.body['userid'] + "', '"
                + req.body['clientid'] + "', '"
                + req.body['list_stage2_teams'][intIdx]['id'] + "', '"
                + req.body['list_stage2_teams'][intIdx]['group_chat_google_id'] + "', '"
                + req.body['list_stage2_teams'][intIdx]['personal_chat_google_id'] + "', '"
                + req.body['list_stage2_teams'][intIdx]['Member Name'] + "')");
            }
            await sql.query("UPDATE Form_Data SET stage2_team_assigned = 'Yes' WHERE client_id = '" + req.body['clientid'] + "'");
            sql.end();
            res.send('Stage 2 Audit Team Assigned Successfully');
        });
    }
    catch(error)
    {
        console.log(error);
        if (sql) sql.end();
    }
});
app.post('/add_surveillance_audit_team', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("assigned_surveillance_audit_teams");
    addUser({
        'surveillance_audit_teams': req.body['list_surveillance_audit_teams'],
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body.clientid);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                db=admin.database();
                userRef=db.ref("surveillance_audit_clients/" + req.body.clientid  + "/surveillance_audit_team_assigned");
                userRef.set("Yes");
                res.send('Surveillance Audit Team Assigned Successfully');
                client.delete();
            }
        })
    }
});
app.post('/offline__add_surveillance_audit_team', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        for (var intIdx = 0; intIdx < req.body['list_surveillance_audit_teams'].length; intIdx++)
        {
            await request.query("INSERT INTO assigned_surveillance_audit_teams VALUES ('" 
            + req.body['userid'] + "', '"
            + req.body['clientid'] + "', '"
            + req.body['list_surveillance_audit_teams'][intIdx] + "')");
        }
        await request.query("UPDATE surveillance_audit_clients SET surveillance_audit_team_assigned = 'Yes' WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'");
        res.send('Surveillance Audit Team Assigned Successfully');
    });
});
app.post('/aws_rds__add_surveillance_audit_team', (req, res) => {
    try
    {
        var mysql = require("mysql");
        // const fs = require('fs');
        // var info = {};
        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
        // allFileContents.split(/\r?\n/).forEach(line =>  {        
        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
        // });
        var sql = mysql.createConnection({
            host     : DBENDPOINT,
            user     : "admin",
            password : "qwertyui",
            port     : "3306",
            database : "mydb"
        });
        sql.connect(async function (err) {
            if (err) console.log(err);
            else console.log('connected');
            //var request = new sql.Request();
            for (var intIdx = 0; intIdx < req.body['list_surveillance_audit_teams'].length; intIdx++)
            {
                await sql.query("INSERT INTO assigned_surveillance_audit_teams VALUES ('" 
                + req.body['userid'] + "', '"
                + req.body['clientid'] + "', '"
                + req.body['list_surveillance_audit_teams'][intIdx]['employee_id'] + "', '"
                + req.body['list_surveillance_audit_teams'][intIdx]['group_chat_google_id'] + "', '"
                + req.body['list_surveillance_audit_teams'][intIdx]['personal_chat_google_id'] + "', '"
                + req.body['list_surveillance_audit_teams'][intIdx]['Member Name'] + "')");
            }
            await sql.query("UPDATE surveillance_audit_clients SET surveillance_audit_team_assigned = 'Yes' WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'");
            sql.end();
            res.send('Surveillance Audit Team Assigned Successfully');
        });
    }
    catch(error)
    {
        console.log(error);
        if (client) client.delete();
        if (sql) sql.end();
        //res.send("Something Went wrong please try again");
    }
});
app.post('/add_recertification_audit_team', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("assigned_recertification_audit_teams");
    addUser({
        'recertification_audit_teams': req.body['list_recertification_audit_teams'],
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body.clientid);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                db=admin.database();
                userRef=db.ref("recertification_audit_clients/" + req.body.clientid  + "/recertification_audit_team_assigned");
                userRef.set("Yes");
                res.send('Recertification Audit Team Assigned Successfully');
                client.delete();
            }
        })
    }
});
app.post('/offline__add_recertification_audit_team', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        for (var intIdx = 0; intIdx < req.body['list_recertification_audit_teams'].length; intIdx++)
        {
            await request.query("INSERT INTO assigned_recertification_audit_teams VALUES ('" 
            + req.body['userid'] + "', '"
            + req.body['clientid'] + "', '"
            + req.body['list_recertification_audit_teams'][intIdx] + "')");
        }
        await request.query("UPDATE recertification_audit_clients SET recertification_audit_team_assigned = 'Yes' WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'");
        res.send('Recertification Audit Team Assigned Successfully');
    });
});
app.post('/aws_rds__add_recertification_audit_team', (req, res) => {
    try
    {
        var mysql = require("mysql");
        // const fs = require('fs');
        // var info = {};
        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
        // allFileContents.split(/\r?\n/).forEach(line =>  {        
        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
        // });
        var sql = mysql.createConnection({
            host     : DBENDPOINT,
            user     : "admin",
            password : "qwertyui",
            port     : "3306",
            database : "mydb"
        });
        sql.connect(async function (err) {
            if (err) console.log(err);
            else console.log('connected');
            //var request = new sql.Request();
            for (var intIdx = 0; intIdx < req.body['list_recertification_audit_teams'].length; intIdx++)
            {
                await sql.query("INSERT INTO assigned_recertification_audit_teams VALUES ('" 
                + req.body['userid'] + "', '"
                + req.body['clientid'] + "', '"
                + req.body['list_recertification_audit_teams'][intIdx]['employee_id'] + "', '"
                + req.body['list_recertification_audit_teams'][intIdx]['group_chat_google_id'] + "', '"
                + req.body['list_recertification_audit_teams'][intIdx]['personal_chat_google_id'] + "', '"
                + req.body['list_recertification_audit_teams'][intIdx]['Member Name'] + "')");
            }
            await sql.query("UPDATE recertification_audit_clients SET recertification_audit_team_assigned = 'Yes' WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'");
            sql.end();
            res.send('Recertification Audit Team Assigned Successfully');
        });
    }
    catch(error)
    {
        console.log(error);
        if (client) client.delete();
        if (sql) sql.end();
        //res.send("Something Went wrong please try again");
    }
});
app.post('/add_stage2_audit_team', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("assigned_stage2_audit_teams");
    addUser({
        'stage2_audit_teams': req.body['list_stage2_teams'],
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body.clientid);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                db=admin.database();
                userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/stage2_team_assigned");
                userRef.set("Yes");
                res.send('Stage 2 Audit Team Assigned Successfully');
                client.delete();
            }
        })
    }
});
app.post('/add_stage1_audit_team_in_library', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("stage1_audit_teams");
    addUser({
        'Member Name': req.body['Member Name'],
        'Member Email': req.body['Member Email'],
        'Member PhoneNumber': req.body['Member PhoneNumber'],
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['timestamp']);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else res.send('Stage 1 Audit Team Added Successfully');
            client.delete();
        })
    }
});
app.post('/offline__add_stage1_audit_team_in_library', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO stage1_audit_teams VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['Member Email'] + "', '" 
        + req.body['Member Name'] + "', '" 
        + req.body['Member PhoneNumber'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Stage 1 Audit Team Added Successfully");
            }
        });
    });
});
app.post('/aws_rds__add_stage1_audit_team_in_library', async (req, res) => {
    try
    {
    var serviceAccount = require('./admin_group_chat.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
            authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
            authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
        });
    }
    var groupChatAuthenticationData = await admin.auth().createUser(
        {
        email: req.body['Member Email'],
        emailVerified: true,
        password: "123456",
        displayName: req.body['Member Name'],
        phoneNumber: "+91" + req.body['Member PhoneNumber'],
        disabled: false,
        }
    );
    client.delete();
    // serviceAccount = require('./admin_personal_chat.json');
    // if (!admin.apps.length) {
    //     client = admin.initializeApp({
    //         credential: admin.credential.cert(serviceAccount),
    //         databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
    //         authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
    //     });
    // }else {
    //     client = admin.app(); // if already initialized, use that one
    //     client.delete();
    //     client = admin.initializeApp({
    //         credential: admin.credential.cert(serviceAccount),
    //         databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
    //         authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
    //     });
    // }
    // var personalChatAuthenticationData = await admin.auth().createUser(
    //     {
    //         email: req.body['Member Email'],
    //         emailVerified: true,
    //         password: "123456",
    //         displayName: req.body['Member Name'],
    //         phoneNumber: "+91" + req.body['Member PhoneNumber'],
    //         disabled: false,
    //     }
    // );
    // client.delete();
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO stage1_audit_teams VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['Member Email'] + "', '" 
        + req.body['Member Name'] + "', '" 
        + req.body['Member PhoneNumber'] + "', '" 
        + "" + "', '" 
        + groupChatAuthenticationData.uid + "', '" 
        + "" + "')", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Stage 1 Audit Team Added Successfully");
            }
        });
    });
    }
    catch(error)
    {
        console.log(error);
        if (client) client.delete();
        if (sql) sql.end();
        //res.send("Something Went wrong please try again");
    }
});
// app.post('/aws_rds__fetch_surveillance_client_reminder_settings', (req, res) => {
//     var mysql = require("mysql");
//     // const fs = require('fs');
//     // var info = {};
//     // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
//     // allFileContents.split(/\r?\n/).forEach(line =>  {        
//     //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
//     // });
//     var sql = mysql.createConnection({
//         host     : DBENDPOINT,
//         user     : "admin",
//         password : "qwertyui",
//         port     : "3306",
//         database : "mydb"
//     });
//     const QueryExistingReminder = (tableName) =>{
//         return new Promise((resolve, reject)=>{
//             sql.query("SELECT * FROM " + tableName + " WHERE user_id = '" + req.body['userid'] + "'",  (error, results)=>{
//                 if(error){
//                     return reject(error);
//                 }
//                 return resolve(results);
//             });
//         });
//     };
//     sql.connect(async function (err) {
//         if (err) console.log(err);
//         else console.log('connected');
//         var settingsType = "Interval";
//         var result = await QueryExistingReminder("surveillance_audit_reminder_fixed");
//         if (result.length > 0) settingsType = "Fixed";
//         else result = await QueryExistingReminder("surveillance_audit_reminder_intervals");
//         if (result.length > 0)
//         {
//             res.send({"settingsType": settingsType, "data": result});
//         }
//         else res.send({"settingsType": "", "data": result});
//         sql.end();
//     });
// });
app.post('/aws_rds__fetch_surveillance_client_reminder_settings', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    const QueryExistingReminder = (tableName) =>{
        return new Promise((resolve, reject)=>{
            sql.query("SELECT * FROM " + tableName + " WHERE user_id = '" + req.body['userid'] + "'",  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var settingsType = "Interval";
        var resultIntervals = [];
        var resultFixed = [];
        resultIntervals = await QueryExistingReminder("surveillance_audit_reminder_intervals");
        resultFixed = await QueryExistingReminder("surveillance_audit_reminder_fixed");
        res.send({"resultIntervals": resultIntervals, "resultFixed": resultFixed});
        // if (result.length > 0) settingsType = "Fixed";
        // else result = await QueryExistingReminder("surveillance_audit_reminder_intervals");
        // if (result.length > 0)
        // {
        //     res.send({"settingsType": settingsType, "data": result});
        // }
        // else res.send({"settingsType": "", "data": result});
        sql.end();
    });
});
app.post('/aws_rds__fetch_ab_credentials', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    const QueryData = (query) =>{
        return new Promise((resolve, reject)=>{
            sql.query(query,  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var results = await QueryData("SELECT * FROM accreditation_board_credentials WHERE user_id = '" + req.body['userid'] + "'");
        var resultsForWorkflow = await QueryData("SELECT * FROM registered_users WHERE id = '" + req.body['userid'] + "'");
        sql.end();
        res.send({
            "results": results, 
            "filter_workflow": resultsForWorkflow[0]['filter_workflow'],
            "database_export_date_time": resultsForWorkflow[0]['database_export_date_time'],
            "database_import_date_time": resultsForWorkflow[0]['database_import_date_time'],
            "database_delete_date_time": resultsForWorkflow[0]['database_delete_date_time']
        });
    });
});
app.post('/aws_rds__add_surveillance_client_reminder_settings', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    const QueryExistingReminder = (tableName, toWhom) =>{
        return new Promise((resolve, reject)=>{
            sql.query("SELECT * FROM " + tableName + " WHERE user_id = '" + req.body['userid'] + "' AND to_whom = '" + toWhom + "'",  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    const DeleteExistingReminder = (tableName, toWhom) =>{
        return new Promise((resolve, reject)=>{
            sql.query("DELETE FROM " + tableName + " WHERE user_id = '" + req.body['userid'] + "' AND to_whom = '" + toWhom + "'",  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        if (req.body['checkDoIntervalBased'] == true)
        {
            var result = await QueryExistingReminder("surveillance_audit_reminder_fixed", req.body['toWhom']);
            if (result.length > 0)
                await DeleteExistingReminder("surveillance_audit_reminder_fixed", req.body['toWhom']);
            result = await QueryExistingReminder("surveillance_audit_reminder_intervals", req.body['toWhom']);
            if (result.length == 0)
            {
                sql.query("INSERT INTO surveillance_audit_reminder_intervals VALUES ('" 
                + req.body['userid'] + "', '" 
                + req.body['dateToEnterForInterval'] + "', '" 
                + req.body['timeToEnterForInterval'] + "', '" 
                + req.body['intervalWeeks'] + "', '" 
                + req.body['intervalMonths'] + "', '" 
                + req.body['intervalDays'] + "', '" 
                + req.body['intervalHours'] + "', '" 
                + req.body['intervalMinutes'] + "', '" 
                + req.body['intervalSeconds'] + "', '" 
                + req.body['checkIncludeTimeIntervalBased'] + "', '" 
                + req.body['toWhom'] + "', '" 
                + req.body['accreditationBoardEmailId'] + "')", async function (err, recordset) {
                    sql.end();
                    if (err)
                    {
                        console.log(err);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        res.send("Reminder Settings Added Successfully");
                    }
                });
            }
            else if (result.length > 0)
            {
                sql.query("UPDATE surveillance_audit_reminder_intervals SET user_id = '" 
                + req.body['userid'] + "', date_to_implement_from = '" 
                + req.body['dateToEnterForInterval'] + "', time_to_implement_from = '" 
                + req.body['timeToEnterForInterval'] + "', interval_weeks = '" 
                + req.body['intervalWeeks'] + "', interval_months = '" 
                + req.body['intervalMonths'] + "', interval_days = '" 
                + req.body['intervalDays'] + "', interval_hours = '" 
                + req.body['intervalHours'] + "', interval_minutes = '" 
                + req.body['intervalMinutes'] + "', interval_seconds = '" 
                + req.body['intervalSeconds'] + "', include_time = '" 
                + req.body['checkIncludeTimeIntervalBased'] + "', to_whom = '" 
                + req.body['toWhom'] + "', accreditation_board_email = '" 
                + req.body['accreditationBoardEmailId'] + "' WHERE user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
                    if (err)
                    {
                        console.log(err);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        res.send("Reminder Settings Added Successfully");
                    }
                });
            }
        }
        else if (req.body['checkDoFixedBased'] == true)
        {
            var result = await QueryExistingReminder("surveillance_audit_reminder_intervals", req.body['toWhom']);
            if (result.length > 0)
                await DeleteExistingReminder("surveillance_audit_reminder_intervals", req.body['toWhom']);
            result = await QueryExistingReminder("surveillance_audit_reminder_fixed", req.body['toWhom']);
            if (result.length > 0)
            {
                sql.query("UPDATE surveillance_audit_reminder_fixed SET user_id = '" 
                + req.body['userid'] + "', date_to_implement_from = '" 
                + req.body['dateToEnterForFixed'] + "', time_to_implement_from = '" 
                + req.body['timeToEnterForFixed'] + "', on_every_date_day = '" 
                + req.body['onEveryDate'] + "', on_every_date_month = '" 
                + req.body['onEveryMonth'] + "', on_every_day_of_week = '" 
                + (req.body['onEveryDay'] == "On Every [Select Day]" ? "" : req.body['onEveryDay']) + "', on_every_hour = '" 
                + req.body['onEveryHour'] + "', on_every_minute = '" 
                + req.body['onEveryMinute'] + "', on_every_second = '" 
                + req.body['onEverySecond'] + "', include_time = '" 
                + req.body['checkIncludeTimeFixedBased'] + "', execution_done = '" 
                + "No" + "', to_whom = '" 
                + req.body['toWhom'] + "', accreditation_board_email = '" 
                + req.body['accreditationBoardEmailId'] + "'", async function (err, recordset) {
                    if (err)
                    {
                        console.log(err);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        res.send("Reminder Settings Added Successfully");
                    }
                });
            }
            else if (result.length == 0)
            {
                sql.query("INSERT INTO surveillance_audit_reminder_fixed VALUES ('" 
                + req.body['userid'] + "', '" 
                + req.body['dateToEnterForFixed'] + "', '" 
                + req.body['timeToEnterForFixed'] + "', '" 
                + req.body['onEveryDate'] + "', '" 
                + req.body['onEveryMonth'] + "', '" 
                + (req.body['onEveryDay'] == "On Every [Select Day]" ? "" : req.body['onEveryDay']) + "', '" 
                + req.body['onEveryHour'] + "', '" 
                + req.body['onEveryMinute'] + "', '" 
                + req.body['onEverySecond'] + "', '" 
                + req.body['checkIncludeTimeFixedBased'] + "', '" 
                + "No" + "', '" 
                + req.body['toWhom'] + "', '" 
                + req.body['accreditationBoardEmailId'] + "')", async function (err, recordset) {
                    if (err)
                    {
                        console.log(err);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        res.send("Reminder Settings Added Successfully");
                    }
                });
            }
        }
    });
});
app.post('/aws_rds__add_update_accreditation_board_credentials', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    const QueryExistingCredentials = () =>{
        return new Promise((resolve, reject)=>{
            sql.query("SELECT * FROM accreditation_board_credentials WHERE user_id = '" + req.body['userid'] + "'",  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    const UpdateWorkFlowSettings = () =>{
        return new Promise((resolve, reject)=>{
            sql.query("UPDATE registered_users SET filter_workflow = '" + req.body['followWorkflow'] + "' WHERE id = '" + req.body['userid'] + "'",  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        var result = await QueryExistingCredentials();
        if (result.length == 0)
        {
            sql.query("INSERT INTO accreditation_board_credentials VALUES ('" 
            + req.body['userid'] + "', '" 
            + req.body['username'] + "', '" 
            + req.body['password'] + "', '" 
            + req.body['password'] + "')", async function (err, recordset) {
                if (err)
                {
                    sql.end();
                    console.log(err);
                    res.send('Something went wrong. Please submit again.')
                }
                else 
                {
                    await UpdateWorkFlowSettings();
                    sql.end();
                    res.send("Saved Successfully");
                }
            });
        }
        else if (result.length > 0)
        {
            sql.query("UPDATE accreditation_board_credentials SET user_id = '" 
            + req.body['userid'] + "', username = '" 
            + req.body['username'] + "', default_password = '" 
            + req.body['password'] + "', password = '" 
            + req.body['password'] + "'", async function (err, recordset) {
                if (err)
                {
                    sql.end();
                    console.log(err);
                    res.send('Something went wrong. Please submit again.')
                }
                else 
                {
                    await UpdateWorkFlowSettings();
                    sql.end();
                    res.send("Saved Successfully");
                }
            });
        }
    });
});
app.post('/aws_rds__update_inspection_checklist', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE inspection_checklist_templates SET user_id = '" 
        + req.body['userid'] + "', checklist_id = '" 
        + req.body['checklistid'] + "', general_fields = '" 
        + req.body['generalfields'] + "', template_desc = '" 
        + req.body['templateDescription'] + "', template_name = '" 
        + req.body['templateName'] + "', min_score = '" 
        + req.body['min_score'] + "', max_score = '" 
        + req.body['max_score'] + "', statuses = '" 
        + req.body['statuses'] + "' WHERE checklist_id = '" + req.body['checklistid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                const ftpClient = new Ftp();
                const DeleteFile = (path) => {
                    return new Promise((resolve, reject)=>{
                        ftpClient.delete(path, () => {
                            return resolve("deleted " + path)
                        });
                    });
                };
                ftpClient.on( 'ready', async function() {
                    await DeleteFile("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/inspection_templates/" + req.body['checklistid'] + "/template.xlsx")
                    await DeleteFile("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/inspection_templates/" + req.body['checklistid'] + "/template_info.xlsx")
                    res.send("Inspection Checklist Template Data updated successfully");
                });
                
                ftpClient.connect( {
                    'host': 'ftp.cwac.in',
                    'user': 'cwacin',
                    'password': '$Rv01111996'
                } );
            }
        });
    });
});
app.post('/aws_rds__add_inspection_checklist', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO inspection_checklist_templates VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['checklistid'] + "', '" 
        + req.body['generalfields'] + "', '" 
        + req.body['templateDescription'] + "', '" 
        + req.body['templateName'] + "', '" 
        + req.body['min_score'] + "', '" 
        + req.body['max_score'] + "', '" 
        + req.body['statuses'] + "')", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Inspection Checklist Template Data added successfully");
            }
        });
    });
});
app.post('/offline__add_stage2_audit_team_in_library', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO stage2_audit_teams VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['Member Email'] + "', '" 
        + req.body['Member Name'] + "', '" 
        + req.body['Member PhoneNumber'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Stage 2 Audit Team Added Successfully");
            }
        });
    });
});
app.post('/aws_rds__add_stage2_audit_team_in_library', async (req, res) => {
    try
    {
    var serviceAccount = require('./admin_group_chat.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
            authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
            authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
        });
    }
    var groupChatAuthenticationData = await admin.auth().createUser(
        {
        email: req.body['Member Email'],
        emailVerified: true,
        password: "123456",
        displayName: req.body['Member Name'],
        phoneNumber: "+91" + req.body['Member PhoneNumber'],
        disabled: false,
        }
    );
    client.delete();
    // serviceAccount = require('./admin_personal_chat.json');
    // if (!admin.apps.length) {
    //     client = admin.initializeApp({
    //         credential: admin.credential.cert(serviceAccount),
    //         databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
    //         authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
    //     });
    // }else {
    //     client = admin.app(); // if already initialized, use that one
    //     client.delete();
    //     client = admin.initializeApp({
    //         credential: admin.credential.cert(serviceAccount),
    //         databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
    //         authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
    //     });
    // }
    // var personalChatAuthenticationData = await admin.auth().createUser(
    //     {
    //         email: req.body['Member Email'],
    //         emailVerified: true,
    //         password: "123456",
    //         displayName: req.body['Member Name'],
    //         phoneNumber: "+91" + req.body['Member PhoneNumber'],
    //         disabled: false,
    //     }
    // );
    // client.delete();
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO stage2_audit_teams VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['Member Email'] + "', '" 
        + req.body['Member Name'] + "', '" 
        + req.body['Member PhoneNumber'] + "', '" 
        + "" + "', '" 
        + groupChatAuthenticationData.uid + "', '" 
        + "" + "')", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Stage 2 Audit Team Added Successfully");
            }
        });
    });
    }
    catch(error)
    {
        console.log(error);
        if (client) client.delete();
        if (sql) sql.end();
        //res.send("Something Went wrong please try again");
    }
});
app.post('/offline__add_employee_in_library', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO employees VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['Member Designation'] + "', '" 
        + req.body['Member Email'] + "', '" 
        + req.body['Member Name'] + "', '" 
        + req.body['Member PhoneNumber'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                res.send("Employee Added Successfully");
            }
        });
    });
});
app.post('/aws_rds__add_employee_in_library', async (req, res) => {
    try
    {
        var serviceAccount = require('./admin_group_chat.json');
        var client;
        if (!admin.apps.length) {
            client = admin.initializeApp({
                credential: admin.credential.cert(serviceAccount),
                databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
                authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
            });
        }else {
            client = admin.app(); // if already initialized, use that one
            client.delete();
            client = admin.initializeApp({
                credential: admin.credential.cert(serviceAccount),
                databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
                authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
            });
        }
        var groupChatAuthenticationData = await admin.auth().createUser(
            {
            email: req.body['Member Email'],
            emailVerified: true,
            password: "123456",
            displayName: req.body['Member Name'],
            phoneNumber: "+91" + req.body['Member PhoneNumber'],
            disabled: false,
            }
        );
        client.delete();
        // serviceAccount = require('./admin_personal_chat.json');
        // if (!admin.apps.length) {
        //     client = admin.initializeApp({
        //         credential: admin.credential.cert(serviceAccount),
        //         databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
        //         authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
        //     });
        // }else {
        //     client = admin.app(); // if already initialized, use that one
        //     client.delete();
        //     client = admin.initializeApp({
        //         credential: admin.credential.cert(serviceAccount),
        //         databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
        //         authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
        //     });
        // }
        // var personalChatAuthenticationData = await admin.auth().createUser(
        //     {
        //         email: req.body['Member Email'],
        //         emailVerified: true,
        //         password: "123456",
        //         displayName: req.body['Member Name'],
        //         phoneNumber: "+91" + req.body['Member PhoneNumber'],
        //         disabled: false,
        //     }
        // );
        // client.delete();
        var mysql = require("mysql");
        // const fs = require('fs');
        // var info = {};
        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
        // allFileContents.split(/\r?\n/).forEach(line =>  {        
        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
        // });
        var sql = mysql.createConnection({
            host     : DBENDPOINT,
            user     : "admin",
            password : "qwertyui",
            port     : "3306",
            database : "mydb"
        });
        sql.connect(function (err) {
            if (err) console.log(err);
            else console.log('connected');
            //var request = new sql.Request();
            sql.query("INSERT INTO employees VALUES ('" 
            + req.body['userid'] + "', '" 
            + req.body['timestamp'] + "', '" 
            + req.body['Member Designation'] + "', '" 
            + req.body['Member Email'] + "', '" 
            + req.body['Member Name'] + "', '" 
            + req.body['Member PhoneNumber'] + "', '" 
            + "" + "', '" 
            + groupChatAuthenticationData.uid + "', '" 
            + "" + "')", async function (err, recordset) {
                sql.end();
                if (err)
                {
                    console.log(err);
                    res.send('Something went wrong. Please submit again.')
                }
                else 
                {
                    res.send("Employee Added Successfully");
                }
            });
        });
    }
    catch(error)
    {
        console.log(error);
        if (client) client.delete();
        if (sql) sql.end();
        //res.send("Something Went wrong please try again");
    }
});
app.post('/aws_rds__email_paid_invoices', async (req, res) => {
    if (req.body['data'].length == 0)
    {
        res.send("No clients to email!");
        return;
    }
    var id = Date.now();
    var todayDate = new Date();
    var dd = String(todayDate.getDate()).padStart(2, '0');
    var mm = String(todayDate.getMonth() + 1).padStart(2, '0'); //January is 0!
    var yyyy = todayDate.getFullYear();
    var hh = String(todayDate.getHours()).padStart(2, '0');
    var mins = String(todayDate.getMinutes()).padStart(2, '0');
    var ss = String(todayDate.getSeconds()).padStart(2, '0');
    var NoToMonth = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    const path = require('path');
    const fs = require('fs');
    const templateFile = fs.readFileSync(path.resolve(__dirname, 'autoditor-sales-invoice-template-paid.docx'), 'binary');
    const PizZip = require('pizzip');
    const Docxtemplater = require('docxtemplater');
    const fs2 = require('fs');
    const Ftp = require('ftp');
    const http = require('https');
    const { JavaCaller } = require("java-caller");
    const ftpClient = new Ftp();
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        const QueryWithSQL = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query,  (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
    const createTransporter = async () => {
        const oauth2Client = new OAuth2(
            CLIENT_ID,
            CLIENT_SECRET,
            "https://developers.google.com/oauthplayground"
        );
        oauth2Client.setCredentials({
            refresh_token: REFRESH_TOKEN
        });
        const accessToken = await new Promise((resolve, reject) => {
            oauth2Client.getAccessToken((err, token) => {
            if (err) {
                //res.send(err);
                console.log(err);
            }
            resolve(token);
            });
        });
        const transporter = nodemailer.createTransport({
            service: "gmail",
            auth: {
            type: "OAuth2",
            user: EMAIL,
            accessToken,
            clientId: CLIENT_ID,
            clientSecret: CLIENT_SECRET,
            refreshToken: REFRESH_TOKEN
            }
        });
        return transporter;
    };
    const sendEmail = async (emailOptions) => {
        let emailTransporter = await createTransporter();
        await emailTransporter.sendMail(emailOptions);
    };
    ftpClient.on( 'ready', async function() 
    {  
        const UploadFile = (fileObj, id) => {
            return new Promise((resolve, reject)=>{
                ftpClient.put(fileObj, "domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_software/invoices/" + id + "/paid_invoice.pdf", async function( err, list ) {
                    if ( err ) reject(err);
                    else resolve("done");
                });
            });
        };
        for (var intIdx = 0; intIdx < req.body['data'].length; intIdx++)
        {
            if (req.body['data'][intIdx]['invoice_status'].includes("unpaid and unpaid invoice emailed, expiry: "))
            {
                var date = req.body['data'][intIdx]['invoice_status'].split("unpaid and unpaid invoice emailed, expiry: ")[1].trim();
                date = date.split("-")[2] + "-" + monthToItsNo[date.split("-")[1]] + "-" + date.split("-")[0];
                var expireDate = new Date(date);
                if (todayDate.getTime() <= expireDate.getTime())
                {
                    todayDate = new Date(date);
                    dd = String(todayDate.getDate()).padStart(2, '0');
                    mm = String(todayDate.getMonth() + 1).padStart(2, '0'); //January is 0!
                    yyyy = todayDate.getFullYear();
                }
                // hh = String(todayDate.getHours()).padStart(2, '0');
                // mins = String(todayDate.getMinutes()).padStart(2, '0');
                // ss = String(todayDate.getSeconds()).padStart(2, '0');
            }
            const zip = new PizZip(templateFile);
            var expiryDateObj = null;
            if (req.body['data'][intIdx]['plan_name'] == 'Autoditor for 1 month')
            {
                expiryDateObj = new Date(parseInt(todayDate.getTime()) + parseInt(1000 * 60 * 60 * 24 * 31));
            }
            else if (req.body['data'][intIdx]['plan_name'] == 'Autoditor for 3 months')
            {
                expiryDateObj = new Date(parseInt(todayDate.getTime()) + parseInt(1000 * 60 * 60 * 24 * 92));
            }
            else if (req.body['data'][intIdx]['plan_name'] == 'Autoditor for 6 months')
            {
                expiryDateObj = new Date(parseInt(todayDate.getTime()) + parseInt(1000 * 60 * 60 * 24 * 183));
            }
            else if (req.body['data'][intIdx]['plan_name'] == 'Autoditor for 1 year')
            {
                expiryDateObj = new Date(parseInt(parseInt(yyyy)) + 1 + "-" +  mm + "-" + dd);
            }
            var ndd = String(expiryDateObj.getDate()).padStart(2, '0');
            var nmm = String(expiryDateObj.getMonth() + 1).padStart(2, '0'); //January is 0!
            var nyyyy = expiryDateObj.getFullYear();
            //res.send("Stage 1 Audit Team Added Successfully");
            var gstPrice = (parseInt(req.body['data'][intIdx]['plan_price']) * 0.18).toFixed(0);
            try {
                // Attempt to read all the templated tags
                let outputDocument = new Docxtemplater(zip);
                const dataToAdd = {
                    billDesc: {
                        "productName": req.body['data'][intIdx]['plan_name'],
                        "totalAmount": req.body['data'][intIdx]['plan_price'],
                    },
                    'customer_name': req.body['data'][intIdx]['company_name'],
                    'street_address': req.body['data'][intIdx]['company_address_line_1'] + ", " + req.body['data'][intIdx]['company_address_line_2'],
                    'city_state': req.body['data'][intIdx]['town_or_city'] + ", " + req.body['data'][intIdx]['state'],
                    'zip_code': req.body['data'][intIdx]['pincode'],
                    'ph_no': req.body['data'][intIdx]['phno'],
                    'sub_total': "₹" + req.body['data'][intIdx]['plan_price'],
                    'tax': "₹" + gstPrice,
                    'total': "₹" + parseInt(parseInt(req.body['data'][intIdx]['plan_price']) + parseInt(gstPrice)),
                    'date': dd + "-" +  NoToMonth[parseInt(mm) - 1] + "-" + yyyy,
                    'invoice_no': "CWACINV" + req.body['data'][intIdx]['customer_id'],
                    'customer_email': req.body['data'][intIdx]['company_email'],
                    "start_date": dd + "-" +  NoToMonth[parseInt(mm) - 1] + "-" + yyyy,
                    "expire_date": ndd + "-" +  NoToMonth[parseInt(nmm) - 1] + "-" + nyyyy
                };
                // Set the data we wish to add to the document
                outputDocument.setData(dataToAdd);
                try {
                    // Attempt to render the document (Add data to the template)
                    outputDocument.render()
                    let outputDocumentBuffer = outputDocument.getZip().generate({ type: 'nodebuffer' });
                    fs.writeFileSync(path.resolve(__dirname, './invoice_temp_directory/' + req.body['data'][intIdx]['customer_id'] + '__paid_invoice.docx'), outputDocumentBuffer);
                    const java = new JavaCaller({
                        classPath: 'AuditPlatformProject.jar', // CLASSPATH referencing the package embedded jar files
                        mainClass: 'auditplatformproject.ConvertWordToPdf',// Main class to call, must be available from CLASSPATH,
                        rootPath: __dirname,
                    });
                    const { status, stdout, stderr } = await java.run([JSON.stringify([req.body['data'][intIdx]['customer_id'] + "__paid_invoice.docx"])]);
                    var dataPDF = fs.readFileSync('./invoice_temp_directory/' + req.body['data'][intIdx]['customer_id'] + '__paid_invoice.pdf');
                    await UploadFile(dataPDF, req.body['data'][intIdx]['customer_id']);
                    var count = await QueryWithSQL("select count(*) from registered_users");
                    count = count[0]['count(*)'];
                    var message = "";
                    var username = "user" + dd + mm + yyyy + hh + mins + ss + count;
                    var password = "password" + dd + mm + yyyy + hh + mins + ss + count;
                    if (req.body['data'][intIdx]['invoice_status'].includes("unpaid and unpaid invoice emailed, expiry: "))
                    {
                        message = "Sir / Madam,\nPFA of your paid invoice.\nYour Subscription starts at " + dd + "-" +  NoToMonth[parseInt(mm) - 1] + "-" + yyyy 
                        + "\nYour Subscription expires at " + ndd + "-" +  NoToMonth[parseInt(nmm) - 1] + "-" + nyyyy;
                    }
                    else
                    {
                        message = "Sir / Madam,\nPFA of your paid invoice and App.\nYour Subscription starts at " + dd + "-" +  NoToMonth[parseInt(mm) - 1] + "-" + yyyy 
                        + "\nYour Subscription expires at " + ndd + "-" +  NoToMonth[parseInt(nmm) - 1] + "-" + nyyyy
                        + "\nYour Login Username: " + username
                        + "\nYour Login Password: " + password
                        + ".\nClick the following link to download the app (if not downloaded before) -:\n<a href = \"https://cwac.in/softwares_apps/quest_global_mcs/audit_software/autoditor.apk\" >Autoditor App</a>"
                    }
                    message = message.replaceAll("\n", "</p><p>");
                    message = "<p>" + message + "</p>";
                    await sendEmail({
                        subject: "Autoditor Subscription Paid Invoice",
                        //text: "Dear sir,\nYou have completed your Initial Certification Process on " + "11-Oct-2022" + ". Please apply for initial certification within " + "346" + " days.",
                        to: req.body['data'][intIdx]['company_email'],
                        from: "Sales, CWAC Technologies Private Limited <sales@cwac.in>",
                        //html: '<body id="tinymce" class="mce-content-body " data-id="rcmfd_signature" contenteditable="true" style="overflow-y: hidden; padding-left: 1px; padding-right: 1px; min-height: 0px;" data-mce-style="overflow-y: hidden; padding-left: 1px; padding-right: 1px; min-height: 0px;"><p>' + message + '</p><p>--</p><p><span style="font-family: arial, helvetica, sans-serif; color: #e03e2d; font-size: 10pt;" data-mce-style="font-family: arial, helvetica, sans-serif; color: #e03e2d; font-size: 10pt;"><strong>Thanks &amp; Regards</strong></span></p><p><span style="font-family: arial, helvetica, sans-serif; color: #e03e2d; font-size: 10pt;" data-mce-style="font-family: arial, helvetica, sans-serif; color: #e03e2d; font-size: 10pt;"><strong>Rohan Vishwakarma</strong></span></p><p><span style="font-family: arial, helvetica, sans-serif; font-size: 10pt;" data-mce-style="font-family: arial, helvetica, sans-serif; font-size: 10pt;"><em>Director</em></span></p><p><span style="font-family: arial, helvetica, sans-serif; font-size: 10pt; color: #000000;" data-mce-style="font-family: arial, helvetica, sans-serif; font-size: 10pt; color: #000000;">CWAC Technologies Pvt. Ltd.</span></p><p><span style="font-family: arial, helvetica, sans-serif; font-size: 10pt; color: #000000;" data-mce-style="font-family: arial, helvetica, sans-serif; font-size: 10pt; color: #000000;">Company Which Accelerates Companies</span></p><p><span style="font-family: arial, helvetica, sans-serif; font-size: 10pt;" data-mce-style="font-family: arial, helvetica, sans-serif; font-size: 10pt;"><span style="color: #e03e2d;" data-mce-style="color: #e03e2d;"><strong>Mobile:</strong></span>&nbsp;+919423043996</span></p><p><span style="font-family: arial, helvetica, sans-serif; font-size: 10pt;" data-mce-style="font-family: arial, helvetica, sans-serif; font-size: 10pt;"><span style="color: #e03e2d;" data-mce-style="color: #e03e2d;"><strong>Email:</strong></span>&nbsp;<a href="mailto:services@cwac.in" data-mce-href="mailto:services@cwac.in">services@cwac.in</a></span></p><p><span style="font-family: arial, helvetica, sans-serif; font-size: 12pt;" data-mce-style="font-family: arial, helvetica, sans-serif; font-size: 12pt;"><img src="https://cwac.in/softwares_apps/quest_global_mcs/audit_software/company_signature_logo.png" width="115" height="50"></span></p></body>',
                        html: '<body id="tinymce" class="mce-content-body " data-id="rcmfd_signature" contenteditable="true" style="overflow-y: hidden; padding-left: 1px; padding-right: 1px; min-height: 0px;" data-mce-style="overflow-y: hidden; padding-left: 1px; padding-right: 1px; min-height: 0px;"><p>' + message + '</p><p>--</p><p><span style="font-family: arial, helvetica, sans-serif; color: #e03e2d; font-size: 10pt;" data-mce-style="font-family: arial, helvetica, sans-serif; color: #e03e2d; font-size: 10pt;"><strong>Thanks &amp; Regards</strong></span></p><p><span style="font-family: arial, helvetica, sans-serif; font-size: 10pt; color: #000000;" data-mce-style="font-family: arial, helvetica, sans-serif; font-size: 10pt; color: #000000;">CWAC Technologies Pvt. Ltd.</span></p><p><span style="font-family: arial, helvetica, sans-serif; font-size: 10pt; color: #000000;" data-mce-style="font-family: arial, helvetica, sans-serif; font-size: 10pt; color: #000000;">Company Which Accelerates Companies</span></p><p><span style="font-family: arial, helvetica, sans-serif; font-size: 10pt;" data-mce-style="font-family: arial, helvetica, sans-serif; font-size: 10pt;"><span style="color: #e03e2d;" data-mce-style="color: #e03e2d;"><strong>Mobile:</strong></span>&nbsp;+919423043996</span></p><p><span style="font-family: arial, helvetica, sans-serif; font-size: 10pt;" data-mce-style="font-family: arial, helvetica, sans-serif; font-size: 10pt;"><span style="color: #e03e2d;" data-mce-style="color: #e03e2d;"><strong>Email:</strong></span>&nbsp;<a href="mailto:sales@cwac.in" data-mce-href="mailto:sales@cwac.in">sales@cwac.in</a></span></p><p><span style="font-family: arial, helvetica, sans-serif; font-size: 12pt;" data-mce-style="font-family: arial, helvetica, sans-serif; font-size: 12pt;"><img src="https://cwac.in/softwares_apps/quest_global_mcs/audit_software/company_signature_logo.png" width="115" height="50"></span></p></body>',
                        attachments: [
                            {   
                                filename: "paid_invoice.pdf",
                                path: "https://cwac.in/softwares_apps/quest_global_mcs/audit_software/invoices/" + req.body['data'][intIdx]['customer_id'] + "/paid_invoice.pdf"
                            },
                            // {   
                            //     filename: "Autoditor.apk",
                            //     path: "https://cwac.in/softwares_apps/quest_global_mcs/audit_software/autoditor.apk"
                            // }
                        ]
                    });
                    await QueryWithSQL("UPDATE paid_plan_clients_info SET invoice_status = '" + "subscription start date: " + dd + "-" +  NoToMonth[parseInt(mm) - 1] + "-" + yyyy + ", subscription expiry date: " + ndd + "-" +  NoToMonth[parseInt(nmm) - 1] + "-" + nyyyy + "' WHERE customer_id = '" + req.body['data'][intIdx]['customer_id'] + "' AND invoice_status LIKE '%unpaid and unpaid invoice emailed%'");
                    if (req.body['data'][intIdx]['invoice_status'].includes("unpaid and unpaid invoice emailed, expiry: "))
                    {
                        await QueryWithSQL("UPDATE registered_users SET subs_expiry_date = '" + ndd + "-" + nmm + "-" + nyyyy + "' WHERE id = '" + req.body['data'][intIdx]['customer_id'] + "'");
                    }
                    else 
                    {
                        await QueryWithSQL("INSERT INTO registered_users VALUES('" + req.body['data'][intIdx]['customer_id'] + "', '" + username + "', '" + username + "', '" + password + "', '" + password + "', '" + username + "', '" + req.body['data'][intIdx]['company_name'] + "', 'Yes', '" + ndd + "-" + nmm + "-" + nyyyy + "', '', '', '')");
                    }
                }
                catch (error) {
                    sql.end();
                    console.error(`ERROR Filling out Template:`);
                    console.error(error)
                    //res.send("Something went wrong. Please try again");
                }
            } catch(error) {
                sql.end();
                console.error(`ERROR Loading Template:`);
                console.error(error);
                //res.send("Something went wrong. Please try again");
            }
        }
        ftpClient.end();
        sql.end();
        res.send("done");
    });
    });
});
app.post('/aws_rds__email_unpaid_invoices', async (req, res) => {
    if (req.body['data'].length == 0)
    {
        res.send("No clients to email!");
        return;
    }
    var initTodayDate = new Date();
    var idd = String(initTodayDate.getDate()).padStart(2, '0');
    var imm = String(initTodayDate.getMonth() + 1).padStart(2, '0'); //January is 0!
    var iyyyy = initTodayDate.getFullYear();
    const fs = require('fs');
    const Ftp = require('ftp');
    const path = require('path');
    console.log("__dirname: ", __dirname);
    const mainDirPath = path.join(__dirname, '/');
    const dirPath = path.join(__dirname, '/invoice_temp_directory/');
    const ftpClient = new Ftp();
    const timestamp = req.body['clientid'];
    var dirName = timestamp + "_" + req.body['timestamp'];
    if (req.body['loadExisting'] == 'true') dirName = timestamp + "_" + req.body['timestamp'] + "__" + req.body['revisionNo'];
    // if (!fs.existsSync(dirPath + dirName)) {
    //   fs.mkdir(dirPath + dirName, {recursive: true}, err => {});
    // }
    // if (!fs.existsSync(newDirPath + timestamp)) {
    //   fs.mkdir(newDirPath + timestamp, {recursive: true}, err => {});
    // }
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        const QueryWithSQL = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query,  (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        ftpClient.on('ready', function () {
        ftpClient.list(
            'domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_software/invoices/',
            false,
            async function (err, list) {
            var urlList = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++) {
                if (list[intIdx].name != '.' && list[intIdx].name != '..')
                urlList.push({
                    'url': 'https://cwac.in/softwares_apps/quest_global_mcs/audit_software/invoices/' +
                    list[intIdx].name + '/unpaid_invoice.docx', 'id': list[intIdx].name
                    });
            }
            var idx = 0;
            var request = require('request');
            var download = function (url, dest, callback) {
                request
                .get(url)
                .on('error', function (err) {
                    console.log(err);
                })
                .pipe(fs.createWriteStream(dest))
                .on('close', callback);
            };
    
            urlList.forEach(function (str) {
                var filename =
                dirPath + '/' + str['id'] + "__unpaid_invoice.docx";
                console.log('Downloading ' + filename);
                download(str['url'], filename, async function () {
                    console.log('Finished Downloading' + filename);
                    idx++;
                    if (idx == urlList.length)
                    {
                    console.log("downloaded")
                    //res.send({"status": "downloaded"});
                    var fileNameList = urlList.map(ele => ele['id'] + "__unpaid_invoice.docx");
                    //var fileNoExtensionList = urlList.map(ele => ele['id'] + "__unpaid_invoice");
                    const { JavaCaller } = require("java-caller");
                    const java = new JavaCaller({
                        classPath: 'AuditPlatformProject.jar', // CLASSPATH referencing the package embedded jar files
                        mainClass: 'auditplatformproject.ConvertWordToPdf',// Main class to call, must be available from CLASSPATH,
                        rootPath: __dirname,
                    });
                    const { status, stdout, stderr } = await java.run([JSON.stringify(fileNameList)]);
                    console.log(stdout);
                    const UploadFile = (fileObj, id) => {
                        return new Promise((resolve, reject)=>{
                            ftpClient.put(fileObj, "domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_software/invoices/" + id + "/unpaid_invoice.pdf", async function( err, list ) {
                                if ( err ) reject(err);
                                else resolve("done");
                            });
                        });
                    };
                    const createTransporter = async () => {
                        const oauth2Client = new OAuth2(
                            CLIENT_ID,
                            CLIENT_SECRET,
                            "https://developers.google.com/oauthplayground"
                        );
                        oauth2Client.setCredentials({
                            refresh_token: REFRESH_TOKEN
                        });
                        const accessToken = await new Promise((resolve, reject) => {
                            oauth2Client.getAccessToken((err, token) => {
                            if (err) {
                                //res.send(err);
                                console.log(err);
                            }
                            resolve(token);
                            });
                        });
                        const transporter = nodemailer.createTransport({
                            service: "gmail",
                            auth: {
                            type: "OAuth2",
                            user: EMAIL,
                            accessToken,
                            clientId: CLIENT_ID,
                            clientSecret: CLIENT_SECRET,
                            refreshToken: REFRESH_TOKEN
                            }
                        });
                        return transporter;
                    };
                    const sendEmail = async (emailOptions) => {
                        let emailTransporter = await createTransporter();
                        await emailTransporter.sendMail(emailOptions);
                    };
                    for (var intIdx = 0; intIdx < urlList.length; intIdx++)
                    {
                        const fs = require('fs');
                        var dataPDF = fs.readFileSync('./invoice_temp_directory/' + urlList[intIdx]['id'] + '__unpaid_invoice.pdf');
                        await UploadFile(dataPDF, urlList[intIdx]['id']);
                    }
                    for (var intIdx = 0; intIdx < req.body['data'].length; intIdx++)
                    {
                        var message = "Sir / Madam,\nPFA of your unpaid invoice";
                        message = message.replaceAll("\n", "</p><p>");
                        message = "<p>" + message + "</p>";
                        await sendEmail({
                            subject: "Autoditor Subscription Payment Invoice",
                            //text: "Dear sir,\nYou have completed your Initial Certification Process on " + "11-Oct-2022" + ". Please apply for initial certification within " + "346" + " days.",
                            to: req.body['data'][intIdx]['company_email'],
                            from: "Sales, CWAC Technologies Private Limited <sales@cwac.in>",
                            html: '<body id="tinymce" class="mce-content-body " data-id="rcmfd_signature" contenteditable="true" style="overflow-y: hidden; padding-left: 1px; padding-right: 1px; min-height: 0px;" data-mce-style="overflow-y: hidden; padding-left: 1px; padding-right: 1px; min-height: 0px;"><p>' + message + '</p><p>--</p><p><span style="font-family: arial, helvetica, sans-serif; color: #e03e2d; font-size: 10pt;" data-mce-style="font-family: arial, helvetica, sans-serif; color: #e03e2d; font-size: 10pt;"><strong>Thanks &amp; Regards</strong></span></p><p><span style="font-family: arial, helvetica, sans-serif; font-size: 10pt; color: #000000;" data-mce-style="font-family: arial, helvetica, sans-serif; font-size: 10pt; color: #000000;">CWAC Technologies Pvt. Ltd.</span></p><p><span style="font-family: arial, helvetica, sans-serif; font-size: 10pt; color: #000000;" data-mce-style="font-family: arial, helvetica, sans-serif; font-size: 10pt; color: #000000;">Company Which Accelerates Companies</span></p><p><span style="font-family: arial, helvetica, sans-serif; font-size: 10pt;" data-mce-style="font-family: arial, helvetica, sans-serif; font-size: 10pt;"><span style="color: #e03e2d;" data-mce-style="color: #e03e2d;"><strong>Mobile:</strong></span>&nbsp;+919423043996</span></p><p><span style="font-family: arial, helvetica, sans-serif; font-size: 10pt;" data-mce-style="font-family: arial, helvetica, sans-serif; font-size: 10pt;"><span style="color: #e03e2d;" data-mce-style="color: #e03e2d;"><strong>Email:</strong></span>&nbsp;<a href="mailto:sales@cwac.in" data-mce-href="mailto:sales@cwac.in">sales@cwac.in</a></span></p><p><span style="font-family: arial, helvetica, sans-serif; font-size: 12pt;" data-mce-style="font-family: arial, helvetica, sans-serif; font-size: 12pt;"><img src="https://cwac.in/softwares_apps/quest_global_mcs/audit_software/company_signature_logo.png" width="115" height="50"></span></p></body>',
                            attachments: [
                                {   
                                    filename: "unpaid_invoice.pdf",
                                    path: "https://cwac.in/softwares_apps/quest_global_mcs/audit_software/invoices/" + req.body['data'][intIdx]['customer_id'] + "/unpaid_invoice.pdf"
                                }
                            ]
                        });
                        if (!req.body['data'][intIdx]['invoice_status'].includes("unpaid and email pending, expiry: "))
                        {
                            await QueryWithSQL("UPDATE paid_plan_clients_info SET invoice_status = '" + "dated: " + idd + "-" + NoToMonth[parseInt(imm) - 1] + "-" + yyyy + ", unpaid and unpaid invoice emailed" + "' WHERE customer_id = '" + req.body['data'][intIdx]['customer_id'] + "' AND invoice_status LIKE '%unpaid and email pending%'");
                        }
                        else 
                        {
                            var expiryDate = req.body['data'][intIdx]['invoice_status'].split("unpaid and email pending, expiry: ")[1].trim();
                            await QueryWithSQL("UPDATE paid_plan_clients_info SET invoice_status = '" + "dated: " + idd + "-" + NoToMonth[parseInt(imm) - 1] + "-" + yyyy + ", unpaid and unpaid invoice emailed, expiry: " + expiryDate + "' WHERE customer_id = '" + req.body['data'][intIdx]['customer_id'] + "' AND invoice_status LIKE '%unpaid and email pending, expiry: %'");
                        }
                    }
                    sql.end();
                    res.send("Work Completed Successfully");
                    }
                });
            });
            }
        );
        });
        ftpClient.connect({
        host: 'ftp.cwac.in',
        user: 'cwacin',
        password: '$Rv01111996',
        });
    });
    //res.send("done");
});
app.post('/update_profile', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        const QueryWithSQL = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query,  (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        if (req.body['oldPassword'] != '' || req.body['newPassword'] != '')
        {
            var result = await QueryWithSQL("SELECT * FROM registered_users WHERE id = '" + req.body['id'] + "'");
            if (req.body['oldPassword'] != result[0]['new_password'])
            {
                res.send("Old Password is incorrect to update with new password. Please try again");
                return;
            }
        }
        if (req.body['name'] != '')
            await QueryWithSQL("UPDATE registered_users SET name = '" + req.body['name'] + "' WHERE id = '" + req.body['id'] + "'");
        if (req.body['companyName'] != '')
            await QueryWithSQL("UPDATE registered_users SET company_name = '" + req.body['companyName'] + "' WHERE id = '" + req.body['id'] + "'");
        if (req.body['username'] != '')
            await QueryWithSQL("UPDATE registered_users SET new_username = '" + req.body['username'] + "' WHERE id = '" + req.body['id'] + "'");
        if (req.body['email'] != '')
            await QueryWithSQL("UPDATE registered_users SET email = '" + req.body['email'] + "' WHERE id = '" + req.body['id'] + "'");
        if (req.body['phoneNo'] != '')
            await QueryWithSQL("UPDATE registered_users SET phone_no = '" + req.body['phoneNo'] + "' WHERE id = '" + req.body['id'] + "'");
        if (req.body['newPassword'] != '')
            await QueryWithSQL("UPDATE registered_users SET new_password = '" + req.body['newPassword'] + "' WHERE id = '" + req.body['id'] + "'");
        res.send("Profile Updated Successfully");
        //var request = new sql.Request();
    });
});
app.post('/add_employee_in_library', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("employees");
    addUser({
        'Member Name': req.body['Member Name'],
        'Member Designation': req.body['Member Designation'],
        'Member Email': req.body['Member Email'],
        'Member PhoneNumber': req.body['Member PhoneNumber'],
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['timestamp']);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else res.send('Employee Added Successfully');
            client.delete();
        })
    }
});
app.post('/add_stage2_audit_team_in_library', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("stage2_audit_teams");
    addUser({
        'Member Name': req.body['Member Name'],
        'Member Email': req.body['Member Email'],
        'Member PhoneNumber': req.body['Member PhoneNumber'],
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['timestamp']);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else res.send('Stage 2 Audit Team Added Successfully');
            client.delete();
        })
    }
});
app.post('/downloadcustomerapplicationfile', async (req, res) => {
    
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
        //ftpClient.downloadTo(req.body.filename, "/init_certification_client_application/" + req.body.timestamp + "/" + req.body.filename)
        ftpClient.get("/init_certification_client_application/" + req.body.timestamp + "/" + req.body.filename, function(err, stream) {
            if (err) throw err;
            var ext = req.body.extensions.replace("\\n", '');
            ext = req.body.filename.slice(0, -1);
            stream.once('close', function() { ftpClient.end(); });
            stream.pipe(fs.createWriteStream(ext));
            console.log("Completed!!!");
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
   
});
app.post('/offline__fetch_employee_library', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        var query = "SELECT * FROM employees WHERE user_id = '" + req.body['userid'] + "' ORDER BY [Member Name]";
        if (req.body['request_from'] == "Surveillance Audit Team")
            query = "SELECT * FROM employees WHERE [Member Designation] = 'Surveillance Auditor' AND user_id = '" + req.body['userid'] + "' ORDER BY [Member Name]";
        if (req.body['request_from'] == "Recertification Audit Team")
            query = "SELECT * FROM employees WHERE [Member Designation] = 'Recertification Auditor' AND user_id = '" + req.body['userid'] + "' ORDER BY [Member Name]";
        request.query(query, function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset['recordsets'][0].map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['employee_id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/aws_rds__fetch_employee_library', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        const QueryABFilter = (queryForFilter) => {
            return new Promise((resolve, reject)=>{
                sql.query(queryForFilter, (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        //var request = new sql.Request();
        var queryForFilter = "SELECT filter_value FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Employee Master' AND table_type = 'Main Table'";
        var query = "SELECT * FROM employees WHERE user_id = '" + req.body['userid'] + "' ORDER BY `Member Name`";
        if (req.body['request_from'] == "Surveillance Audit Team")
        {
            query = "SELECT * FROM employees WHERE `Member Designation` = 'Surveillance Auditor' AND user_id = '" + req.body['userid'] + "' ORDER BY `Member Name`";
            queryForFilter = "SELECT filter_value FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Assign Surveillance Audit Team' AND table_type = 'Logs'";
        }
        if (req.body['request_from'] == "Recertification Audit Team")
            query = "SELECT * FROM employees WHERE `Member Designation` = 'Recertification Auditor' AND user_id = '" + req.body['userid'] + "' ORDER BY `Member Name`";
        sql.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset.map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['employee_id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            if (req.body['role'] == 'Accreditation Board')
            {
                var queryData = await QueryABFilter(queryForFilter);
                queryData = JSON.parse(queryData[0]['filter_value']);
                //console.log(queryData)
                resRecordSet = resRecordSet.filter(ele => {
                    var isMatching = true;
                    for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                    {
                        if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                        {
                            isMatching = false;
                            break;
                        }
                    }
                    if (isMatching) return ele;
                    //if (ele)
                })
            }
            sql.end();
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/offline__fetch_stage1_audit_team', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM stage1_audit_teams WHERE user_id = '" + req.body['userid'] + "' ORDER BY [Member Name]", function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset['recordsets'][0];
            resRecordSet = resRecordSet.map(ele => ele['Member Name']);
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/aws_rds__fetch_stage1_audit_team', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM stage1_audit_teams WHERE user_id = '" + req.body['userid'] + "' ORDER BY `Member Name`", function (err, recordset) {
            if (err) console.log(err)
            sql.end();
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            //var resRecordSet = recordset;
            //resRecordSet = resRecordSet.map(ele => ele['Member Name']);
            res.send(recordset);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/offline__fetch_stage2_audit_team', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM stage2_audit_teams WHERE user_id = '" + req.body['userid'] + "' ORDER BY [Member Name]", function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset['recordsets'][0].map((record, index) => {
                var newRecord = record;
                //newRecord.timestamp = record['id'];
                //newRecord.selected = false;
                //newRecord.index = index;
                return newRecord;
            });
            res.send(JSON.stringify(resRecordSet));
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/aws_rds__fetch_stage2_audit_team', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM stage2_audit_teams WHERE user_id = '" + req.body['userid'] + "' ORDER BY `Member Name`", function (err, recordset) {
            if (err) console.log(err)
            sql.end();
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            // var resRecordSet = recordset.map((record, index) => {
            //     var newRecord = record;
            //     //newRecord.timestamp = record['id'];
            //     //newRecord.selected = false;
            //     //newRecord.index = index;
            //     return newRecord;
            // });
            res.send(recordset);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/offline__fetch_stage1_audit_team_library', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM stage1_audit_teams WHERE user_id = '" + req.body['userid'] + "' ORDER BY [Member Name]", function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset['recordsets'][0].map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/aws_rds__fetch_stage1_audit_team_library', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM stage1_audit_teams WHERE user_id = '" + req.body['userid'] + "' ORDER BY `Member Name`", async function (err, recordset) {
            if (err) console.log(err)
            const QueryABFilter = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("SELECT filter_value FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Stage 1 Audit Team Master' AND table_type = 'Main Table'",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset.map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            if (req.body['role'] == 'Accreditation Board')
            {
                var queryData = await QueryABFilter();
                queryData = JSON.parse(queryData[0]['filter_value']);
                //console.log(queryData)
                resRecordSet = resRecordSet.filter(ele => {
                    var isMatching = true;
                    for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                    {
                        if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                        {
                            isMatching = false;
                            break;
                        }
                    }
                    if (isMatching) return ele;
                    //if (ele)
                })
            }
            sql.end();
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.get('/aws_rds__fetch_paid_customers', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        //sql.query("select * from paid_plan_clients_info where invoice_status like '%unpaid and email pending%';", async function (err, recordset) {
        sql.query("select * from paid_plan_clients_info;", async function (err, recordset) {
            if (err) console.log(err)
            sql.end();
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            else res.send(recordset);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/aws_rds__fetch_accreditation_board_access', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "'", function (err, recordset) {
            if (err) console.log(err)
            sql.end();
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            // var resRecordSet = recordset.map((record, index) => {
            //     var newRecord = record;
            //     newRecord.timestamp = record['id'];
            //     newRecord.selected = false;
            //     newRecord.index = index;
            //     return newRecord;
            // });
            res.send(recordset);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/aws_rds__fetch_inspection_checklists', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM inspection_checklist_templates", function (err, recordset) {
            if (err) console.log(err)
            sql.end();
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            res.send(recordset);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/offline__fetch_stage2_audit_team_library', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM stage2_audit_teams WHERE user_id = '" + req.body['userid'] + "' ORDER BY [Member Name]", function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset['recordsets'][0].map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/aws_rds__fetch_stage2_audit_team_library', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        const QueryABFilter = () => {
            return new Promise((resolve, reject)=>{
                sql.query("SELECT filter_value FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Stage 2 Audit Team Master' AND table_type = 'Main Table'",  (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        //var request = new sql.Request();
        sql.query("SELECT * FROM stage2_audit_teams WHERE user_id = '" + req.body['userid'] + "' ORDER BY `Member Name`", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset.map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            if (req.body['role'] == 'Accreditation Board')
            {
                var queryData = await QueryABFilter();
                queryData = JSON.parse(queryData[0]['filter_value']);
                //console.log(queryData)
                resRecordSet = resRecordSet.filter(ele => {
                    var isMatching = true;
                    for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                    {
                        if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                        {
                            isMatching = false;
                            break;
                        }
                    }
                    if (isMatching) return ele;
                    //if (ele)
                })
            }
            sql.end();
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/offline__fetch_customer_application', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        var query = "SELECT * FROM Form_Data WHERE user_id = '" + req.body['userid'] + "'";
        if (req.body.request_from == 'Quotation Status' || req.body.request_from == 'HO Activity') 
            query = "SELECT * FROM Form_Data WHERE Approved = 'Yes' AND user_id = '" + req.body['userid'] + "'";
        if (req.body.request_from == "Assign Stage 1 Audit Team")
            query = "SELECT * FROM Form_Data WHERE quotation_status = 'Completed' AND user_id = '" + req.body['userid'] + "'";
        if (req.body.request_from == "Stage 1 Audit Plan")
            query = "SELECT * FROM Form_Data WHERE stage1_team_assigned = 'Yes' AND user_id = '" + req.body['userid'] + "'";
        if (req.body.request_from == "Assign Stage 2 Audit Team")
            query = "SELECT * FROM Form_Data WHERE stage1_plan_status = 'Completed' AND user_id = '" + req.body['userid'] + "'";
        if (req.body.request_from == "Stage 2 Audit Plan")
            query = "SELECT * FROM Form_Data WHERE stage2_team_assigned = 'Yes' AND user_id = '" + req.body['userid'] + "'";
        if (req.body.request_from == "Initial Certification Conclusions")
            query = "SELECT * FROM Form_Data WHERE stage2_plan_status = 'Completed' AND user_id = '" + req.body['userid'] + "'";
        request.query(query, function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset['recordsets'][0].map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['client_id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/aws_rds__fetch_customer_application', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        var fileUploadCategory = "Incoming Initial Certification";
        var cleanupDatabaseName = "Form_Data";
        var queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Existing Applications' AND table_type = 'Main Table'";
        var query = "SELECT * FROM Form_Data WHERE user_id = '" + req.body['userid'] + "'";
        if (req.body.request_from == 'Quotation Status' || req.body.request_from == 'HO Activity') 
        {
            if (req.body['filter_workflow'] == "Yes")
                query = "SELECT * FROM Form_Data WHERE Approved = 'Yes' AND user_id = '" + req.body['userid'] + "'";
            queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Quotation & Order Confirmation' AND table_type = 'Main Table'";
            fileUploadCategory = "Quotation and Order Confirmation";
            cleanupDatabaseName = "quotations";
            if (req.body.request_from == 'HO Activity')
            {
                queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'HO Activities' AND table_type = 'Main Table'";
                fileUploadCategory = "HO Activities";
                cleanupDatabaseName = "ho_activities";
            }
        }
        if (req.body.request_from == "Assign Stage 1 Audit Team")
        {
            if (req.body['filter_workflow'] == "Yes")
                query = "SELECT * FROM Form_Data WHERE quotation_status = 'Completed' AND user_id = '" + req.body['userid'] + "'";
            queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Assign Stage 1 Audit Team' AND table_type = 'Main Table'";
        }
        if (req.body.request_from == "Stage 1 Audit Plan")
        {
            if (req.body['filter_workflow'] == "Yes")
                query = "SELECT * FROM Form_Data WHERE stage1_team_assigned = 'Yes' AND user_id = '" + req.body['userid'] + "'";
            queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Stage 1 Audit Plan' AND table_type = 'Main Table'";
            if (req.body['plan_type'])
            {
                if (req.body['plan_type'] == 'tasks')
                    queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Stage 1 Audit Plan Tasks' AND table_type = 'Main Table'";
                if (req.body['plan_type'] == 'forms')
                    queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Stage 1 Audit Plan Forms' AND table_type = 'Main Table'";
            }
            cleanupDatabaseName = "stage1_audit_plans";
            fileUploadCategory = "Stage 1 Audit Plan";
        }
        if (req.body.request_from == "Assign Stage 2 Audit Team")
        {
            if (req.body['filter_workflow'] == "Yes")
                query = "SELECT * FROM Form_Data WHERE stage1_plan_status = 'Completed' AND user_id = '" + req.body['userid'] + "'";
            queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Assign Stage 2 Audit Team' AND table_type = 'Main Table'";
        }
        if (req.body.request_from == "Stage 2 Audit Plan")
        {
            if (req.body['filter_workflow'] == "Yes")
                query = "SELECT * FROM Form_Data WHERE stage2_team_assigned = 'Yes' AND user_id = '" + req.body['userid'] + "'";
            queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Stage 2 Audit Plan' AND table_type = 'Main Table'";
            if (req.body['plan_type'])
            {
                if (req.body['plan_type'] == 'tasks')
                    queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Stage 2 Audit Plan Tasks' AND table_type = 'Main Table'";
                if (req.body['plan_type'] == 'forms')
                    queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Stage 2 Audit Plan Forms' AND table_type = 'Main Table'";
            }
            cleanupDatabaseName = "stage2_audit_plans";
            fileUploadCategory = "Stage 2 Audit Plan";
        }
        if (req.body.request_from == "Initial Certification Conclusions")
        {
            if (req.body['filter_workflow'] == "Yes")
                query = "SELECT * FROM Form_Data WHERE stage2_plan_status = 'Completed' AND user_id = '" + req.body['userid'] + "'";
            queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Initial Certification Conclusion' AND table_type = 'Main Table'";
            fileUploadCategory = "Initial Certification Conclusion";
            cleanupDatabaseName = "initial_certification_conclusion";
        }
        const QuerySQL = (queryForFilter) => {
            return new Promise((resolve, reject)=>{
                sql.query(queryForFilter,  (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        var resDataToDelete = await QuerySQL("SELECT * FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND category = '" + fileUploadCategory + "'");
        resDataToDelete.forEach(async (ele) => {
            //if (cleanupDatabaseName == "Form_Data")
            await QuerySQL("DELETE FROM " + cleanupDatabaseName + " WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + ele['client_id'] + "'");
            if (cleanupDatabaseName == "quotations")
                await QuerySQL("UPDATE Form_Data SET quotation_date = '', quotation_status = 'Open' WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + ele['client_id'] + "'");
            else if (cleanupDatabaseName == "stage1_audit_plans")
                await QuerySQL("UPDATE Form_Data SET stage1_plan_date = '', stage1_plan_status = 'Open' WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + ele['client_id'] + "'");
            else if (cleanupDatabaseName == "stage2_audit_plans")
                await QuerySQL("UPDATE Form_Data SET stage2_plan_date = '', stage2_plan_status = 'Open' WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + ele['client_id'] + "'");
            else if (cleanupDatabaseName == "ho_activities")
                await QuerySQL("UPDATE Form_Data SET HO_activity_date = '', HO_activity_status = 'Open' WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + ele['client_id'] + "'");
            else if (cleanupDatabaseName == "initial_certification_conclusion")
                await QuerySQL("UPDATE Form_Data SET initial_certification_conclusion_date = '', initial_certification_conclusion = 'Open' WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + ele['client_id'] + "'");
        })
        await QuerySQL("UPDATE incomplete_file_upload_cleanup SET deleted_from_database_or_not = 'Yes' WHERE user_id = '" + req.body['userid'] + "' AND category = '" + fileUploadCategory + "'");
        sql.query(query, async function (err, recordset) {
            if (err) console.log(err);
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset.map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['client_id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            if (req.body['role'] == 'Accreditation Board')
            {
                queryData = await QuerySQL(queryForFilter);
                var dateQueryData = JSON.parse(queryData[0]['date_filter_value']);
                queryData = JSON.parse(queryData[0]['filter_value']);
                //console.log(queryData)
                // resRecordSet = resRecordSet.filter(ele => {
                //     var isMatching = true;
                //     // for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                //     // {
                //     //     //console.log(typeof(queryData[intIdx]['value']));
                //     // }

                //     if (isMatching) return ele;
                //     //if (ele)
                // })
                var mToday = new Date();
                var mdd = String(mToday.getDate()).padStart(2, '0');
                var mmm = String(mToday.getMonth() + 1).padStart(2, '0'); //January is 0!
                var myyyy = mToday.getFullYear();
                mToday = myyyy + '-' + mmm + '-' + mdd;
                if ((dateQueryData.fromDate || dateQueryData.toDate) && dateQueryData.filterDate)
                {
                  var fromDate = dateQueryData.fromDate ? dateQueryData.fromDate : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                  var toDate = dateQueryData.toDate ? dateQueryData.toDate : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                  resRecordSet = resRecordSet.filter(ele => {
                    var curDate = ele['date'];
                    if (req.body.request_from == 'Quotation Status')
                        curDate = ele['quotation_date'];
                    else if (req.body.request_from == 'Stage 1 Audit Plan')
                        curDate = ele['stage1_plan_date'];
                    else if (req.body.request_from == 'Stage 2 Audit Plan')
                        curDate = ele['stage2_plan_date'];
                    else if (req.body.request_from == 'HO Activity')
                        curDate = ele['HO_activity_date'];
                    else if (req.body.request_from == 'Initial Certification Conclusions')
                        curDate = ele['initial_certification_conclusion_date'];
                    curDate = curDate.split("-")[2] + curDate.split("-")[1] + curDate.split("-")[0];
                    if (fromDate <= curDate && curDate <= toDate) {
                      return ele;
                    }
                  })
                }
                resRecordSet = resRecordSet.filter(ele => {
                    var isMatching = true;
                    for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                    {
                        //console.log(typeof(queryData[intIdx]['value']));
                        if (typeof(queryData[intIdx]['value']) != 'object')
                        {
                            if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                            {
                                isMatching = false;
                                break;
                            }
                        }
                        else
                        {
                            for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                            {
                                var isThisMatchingForOnce = false;
                                if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                {
                                    isThisMatchingForOnce = true;
                                    break;
                                }
                            }
                            if (!isThisMatchingForOnce) isMatching = false;
                        }
                    }
                    if (isMatching) return ele;
                    //if (ele)
                })
            }
            sql.end();
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/aws_rds__app_fetch_customer_application', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        var query = "";
        if (req.body.request_from == 'Stage 1 Audit Plan' || req.body.request_from == 'Stage 2 Audit Plan')
            query = "SELECT * FROM Form_Data WHERE user_id = '" + req.body['userid'] + "' ORDER BY `client_id`";
        else if (req.body.request_from == 'Surveillance Audit Plan')
            query = "SELECT * FROM surveillance_audit_clients WHERE user_id = '" + req.body['userid'] + "' ORDER BY `client_id`";
        else if (req.body.request_from == 'Recertification Audit Plan')
            query = "SELECT * FROM recertification_audit_clients WHERE user_id = '" + req.body['userid'] + "' ORDER BY `client_id`";
        // if (req.body.request_from == 'Quotation Status' || req.body.request_from == 'HO Activity') 
        //     query = "SELECT * FROM Form_Data WHERE Approved = 'Yes' AND user_id = '" + req.body['userid'] + "'";
        // if (req.body.request_from == "Assign Stage 1 Audit Team")
        //     query = "SELECT * FROM Form_Data WHERE quotation_status = 'Completed' AND user_id = '" + req.body['userid'] + "'";
        // if (req.body.request_from == "Stage 1 Audit Plan")
        //     query = "SELECT * FROM Form_Data WHERE stage1_team_assigned = 'Yes' AND user_id = '" + req.body['userid'] + "'";
        // if (req.body.request_from == "Assign Stage 2 Audit Team")
        //     query = "SELECT * FROM Form_Data WHERE stage1_plan_status = 'Completed' AND user_id = '" + req.body['userid'] + "'";
        // if (req.body.request_from == "Stage 2 Audit Plan")
        //     query = "SELECT * FROM Form_Data WHERE stage2_team_assigned = 'Yes' AND user_id = '" + req.body['userid'] + "'";
        // if (req.body.request_from == "Initial Certification Conclusions")
        //     query = "SELECT * FROM Form_Data WHERE stage2_plan_status = 'Completed' AND user_id = '" + req.body['userid'] + "'";
        sql.query(query, function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                sql.end();
                res.send({"data": [], "descData": []});
                return;
            }
            var resRecordSet = recordset.map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['client_id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            //Stage 1 Audit Plan
            var descQuery = "";
            if (req.body.request_from == "Stage 1 Audit Plan")
                descQuery = "SELECT * FROM stage1_audit_plans WHERE user_id = '" + req.body['userid'] + "' ORDER BY `client_id`";
            else if (req.body.request_from == "Stage 2 Audit Plan")
                descQuery = "SELECT * FROM stage2_audit_plans WHERE user_id = '" + req.body['userid'] + "' ORDER BY `client_id`";
            else if (req.body.request_from == "Surveillance Audit Plan")
                descQuery = "SELECT * FROM surveillance_audit_plans WHERE user_id = '" + req.body['userid'] + "' ORDER BY `client_id`";                
            else if (req.body.request_from == "Recertification Audit Plan")
                descQuery = "SELECT * FROM recertification_audit_plans WHERE user_id = '" + req.body['userid'] + "' ORDER BY `client_id`";                
            sql.query(descQuery, function (err, iRecordset) {
                if (err) console.log(err)
                sql.end();
                if (!iRecordset) 
                {
                    res.send({"data": resRecordSet, "descData": []});
                    return;
                }
                res.send({"data": resRecordSet, "descData": iRecordset});
                //res.send(recordset['recordsets'][0]);
            });
            //res.send({"data": resRecordSet});
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/aws_rds__app_fetch_existing_inspections', (req, res) => {
    var mysql = require("mysql");
    var request = require('request');
    var download = function (url, dest, callback) {
        request
          .get(url)
          .on('error', function (err) {
            console.log(err);
          })
          .pipe(fs.createWriteStream(dest))
          .on('close', callback);
    };
    const fs = require('fs');
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var clientid = req.body['userid'];
    const util = require('util');
    //var clientid = "213234234231";
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        const QuerySQL = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query, (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        var resDataToDelete = await QuerySQL("SELECT DISTINCT user_id, client_id FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND (category = 'Stage 1 Audit Audit' OR category = 'Stage 2 Audit Audit' OR category = 'Surveillance Audit Audit' OR category = 'Recertification Audit Audit')");
        resDataToDelete.forEach(async (ele) => {
            var client_id = ele['client_id'].split("__")[0];
            var id = ele['client_id'].split("__")[1];
            await QuerySQL("DELETE FROM existing_checklist_inspections WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + client_id + "' AND revision_id = '" + id + "'");
        })
        await QuerySQL("UPDATE incomplete_file_upload_cleanup SET deleted_from_database_or_not = 'Yes' WHERE user_id = '" + req.body['userid'] + "' AND (category = 'Stage 1 Audit Audit' OR category = 'Stage 2 Audit Audit' OR category = 'Surveillance Audit Audit' OR category = 'Recertification Audit Audit')");
        //sql.query("SELECT * FROM existing_checklist_inspections WHERE user_id = '" + clientid + "' ORDER BY id", async function (err, recordset) {
        sql.query("SELECT * FROM existing_checklist_inspections A WHERE A.user_id = '" + clientid + "' AND A.revision_no = (SELECT MAX(revision_no) from existing_checklist_inspections B WHERE A.user_id = B.user_id AND A.checklist_id = B.checklist_id AND A.client_id = B.client_id AND A.id = B.id) ORDER BY A.id", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                sql.end();
                res.send({"data": []});
                return;
            }
            else 
            {
                const downloadFile = (fileName, savePath) =>{
                    return new Promise((resolve, reject)=>{
                        download("https://cwac.in/softwares_apps/quest_global_mcs/audit_app/inspection_checklist/" + fileName, savePath, async function () {
                            return resolve(true);
                        });
                    });
                };
                const mainDirPath = path.join(__dirname, '/');
                let intReadIdx = 0;
                for (var intIdx = 0; intIdx < recordset.length; intIdx++)
                {
                    //await downloadFile(recordset[intIdx]['client_id'] + "_" + recordset[intIdx]['id'] + ".xlsx", mainDirPath + recordset[intIdx]['client_id'] + "_" + recordset[intIdx]['id'] + ".xlsx");
                    var iRecordset = recordset[intIdx];
                    const queryTemplateName = () =>{
                        return new Promise((resolve, reject)=>{
                            sql.query("SELECT * FROM inspection_checklist_templates WHERE checklist_id = '" + iRecordset['checklist_id'] + "'",  (error, results)=>{
                                if(error){
                                    return reject(error);
                                }
                                return resolve(results);
                            });
                        });
                    };
                    const iiRecordSet = await queryTemplateName();
                    console.log("downloaded");
                    var questionnaireDetails = "";
                    // const { JavaCaller } = require("java-caller");
                    // const java = new JavaCaller({
                    //     classPath: 'AuditPlatformProject.jar', // CLASSPATH referencing the package embedded jar files
                    //     mainClass: 'auditplatformproject.ReadChecklistFile',// Main class to call, must be available from CLASSPATH,
                    //     rootPath: __dirname,
                    // });
                    // const { status, stdout, stderr } = await java.run([iRecordset['client_id'] + ";;;" + iRecordset['id']]);
                    // console.log(stdout);
                    // questionnaireDetails = stdout.replaceAll("\r\n", "");
                    // questionnaireDetails = questionnaireDetails.split("__________");
                    // questionnaireDetails.pop();
                    // questionnaireDetails = questionnaireDetails.map(ele => {
                    //     var newEle = {};
                    //     newEle['question'] =  ele.split(";;;")[0];
                    //     newEle['response'] =  ele.split(";;;")[1];
                    //     newEle['score'] =  ele.split(";;;")[2];
                    //     newEle['status'] =  ele.split(";;;")[3];
                    //     return newEle;
                    // })
                    //console.log("questionnaireDetails, ", questionnaireDetails)
                    iRecordset['checklistData'] = questionnaireDetails;
                    if (iiRecordSet.length > 0)
                        iRecordset['templateName'] = iiRecordSet[0]['template_name'];
                    else iRecordset['templateName'] = "Checklist Template Deleted"
                    recordset[intIdx] = iRecordset;
                    
                    // if (fs.existsSync(mainDirPath + iRecordset['client_id'] + '_' + iRecordset['id'] + ".xlsx"))
                    // {
                    //     try {
                    //     fs.unlinkSync(
                    //         mainDirPath + iRecordset['client_id'] + '_' + iRecordset['id'] + ".xlsx"
                    //     );
                    //     } catch(e) {
                            
                    //     }
                    // }
                }
                sql.end();
                res.send({"data": recordset});
            }
        });
    });
});
app.post('/aws_rds__app_delete_inspection_template', async (req, res) => {
    var mysql = require("mysql");
    //var clientid = "213234234231_1661603875368";
    //var id = "20220907174122";
    var id = req.body['checklistid'];

    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("DELETE from inspection_checklist_templates WHERE checklist_id = '" + id + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send({"data": 'Something went wrong. Please submit again.'})
            }
            else 
            {
                //res.send({"data": "Client Details Added Successfully"});
                const ftpClient = new Ftp();
                ftpClient.connect( {
                    'host': 'ftp.cwac.in',
                    'user': 'cwacin',
                    'password': '$Rv01111996'
                } );
                const DeleteFile = (path) => {
                    return new Promise((resolve, reject)=>{
                        ftpClient.delete(path, () => {
                            return resolve("deleted " + path)
                        });
                    });
                };
                const DeleteDir = (path) =>{
                    return new Promise((resolve, reject)=>{
                        ftpClient.rmdir(path, (err) => {
                            if (err) return reject(err);
                            else return resolve("Done");
                        });
                    });
                };
                ftpClient.on( 'ready', async function() {
                    const ListFiles = (path) =>{
                        return new Promise((resolve, reject)=>{
                            ftpClient.list(path, false, async function( err, list ) {
                                if (err) return reject(err);
                                var fileNames = [];
                                for (var intIdx = 0; intIdx < list.length; intIdx++)
                                {
                                    if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                                    {
                                        fileNames.push(list[intIdx].name);
                                    }
                                }
                                return resolve(fileNames);
                            });
                        });
                    };
                    var listDirs = await ListFiles("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/inspection_templates/" + id);
                    if (listDirs.includes("template.xlsx"))
                        await DeleteFile("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/inspection_templates/" + id + "/template.xlsx");
                    if (listDirs.includes("template_info.xlsx"))
                        await DeleteFile("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/inspection_templates/" + id + "/template_info.xlsx");
                    if (listDirs.includes("template.pdf"))
                        await DeleteFile("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/inspection_templates/" + id + "/template.pdf");
                    await DeleteDir("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/inspection_templates/" + id);
                    ftpClient.end();
                    res.send("Inspection Checklist deleted successfully");
                });
            }
        });
    });
});
app.post('/aws_rds__app_delete_existing_inspection', async (req, res) => {
    var mysql = require("mysql");
    //var clientid = "213234234231_1661603875368";
    //var id = "20220907174122";
    var clientid = req.body['clientid'];
    var id = req.body['id'];

    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("DELETE from existing_checklist_inspections WHERE id = '" + id + "' AND client_id = '" + clientid + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send({"data": 'Something went wrong. Please submit again.'})
            }
            else 
            {
                //res.send({"data": "Client Details Added Successfully"});
                const ftpClient = new Ftp();
                ftpClient.connect( {
                    'host': 'ftp.cwac.in',
                    'user': 'cwacin',
                    'password': '$Rv01111996'
                } );
                const DeleteFile = (path) => {
                    return new Promise((resolve, reject)=>{
                        ftpClient.delete(path, () => {
                            return resolve("deleted " + path)
                        });
                    });
                };
                const DeleteDir = (path) =>{
                    return new Promise((resolve, reject)=>{
                        ftpClient.rmdir(path, (err) => {
                            if (err) return reject(err);
                            else return resolve("Done");
                        });
                    });
                };
                const ListFiles = (path) =>{
                    return new Promise((resolve, reject)=>{
                        ftpClient.list(path, false, async function( err, list ) {
                            if (err) return reject(err);
                            var fileNames = [];
                            for (var intIdx = 0; intIdx < list.length; intIdx++)
                            {
                                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                                {
                                    fileNames.push(list[intIdx].name);
                                }
                            }
                            return resolve(fileNames);
                        });
                    });
                };
                ftpClient.on( 'ready', async function() {
                    //var list = await ListFiles("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_files/aa");
                    var dirListFiles = await ListFiles("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_files");
                    var dirListImages = await ListFiles("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_images");
                    var dirListVideos = await ListFiles("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_videos");
                    var list = await ListFiles("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_files/" + clientid + "_" + id);
                    for (var intIdx = 0; intIdx < list.length; intIdx++)
                    {
                        var result = await DeleteFile("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_files/" + clientid + "_" + id + "/" + list[intIdx]);
                        console.log(result);
                    }
                    list = await ListFiles("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_images/" + clientid + "_" + id);
                    for (var intIdx = 0; intIdx < list.length; intIdx++)
                    {
                        var result = await DeleteFile("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_images/"  + clientid + "_" + id + "/" + list[intIdx]);
                        console.log(result);
                    }
                    list = await ListFiles("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_videos/" + clientid + "_" + id);
                    for (var intIdx = 0; intIdx < list.length; intIdx++)
                    {
                        var result = await DeleteFile("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_videos/"  + clientid + "_" + id +"/" + list[intIdx]);
                        console.log(result);
                    }
                    await DeleteFile("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/inspection_checklist/"  + clientid + "_" + id + ".xlsx");
                    for (var intIdx = 0; intIdx < dirListFiles.length; intIdx++)
                    {
                        if (clientid + "_" + id == dirListFiles[intIdx])
                        {
                            await DeleteDir("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_files/" + clientid + "_" + id);
                            break;
                        }
                    }
                    for (var intIdx = 0; intIdx < dirListImages.length; intIdx++)
                    {
                        if (clientid + "_" + id == dirListImages[intIdx])
                        {
                            await DeleteDir("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_images/" + clientid + "_" + id);
                            break;
                        }
                    }
                    for (var intIdx = 0; intIdx < dirListVideos.length; intIdx++)
                    {
                        if (clientid + "_" + id == dirListVideos[intIdx])
                        {
                            await DeleteDir("domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_videos/" + clientid + "_" + id);
                            break;
                        }
                    }
                    ftpClient.end();
                    res.send({"status": "Success"});
                });
            }
        });
    });
});
app.post('/aws_rds__app_fetch_existing_checklist_revisions', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        //var request = new sql.Request();
        sql.query("SELECT * FROM existing_checklist_inspections WHERE user_id = '" + req.body['userid'] + "' AND checklist_id = '" + req.body['checklistid'] + "' AND client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['timestamp'] + "' ORDER BY revision_no DESC", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send({"data": []});
                return;
            }
            const queryTemplateName = () =>{
                return new Promise((resolve, reject)=>{
                    sql.query("SELECT * FROM inspection_checklist_templates WHERE checklist_id = '" + req.body['checklistid'] + "'",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            const iiRecordSet = await queryTemplateName();
            var newRecordset = recordset.map(ele => {
                var newEle = ele;
                newEle['templateName'] = iiRecordSet[0]['template_name'];
                return newEle;
            })
            sql.end();
            res.send({"data": newRecordset, "latest_rev_no": newRecordset[0]['revision_no']});
        });
    });
});
app.post('/aws_rds__app_fetch_inspection_checklist_templates', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        //var request = new sql.Request();
        sql.query("SELECT * FROM inspection_checklist_templates", function (err, recordset) {
            if (err) console.log(err)
            sql.end();
            if (!recordset) 
            {
                res.send({"data": []});
                return;
            }
            res.send({"data": recordset});
        });
    });
});
app.post('/offline__fetch_customer_application_for_surveillance', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        var query = "SELECT * FROM surveillance_audit_clients WHERE user_id = '" + req.body['userid'] + "' ORDER BY [Client Name]";
        if (req.body.request_from == 'Assign Surveillance Audit Team')
            query = "SELECT * FROM surveillance_audit_clients WHERE Status = 'Approved' AND user_id = '" + req.body['userid'] + "' ORDER BY [Client Name]";
        if (req.body.request_from == "Surveillance Audit Plan")
            query = "SELECT * FROM surveillance_audit_clients WHERE surveillance_audit_team_assigned = 'Yes' AND user_id = '" + req.body['userid'] + "' ORDER BY [Client Name]";
        if (req.body.request_from == "Surveillance Audit Conclusions")
            query = "SELECT * FROM surveillance_audit_clients WHERE surveillance_plan_status = 'Completed' AND user_id = '" + req.body['userid'] + "' ORDER BY [Client Name]";
        request.query(query, function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset['recordsets'][0].map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['client_id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/aws_rds__fetch_customer_application_for_surveillance', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        const QueryABFilter = (queryForFilter) => {
            return new Promise((resolve, reject)=>{
                sql.query(queryForFilter,  (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        //var request = new sql.Request();
        var query = "SELECT * FROM surveillance_audit_clients WHERE user_id = '" + req.body['userid'] + "' ORDER BY `Client Name`";
        var queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Surveillance Audit Application' AND table_type = 'Main Table'";
        var fileUploadCategory = "Surveillance Audit Clients";
        var cleanupDatabaseName = "surveillance_audit_clients";
        if (req.body.request_from == 'Assign Surveillance Audit Team')
        {
            if (req.body['filter_workflow'] == "Yes")
                query = "SELECT * FROM surveillance_audit_clients WHERE Status = 'Approved' AND user_id = '" + req.body['userid'] + "' ORDER BY `Client Name`";
            queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Assign Surveillance Audit Team' AND table_type = 'Main Table'";
        }
        if (req.body.request_from == "Surveillance Audit Plan")
        {
            if (req.body['filter_workflow'] == "Yes")
                query = "SELECT * FROM surveillance_audit_clients WHERE surveillance_audit_team_assigned = 'Yes' AND user_id = '" + req.body['userid'] + "' ORDER BY `Client Name`";
            queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Surveillance Audit Plan' AND table_type = 'Main Table'";
            if (req.body['plan_type'])
            {
                if (req.body['plan_type'] == "tasks")
                    queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Surveillance Audit Plan Tasks' AND table_type = 'Main Table'";
            }
            cleanupDatabaseName = "surveillance_audit_plans";
            fileUploadCategory = "Surveillance Audit Plan";
        }
        if (req.body.request_from == "Surveillance Audit Conclusions")
        {
            if (req.body['filter_workflow'] == "Yes")
                query = "SELECT * FROM surveillance_audit_clients WHERE surveillance_plan_status = 'Completed' AND user_id = '" + req.body['userid'] + "' ORDER BY `Client Name`";
            queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Surveillance Audit Conclusion' AND table_type = 'Main Table'";
            cleanupDatabaseName = "surveillance_audit_conclusion";
            fileUploadCategory = "Surveillance Audit Conclusion";
        }
        const QuerySQL = (queryForFilter) => {
            return new Promise((resolve, reject)=>{
                sql.query(queryForFilter,  (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        var resDataToDelete = await QuerySQL("SELECT * FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND category = '" + fileUploadCategory + "'");
        resDataToDelete.forEach(async (ele) => {
            //if (cleanupDatabaseName == "Form_Data")
            if (cleanupDatabaseName != "surveillance_audit_clients")
                await QuerySQL("DELETE FROM " + cleanupDatabaseName + " WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + ele['client_id'] + "'");
            if (cleanupDatabaseName == "surveillance_audit_clients")
                await QuerySQL("UPDATE surveillance_audit_clients SET surveillance_audit_date = '', Status = 'Not Conducted', description = '' WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + ele['client_id'] + "'");
            else if (cleanupDatabaseName == "surveillance_audit_plans")
                await QuerySQL("UPDATE surveillance_audit_clients SET surveillance_audit_plan_date = '', surveillance_plan_status = 'Open' WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + ele['client_id'] + "'");
            else if (cleanupDatabaseName == "surveillance_audit_conclusion")
                await QuerySQL("UPDATE surveillance_audit_clients SET surveillance_audit_conclusion_date = '', surveillance_audit_conclusion = 'Open' WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + ele['client_id'] + "'");
            // if (cleanupDatabaseName == "surveillance_audit_clients")
            //     await QuerySQL("UPDATE Form_Data SET quotation_date = '', quotation_status = 'Open' WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + ele['client_id'] + "'");
            // else if (cleanupDatabaseName == "stage1_audit_plans")
            //     await QuerySQL("UPDATE Form_Data SET stage1_plan_date = '', stage1_plan_status = 'Open' WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + ele['client_id'] + "'");
            // else if (cleanupDatabaseName == "stage2_audit_plans")
            //     await QuerySQL("UPDATE Form_Data SET stage2_plan_date = '', stage2_plan_status = 'Open' WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + ele['client_id'] + "'");
        })
        await QuerySQL("UPDATE incomplete_file_upload_cleanup SET deleted_from_database_or_not = 'Yes' WHERE user_id = '" + req.body['userid'] + "' AND category = '" + fileUploadCategory + "'");
        sql.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resFormData = [];
            if (req.body.request_from == 'Existing Surveillance Audit Clients')
            {
                resFormData = await QueryABFilter("SELECT * FROM Form_Data");
            }
            var resRecordSet = recordset.map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['client_id'];
                newRecord.selected = false;
                newRecord.index = index;
                if (req.body.request_from == 'Existing Surveillance Audit Clients')
                {
                    var resReqFormData = resFormData.filter(ele => ele['client_id'] == record['client_id']);
                    newRecord['initial_certification_conclusion_date'] = resReqFormData[0]['initial_certification_conclusion_date'];
                }
                return newRecord;
            });
            if (req.body['role'] == 'Accreditation Board')
            {
                queryData = await QueryABFilter(queryForFilter);
                var dateQueryData = JSON.parse(queryData[0]['date_filter_value']);
                queryData = JSON.parse(queryData[0]['filter_value']);
                //console.log(queryData)
                var mToday = new Date();
                var mdd = String(mToday.getDate()).padStart(2, '0');
                var mmm = String(mToday.getMonth() + 1).padStart(2, '0'); //January is 0!
                var myyyy = mToday.getFullYear();
                mToday = myyyy + '-' + mmm + '-' + mdd;
                if ((dateQueryData.fromDate || dateQueryData.toDate) && dateQueryData.filterDate)
                {
                  var fromDate = dateQueryData.fromDate ? dateQueryData.fromDate : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                  var toDate = dateQueryData.toDate ? dateQueryData.toDate : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                  resRecordSet = resRecordSet.filter(ele => {
                    var curDate = ele['surveillance_audit_date'];
                    if (req.body.request_from == 'Surveillance Audit Plan')
                        curDate = ele['surveillance_audit_plan_date'];
                    else if (req.body.request_from == 'Surveillance Audit Conclusions')
                        curDate = ele['surveillance_audit_conclusion_date'];
                    // else if (req.body.request_from == 'Stage 2 Audit Plan')
                    //     curDate = ele['stage2_plan_date'];
                    // else if (req.body.request_from == 'HO Activity')
                    //     curDate = ele['HO_activity_date'];
                    // else if (req.body.request_from == 'Initial Certification Conclusions')
                    //     curDate = ele['initial_certification_conclusion_date'];
                    curDate = curDate.split("-")[2] + curDate.split("-")[1] + curDate.split("-")[0];
                    if (fromDate <= curDate && curDate <= toDate) {
                      return ele;
                    }
                  })
                }
                resRecordSet = resRecordSet.filter(ele => {
                    var isMatching = true;
                    for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                    {
                        //console.log(typeof(queryData[intIdx]['value']));
                        if (typeof(queryData[intIdx]['value']) != 'object')
                        {
                            if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                            {
                                isMatching = false;
                                break;
                            }
                        }
                        else
                        {
                            for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                            {
                                var isThisMatchingForOnce = false;
                                if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                {
                                    isThisMatchingForOnce = true;
                                    break;
                                }
                            }
                            if (!isThisMatchingForOnce) isMatching = false;
                        }
                    }
                    if (isMatching) return ele;
                    //if (ele)
                })
            }
            sql.end();
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/offline__fetch_customer_application_for_recertification', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        var query = "SELECT * FROM recertification_audit_clients WHERE user_id = '" + req.body['userid'] + "' ORDER BY [Client Name]";
        if (req.body.request_from == 'Assign Recertification Audit Team ORDER BY [Client Name]')
            query = "SELECT * FROM recertification_audit_clients WHERE Status = 'Approved' AND user_id = '" + req.body['userid'] + "' ORDER BY [Client Name]";
        if (req.body.request_from == "Recertification Audit Plan")
            query = "SELECT * FROM recertification_audit_clients WHERE recertification_audit_team_assigned = 'Yes' AND user_id = '" + req.body['userid'] + "' ORDER BY [Client Name]";
        if (req.body.request_from == "Recertification Audit Conclusions")
            query = "SELECT * FROM recertification_audit_clients WHERE recertification_plan_status = 'Completed' AND user_id = '" + req.body['userid'] + "' ORDER BY [Client Name]";
        request.query(query, function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset['recordsets'][0].map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['client_id'];
                newRecord.selected = false;
                newRecord.index = index;
                return newRecord;
            });
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/aws_rds__fetch_customer_application_for_recertification', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        const QueryABFilter = (queryForFilter) => {
            return new Promise((resolve, reject)=>{
                sql.query(queryForFilter,  (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        //var request = new sql.Request();
        var fileUploadCategory = "Recertification Audit Clients";
        var cleanupDatabaseName = "recertification_audit_clients";
        var queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Recertification Audit Application' AND table_type = 'Main Table'";
        var query = "SELECT * FROM recertification_audit_clients WHERE user_id = '" + req.body['userid'] + "' ORDER BY `Client Name`";
        if (req.body.request_from == 'Assign Recertification Audit Team')
        {
            if (req.body['filter_workflow'] == "Yes")
                query = "SELECT * FROM recertification_audit_clients WHERE Status = 'Approved' AND user_id = '" + req.body['userid'] + "' ORDER BY `Client Name`";
            queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Assign Recertification Audit Team' AND table_type = 'Main Table'";
        }
        if (req.body.request_from == "Recertification Audit Plan")
        {
            if (req.body['filter_workflow'] == "Yes")
                query = "SELECT * FROM recertification_audit_clients WHERE recertification_audit_team_assigned = 'Yes' AND user_id = '" + req.body['userid'] + "' ORDER BY `Client Name`";
            queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Recertification Audit Plan' AND table_type = 'Main Table'";
            if (req.body['plan_type'])
            {
                if (req.body['plan_type'] == 'tasks')
                    queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Recertification Audit Plan Tasks' AND table_type = 'Main Table'";      
            }
            cleanupDatabaseName = "recertification_audit_plans";
            fileUploadCategory = "Recertification Audit Plan";
        }
        if (req.body.request_from == "Recertification Audit Conclusions")
        {
            if (req.body['filter_workflow'] == "Yes")
                query = "SELECT * FROM recertification_audit_clients WHERE recertification_plan_status = 'Completed' AND user_id = '" + req.body['userid'] + "' ORDER BY `Client Name`";
            queryForFilter = "SELECT * FROM columns_to_filter_for_ab WHERE user_id = '" + req.body['userid'] + "' AND table_name = 'Recertification Audit Conclusion' AND table_type = 'Main Table'";
            cleanupDatabaseName = "recertification_audit_conclusion";
            fileUploadCategory = "Recertification Audit Conclusion";
        }
        const QuerySQL = (queryForFilter) => {
            return new Promise((resolve, reject)=>{
                sql.query(queryForFilter,  (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        var resDataToDelete = await QuerySQL("SELECT * FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND category = '" + fileUploadCategory + "'");
        resDataToDelete.forEach(async (ele) => {
            //if (cleanupDatabaseName == "Form_Data")
            if (cleanupDatabaseName != "recertification_audit_clients")
                await QuerySQL("DELETE FROM " + cleanupDatabaseName + " WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + ele['client_id'] + "'");
            if (cleanupDatabaseName == "recertification_audit_clients")
                await QuerySQL("UPDATE recertification_audit_clients SET recertification_audit_date = '', Status = 'Not Conducted', description = '' WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + ele['client_id'] + "'");
            else if (cleanupDatabaseName == "recertification_audit_plans")
                await QuerySQL("UPDATE recertification_audit_clients SET recertification_audit_plan_date = '', recertification_plan_status = 'Open' WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + ele['client_id'] + "'");
            else if (cleanupDatabaseName == "recertification_audit_conclusion")
                await QuerySQL("UPDATE recertification_audit_clients SET recertification_audit_conclusion_date = '', recertification_audit_conclusion = 'Open' WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + ele['client_id'] + "'");
            // if (cleanupDatabaseName == "surveillance_audit_clients")
            //     await QuerySQL("UPDATE Form_Data SET quotation_date = '', quotation_status = 'Open' WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + ele['client_id'] + "'");
            // else if (cleanupDatabaseName == "stage1_audit_plans")
            //     await QuerySQL("UPDATE Form_Data SET stage1_plan_date = '', stage1_plan_status = 'Open' WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + ele['client_id'] + "'");
            // else if (cleanupDatabaseName == "stage2_audit_plans")
            //     await QuerySQL("UPDATE Form_Data SET stage2_plan_date = '', stage2_plan_status = 'Open' WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + ele['client_id'] + "'");
        })
        await QuerySQL("UPDATE incomplete_file_upload_cleanup SET deleted_from_database_or_not = 'Yes' WHERE user_id = '" + req.body['userid'] + "' AND category = '" + fileUploadCategory + "'");
        sql.query(query, async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resSurveillanceAuditClients = [];
            if (req.body.request_from == 'Existing Recertification Audit Clients')
            {
                resSurveillanceAuditClients =  await QuerySQL("SELECT * FROM surveillance_audit_clients");
            }
            var resRecordSet = recordset.map((record, index) => {
                var newRecord = record;
                newRecord.timestamp = record['client_id'];
                newRecord.selected = false;
                newRecord.index = index;
                if (req.body.request_from == 'Existing Recertification Audit Clients')
                {
                    var reqResSurveillanceAuditClients = resSurveillanceAuditClients.filter(ele => ele['client_id'] == record['client_id']);
                    newRecord['surveillance_audit_conclusion_date'] = reqResSurveillanceAuditClients[0]['surveillance_audit_conclusion_date'];
                }
                return newRecord;
            });
            if (req.body['role'] == 'Accreditation Board')
            {
                queryData = await QueryABFilter(queryForFilter);
                var dateQueryData = JSON.parse(queryData[0]['date_filter_value']);
                queryData = JSON.parse(queryData[0]['filter_value']);
                var mToday = new Date();
                var mdd = String(mToday.getDate()).padStart(2, '0');
                var mmm = String(mToday.getMonth() + 1).padStart(2, '0'); //January is 0!
                var myyyy = mToday.getFullYear();
                mToday = myyyy + '-' + mmm + '-' + mdd;
                if ((dateQueryData.fromDate || dateQueryData.toDate) && dateQueryData.filterDate)
                {
                  var fromDate = dateQueryData.fromDate ? dateQueryData.fromDate : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                  var toDate = dateQueryData.toDate ? dateQueryData.toDate : mToday.split("-")[2] + mToday.split("-")[1] + mToday.split("-")[0];
                  resRecordSet = resRecordSet.filter(ele => {
                    var curDate = ele['recertification_audit_date'];
                    if (req.body.request_from == 'Recertification Audit Plan')
                        curDate = ele['recertification_audit_plan_date'];
                    else if (req.body.request_from == 'Recertification Audit Conclusions')
                        curDate = ele['recertification_audit_conclusion_date'];
                    // else if (req.body.request_from == 'Stage 2 Audit Plan')
                    //     curDate = ele['stage2_plan_date'];
                    // else if (req.body.request_from == 'HO Activity')
                    //     curDate = ele['HO_activity_date'];
                    // else if (req.body.request_from == 'Initial Certification Conclusions')
                    //     curDate = ele['initial_certification_conclusion_date'];
                    curDate = curDate.split("-")[2] + curDate.split("-")[1] + curDate.split("-")[0];
                    if (fromDate <= curDate && curDate <= toDate) {
                      return ele;
                    }
                  })
                }
                //console.log(queryData)
                resRecordSet = resRecordSet.filter(ele => {
                    var isMatching = true;
                    for (var intIdx = 0; intIdx < queryData.length; intIdx++)
                    {
                        //console.log(typeof(queryData[intIdx]['value']));
                        if (typeof(queryData[intIdx]['value']) != 'object')
                        {
                            if (!ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'].toUpperCase()))
                            {
                                isMatching = false;
                                break;
                            }
                        }
                        else
                        {
                            for (var intIIdx = 0; intIIdx < queryData[intIdx]['value'].length; intIIdx++)
                            {
                                var isThisMatchingForOnce = false;
                                if (ele[queryData[intIdx]['id']].toUpperCase().includes(queryData[intIdx]['value'][intIIdx].toUpperCase()))
                                {
                                    isThisMatchingForOnce = true;
                                    break;
                                }
                            }
                            if (!isThisMatchingForOnce) isMatching = false;
                        }
                    }
                    if (isMatching) return ele;
                    //if (ele)
                })
            }
            sql.end();
            res.send(resRecordSet);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/update_client_application_offline', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });

    //console.log(req.body['employeeList'])
    //res.send({"okay": "okay"});

    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        //else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM Form_Data", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send({"okay": "not found"})
                return;
            }
            if (recordset['recordsets'][0].length == 0)
            {
                for (var intIdx = 0; intIdx < req.body['clientList'].length; intIdx++)
                {
                    await request.query("INSERT INTO Form_Data values('" 
                    + req.body['clientList'][intIdx]['timestamp'] + "', '"
                    + req.body['clientList'][intIdx]['Approved'] + "', '"
                    + req.body['clientList'][intIdx]['Client Name'] + "', '"
                    + req.body['clientList'][intIdx]['HO_activity_date'] + "', '"
                    + req.body['clientList'][intIdx]['HO_activity_status'] + "', '"
                    + req.body['clientList'][intIdx]['assignedToWhom'] + "', '"
                    + req.body['clientList'][intIdx]['date'] + "', '"
                    + req.body['clientList'][intIdx]['description'] + "', '"
                    + req.body['clientList'][intIdx]['email'] + "', '"
                    + req.body['clientList'][intIdx]['initial_certification_conclusion'] + "', '"
                    + req.body['clientList'][intIdx]['initial_certification_conclusion_date'] + "', '"
                    + req.body['clientList'][intIdx]['phone'] + "', '"
                    + req.body['clientList'][intIdx]['quotation_date'] + "', '"
                    + req.body['clientList'][intIdx]['quotation_status'] + "', '"
                    + req.body['clientList'][intIdx]['stage1_plan_date'] + "', '"
                    + req.body['clientList'][intIdx]['stage1_plan_status'] + "', '"
                    + req.body['clientList'][intIdx]['stage1_plan_task_date'] + "', '"
                    + req.body['clientList'][intIdx]['stage1_plan_task_status'] + "', '"
                    + req.body['clientList'][intIdx]['stage1_team_assigned'] + "', '"
                    + req.body['clientList'][intIdx]['stage2_plan_date'] + "', '"
                    + req.body['clientList'][intIdx]['stage2_plan_status'] + "', '"
                    + req.body['clientList'][intIdx]['stage2_plan_task_date'] + "', '"
                    + req.body['clientList'][intIdx]['stage2_plan_task_status'] + "', '"
                    + req.body['clientList'][intIdx]['stage2_team_assigned'] + "', '"
                    + req.body['clientList'][intIdx]['surveillance_audit_status'] + "')");
                }
                //res.send({"okay": "okay"})
                request.query("SELECT * FROM employees", async function (err, recordset) {
                    if (err) console.log(err)
                    if (!recordset) 
                    {
                        res.send({"okay": "not found"})
                        return;
                    }
                    if (recordset['recordsets'][0].length == 0)
                    {
                        for (var intIdx = 0; intIdx < req.body['employeeList'].length; intIdx++)
                        {
                            await request.query("INSERT INTO employees values('" 
                            + req.body['employeeList'][intIdx]['timestamp'] + "', '"
                            + req.body['employeeList'][intIdx]['Member Designation'] + "', '"
                            + req.body['employeeList'][intIdx]['Member Email'] + "', '"
                            + req.body['employeeList'][intIdx]['Member Name'] + "', '"
                            + req.body['employeeList'][intIdx]['Member PhoneNumber'] + "')");
                        }
                        res.send({"okay": "okay"})
                    }
                    else res.send({"okay": "okay"})
                });
            }
            else res.send({"okay": "okay"})
        });
    });
});
app.post('/update_surveillance_audit_application_offline', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });

    // console.log(req.body['clientList'])
    // res.send({"okay": "okay"});

    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        //else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM surveillance_audit_clients", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send({"okay": "not found"})
                return;
            }
            if (recordset['recordsets'][0].length == 0)
            {
                for (var intIdx = 0; intIdx < req.body['clientList'].length; intIdx++)
                {
                    await request.query("INSERT INTO surveillance_audit_clients values('" 
                    + req.body['clientList'][intIdx]['timestamp'] + "', '"
                    + req.body['clientList'][intIdx]['Client Name'] + "', '"
                    + req.body['clientList'][intIdx]['Status'] + "', '"
                    + req.body['clientList'][intIdx]['description'] + "', '"
                    + req.body['clientList'][intIdx]['surveillance_audit_conclusion'] + "', '"
                    + req.body['clientList'][intIdx]['surveillance_audit_conclusion_date'] + "', '"
                    + req.body['clientList'][intIdx]['surveillance_audit_date'] + "', '"
                    + req.body['clientList'][intIdx]['surveillance_audit_plan_date'] + "', '"
                    + req.body['clientList'][intIdx]['surveillance_audit_team_assigned'] + "', '"
                    + req.body['clientList'][intIdx]['surveillance_plan_status'] + "', '"
                    + req.body['clientList'][intIdx]['surveillance_plan_task_status'] + "')");
                }
                res.send({"okay": "okay"})
            }
            else res.send({"okay": "okay"})
        });
    });
});
app.post('/update_recertification_audit_application_offline', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });

    //console.log(req.body['clientList'])
    //res.send({"okay": "okay"});

    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM recertification_audit_clients", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send({"okay": "not found"})
                return;
            }
            if (recordset['recordsets'][0].length == 0)
            {
                for (var intIdx = 0; intIdx < req.body['clientList'].length; intIdx++)
                {
                    await request.query("INSERT INTO recertification_audit_clients values('" 
                    + req.body['clientList'][intIdx]['timestamp'] + "', '"
                    + req.body['clientList'][intIdx]['Client Name'] + "', '"
                    + req.body['clientList'][intIdx]['Status'] + "', '"
                    + req.body['clientList'][intIdx]['description'] + "', '"
                    + req.body['clientList'][intIdx]['recertification_audit_conclusion'] + "', '"
                    + req.body['clientList'][intIdx]['recertification_audit_conclusion_date'] + "', '"
                    + req.body['clientList'][intIdx]['recertification_audit_date'] + "', '"
                    + req.body['clientList'][intIdx]['recertification_audit_plan_date'] + "', '"
                    + req.body['clientList'][intIdx]['recertification_audit_team_assigned'] + "', '"
                    + req.body['clientList'][intIdx]['recertification_description'] + "', '"
                    + req.body['clientList'][intIdx]['recertification_plan_status'] + "', '"
                    + req.body['clientList'][intIdx]['recertification_plan_task_status'] + "', '"
                    + req.body['clientList'][intIdx]['recertification_status'] + "')");
                }
                res.send({"okay": "okay"})
            }
            else res.send({"okay": "okay"})
        });
    });
});
app.post('/update_stage1_audit_team_offline', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });

    //console.log(req.body['stage1TeamList'])
    //res.send({"okay": "okay"});

    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        //else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM stage1_audit_teams", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send({"okay": "not found"})
                return;
            }
            if (recordset['recordsets'][0].length == 0)
            {
                for (var intIdx = 0; intIdx < req.body['stage1TeamList'].length; intIdx++)
                {
                    await request.query("INSERT INTO stage1_audit_teams values('" 
                    + req.body['stage1TeamList'][intIdx]['timestamp'] + "', '"
                    + req.body['stage1TeamList'][intIdx]['Member Email'] + "', '"
                    + req.body['stage1TeamList'][intIdx]['Member Name'] + "', '"
                    + req.body['stage1TeamList'][intIdx]['Member PhoneNumber'] + "')");
                }
                res.send({"okay": "okay"})
            }
            else res.send({"okay": "okay"})
        });
    });
});
app.post('/update_stage2_audit_team_offline', (req, res) => {
    var sql = require("mssql");
    console.log("aa");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });

    //console.log(req.body['stage1TeamList'])
    //res.send({"okay": "okay"});

    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        //else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM stage2_audit_teams", async function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send({"okay": "not found"})
                return;
            }
            if (recordset['recordsets'][0].length == 0)
            {
                for (var intIdx = 0; intIdx < req.body['stage2TeamList'].length; intIdx++)
                {
                    await request.query("INSERT INTO stage2_audit_teams values('" 
                    + req.body['stage2TeamList'][intIdx]['timestamp'] + "', '"
                    + req.body['stage2TeamList'][intIdx]['Member Email'] + "', '"
                    + req.body['stage2TeamList'][intIdx]['Member Name'] + "', '"
                    + req.body['stage2TeamList'][intIdx]['Member PhoneNumber'] + "')");
                }
                res.send({"okay": "okay"})
            }
            else res.send({"okay": "okay"})
        });
    });
});
app.get('/connect_mssql', (req, res) => {
    const sql = require('mssql')
    const sqlConfig = {
    user: "sa",
    password: "12345",
    database: "DATABASE1",
    server: 'DESKTOP-L64S3HU\\TEW_SQLEXPRESS',
    pool: {
        max: 10,
        min: 0,
        idleTimeoutMillis: 30000
    },
    options: {
        encrypt: false, // for azure
        trustServerCertificate: true // change to true for local dev / self-signed certs
    }
    }
    try {
        sql.connect(sqlConfig)
            .then(function () {
                // Function to retrieve all the data - Start
                console.log("connected");
                new sql.Request()
                    .query("select * from TABLE1")
                    .then(function (dbData) {
                        if (dbData == null || dbData.length === 0)
                            return;
                        //console.dir('All the courses');
                        console.log(dbData);
                    })
                    .catch(function (error) {
                        console.log(error);
                    });

            }).catch(function (error) {
                console.dir(error);
            });
    } catch (error) {
        console.dir(error);
    }
})
app.get('/connect_mysql', (req, res) => {
    var mysql = require("mysql");
    const pool  = mysql.createPool({
        connectionLimit : 1000,
        connectTimeout  : 60 * 60 * 1000,
        acquireTimeout  : 60 * 60 * 1000,
        timeout         : 60 * 60 * 1000,
        host            : 'localhost',
        user            : 'root',
        password        : '',
        database        : 'cwacin',
        port: 3307
    })
    pool.getConnection((err, connection) => {
        if(err) {
            res.send('Error connecting to Db');
            return;
        }
        res.send("Connection established")
        // connection.query('SELECT * from beers', (err, rows) => {
        //     connection.release() // return the connection to pool

        //     if (!err) {
        //         res.send(rows)
        //     } else {
        //         console.log(err)
        //     }

        //     // if(err) throw err
        //     console.log('The data from beer table are: \n', rows)
        // })
    })
})
app.get('/fetch_stage1_audit_team_library', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("stage1_audit_teams");
    userRef.on('value', (snapshot) => {
        res.send(JSON.stringify(snapshot.val()));
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/offline__fetch_selected_stage1_audit_team', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM stage1_audit_teams WHERE [Member Name] = '" + req.body['Member Name'] + "' AND user_id = '" + req.body['userid'] + "'", function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset['recordsets'][0];
            //resRecordSet = resRecordSet.map(ele => ele['Member Name']);
            res.send(resRecordSet[0]);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/aws_rds__fetch_selected_stage1_audit_team', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM stage1_audit_teams WHERE `Member Name` = '" + req.body['Member Name'] + "' AND user_id = '" + req.body['userid'] + "'", function (err, recordset) {
            if (err) console.log(err)
            sql.end();
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset;
            //resRecordSet = resRecordSet.map(ele => ele['Member Name']);
            console.log("resRecordSet[0], ", resRecordSet[0]);
            res.send(resRecordSet[0]);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/offline__fetch_selected_stage2_audit_team', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM stage2_audit_teams WHERE [Member Name] = '" + req.body['Member Name'] + "' AND user_id = '" + req.body['userid'] + "'", function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset['recordsets'][0];
            //resRecordSet = resRecordSet.map(ele => ele['Member Name']);
            res.send(resRecordSet[0]);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.post('/aws_rds__fetch_selected_stage2_audit_team', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM stage2_audit_teams WHERE `Member Name` = '" + req.body['Member Name'] + "' AND user_id = '" + req.body['userid'] + "'", function (err, recordset) {
            if (err) console.log(err)
            sql.end();
            if (!recordset) 
            {
                res.send([]);
                return;
            }
            var resRecordSet = recordset;
            //resRecordSet = resRecordSet.map(ele => ele['Member Name']);
            res.send(resRecordSet[0]);
            //res.send(recordset['recordsets'][0]);
        });
    });
});
app.get('/fetch_stage1_audit_team_library_v1', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("stage1_audit_teams");
    userRef.on('value', (snapshot) => {
        //res.send(JSON.stringify(snapshot.val()));
        var keys = [];
        var index = 0;
        if (snapshot.numChildren() == 0) {
            res.send(keys);
        }
        snapshot.forEach(function(item) {
            var itemVal = item.val();
            itemVal.timestamp = Object.keys(snapshot.val())[index];
            itemVal.selected = false;
            itemVal.index = index;
            index++;
            keys.push(itemVal);
            if (index == snapshot.numChildren()) {
                //console.log(keys);
                res.send(keys);
            }
        });
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
//app.get('/fetch_employee_library', (req, res) => {
app.post('/fetch_employee_library', (req, res) => {
    //console.log('reached here');
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("employees");
    userRef.on('value', (snapshot) => {
        //res.send(JSON.stringify(snapshot.val()));
        var keys = [];
        var index = 0;
        if (snapshot.numChildren() == 0) {
            res.send(keys);
        }
        snapshot.forEach(function(item) {
            var itemVal = item.val();
            itemVal.timestamp = Object.keys(snapshot.val())[index];
            itemVal.selected = false;
            itemVal.index = index;
            index++;
            //console.log(index);
            if (req.body['request_from'] === 'Surveillance Audit Team') {
                if (itemVal['Member Designation'] == "Surveillance Auditor") {
                    keys.push(itemVal);
                }
            }
            else if (req.body['request_from'] === 'Recertification Audit Team') {
                if (itemVal['Member Designation'] == "Recertification Auditor") {
                    keys.push(itemVal);
                }
            }
            else keys.push(itemVal);
            if (index == snapshot.numChildren()) {
                //console.log(keys);
                res.send(keys);
            }
        });
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.get('/fetch_stage2_audit_team_library', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("stage2_audit_teams");
    userRef.on('value', (snapshot) => {
        res.send(JSON.stringify(snapshot.val()));
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.get('/fetch_stage2_audit_team_library_v1', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("stage2_audit_teams");
    userRef.on('value', (snapshot) => {
        //res.send(JSON.stringify(snapshot.val()));
        var keys = [];
        var index = 0;
        if (snapshot.numChildren() == 0) {
            res.send(keys);
        }
        snapshot.forEach(function(item) {
            var itemVal = item.val();
            itemVal.timestamp = Object.keys(snapshot.val())[index];
            itemVal.selected = false;
            itemVal.index = index;
            index++;
            keys.push(itemVal);
            if (index == snapshot.numChildren()) {
                //console.log(keys);
                res.send(keys);
            }
        });
        client.delete();
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
});
app.post('/add_stage1_audit_plan', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("stage1_audit_plans");
    addUser({
        'stage1PlanDescription': req.body['stage1PlanDescription'],
        // 'date': req.body['date']
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['clientid']);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                //res.send('Customer Application Added Successfully');
                db=admin.database();
                userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/stage1_plan_status");
                userRef.set("In-Progress");
                userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/stage1_plan_date");
                userRef.set(req.body['date'], (err) => {
                    client.delete();
                    res.send('Stage 1 Audit Plan Added Successfully');
                });
            }
            //client.delete();
        })
    }
});
app.post('/offline__add_stage1_audit_plan', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO stage1_audit_plans VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['stage1PlanDescription'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                request.query("UPDATE Form_Data SET stage1_plan_date = '" 
                + req.body['date'] + "', stage1_plan_status = 'In-Progress' WHERE client_id = '" 
                + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                    if (iErr)
                    {
                        console.log(iErr);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        const { JavaCaller } = require("java-caller");
                        const java = new JavaCaller({
                            classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                            mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                            rootPath: __dirname,
                        });
                        const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";stage1_audit_plans", JSON.stringify(req.body['fileNames'])]);
                        console.log(stdout);
                        res.send("Stage 1 Audit Plan Added Successfully");
                    }
                });
            }
        });
    });
});
app.post('/aws_rds__add_stage1_audit_plan', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO stage1_audit_plans VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['stage1PlanDescription'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                const AddIncompleteFileUploadState = () => {
                    return new Promise((resolve, reject)=>{
                        sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['clientid'] + "', 'Stage 1 Audit Plan', 'No', 'No', '" + 'domains/cwac.in/public_html/stage1_audit_plan/' + req.body['clientid'] + "')",  (error, results)=>{
                            if(error){
                                return reject(error);
                            }
                            return resolve(results);
                        });
                    });
                };
                sql.query("UPDATE Form_Data SET stage1_plan_date = '" 
                + req.body['date'] + "', stage1_plan_status = 'In-Progress' WHERE client_id = '" 
                + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                    if (iErr)
                    {
                        sql.end();
                        console.log(iErr);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        // const { JavaCaller } = require("java-caller");
                        // const java = new JavaCaller({
                        //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                        //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                        //     rootPath: __dirname,
                        // });
                        // const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";stage1_audit_plans", JSON.stringify(req.body['fileNames'])]);
                        // console.log(stdout);
                        //await AddIncompleteFileUploadState();
                        sql.end();
                        res.send("Stage 1 Audit Plan Added Successfully");
                    }
                });
            }
        });
    });
});
app.post('/offline__add_stage2_audit_plan', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO stage2_audit_plans VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['stage2PlanDescription'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                request.query("UPDATE Form_Data SET stage2_plan_date = '" 
                + req.body['date'] + "', stage2_plan_status = 'In-Progress' WHERE client_id = '" 
                + req.body['clientid'] + "'", async function (iErr, iRecordset) {
                    if (iErr)
                    {
                        console.log(iErr);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        const { JavaCaller } = require("java-caller");
                        const java = new JavaCaller({
                            classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                            mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                            rootPath: __dirname,
                        });
                        const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";stage2_audit_plans", JSON.stringify(req.body['fileNames'])]);
                        console.log(stdout);
                        res.send("Stage 2 Audit Plan Added Successfully");
                    }
                });
            }
        });
    });
});
app.post('/aws_rds__add_stage2_audit_plan', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO stage2_audit_plans VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['stage2PlanDescription'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                sql.query("UPDATE Form_Data SET stage2_plan_date = '" 
                + req.body['date'] + "', stage2_plan_status = 'In-Progress' WHERE client_id = '" 
                + req.body['clientid'] + "'", async function (iErr, iRecordset) {
                    sql.end();
                    if (iErr)
                    {
                        console.log(iErr);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        // const { JavaCaller } = require("java-caller");
                        // const java = new JavaCaller({
                        //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                        //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                        //     rootPath: __dirname,
                        // });
                        // const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";stage2_audit_plans", JSON.stringify(req.body['fileNames'])]);
                        // console.log(stdout);
                        res.send("Stage 2 Audit Plan Added Successfully");
                    }
                });
            }
        });
    });
});
app.post('/add_stage1_audit_plan_to_logs', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("stage1_audit_plans/" + req.body['clientid'] + "/logs");
    addUser({
        'stage1PlanDescription': req.body['stage1PlanDescription'],
        'date': req.body['date'],
        'status': 'Open'
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['timestamp']);
        oneUser.update(obj,(err)=>{
            client.delete();
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                //res.send('Customer Application Added Successfully');
                //db=admin.database();
                //userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/stage1_plan_status");
                //userRef.set("In-Progress");
                res.send('Stage 1 Audit Plan Added Successfully');
                //client.delete();
            }
        })
    }
});
app.post('/offline__add_stage1_audit_plan_to_logs', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO stage1_audit_plan_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['stage1PlanDescription'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                //console.log("timestamp, ", req.body['timestamp']);
                //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";stage1_audit_plans", JSON.stringify(req.body['fileNames'])]);
                console.log(stdout);
                res.send("Stage 1 Audit Plan Logs Added Successfully");
            }
        });
    });
});
app.post('/aws_rds__add_stage1_audit_plan_to_logs', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO stage1_audit_plan_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['stage1PlanDescription'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // //console.log("timestamp, ", req.body['timestamp']);
                // //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                // const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";stage1_audit_plans", JSON.stringify(req.body['fileNames'])]);
                // console.log(stdout);
                res.send("Stage 1 Audit Plan Logs Added Successfully");
            }
        });
    });
});
app.post('/offline__add_stage2_audit_plan_to_logs', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO stage2_audit_plan_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['stage2PlanDescription'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                //console.log("timestamp, ", req.body['timestamp']);
                //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";stage2_audit_plans", JSON.stringify(req.body['fileNames'])]);
                console.log(stdout);
                res.send("Stage 2 Audit Plan Logs Added Successfully");
            }
        });
    });
});
app.post('/aws_rds__add_stage2_audit_plan_to_logs', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO stage2_audit_plan_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['stage2PlanDescription'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // //console.log("timestamp, ", req.body['timestamp']);
                // //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                // const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";stage2_audit_plans", JSON.stringify(req.body['fileNames'])]);
                // console.log(stdout);
                res.send("Stage 2 Audit Plan Logs Added Successfully");
            }
        });
    });
});
app.post('/add_stage2_audit_plan_to_logs', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("stage2_audit_plans/" + req.body['clientid'] + "/logs");
    addUser({
        'stage2PlanDescription': req.body['stage2PlanDescription'],
        'date': req.body['date'],
        'status': 'Open'
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['timestamp']);
        oneUser.update(obj,(err)=>{
            client.delete();
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                //res.send('Customer Application Added Successfully');
                //db=admin.database();
                //userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/stage1_plan_status");
                //userRef.set("In-Progress");
                res.send('Stage 2 Audit Plan Added Successfully');
                //client.delete();
            }
        })
    }
});
app.post('/add_surveillance_audit_plan_to_logs', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("surveillance_audit_plans/" + req.body['clientid'] + "/logs");
    addUser({
        'description': req.body['stage2PlanDescription'],
        'date': req.body['date'],
        'status': 'Open'
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['timestamp']);
        oneUser.update(obj,(err)=>{
            client.delete();
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                //res.send('Customer Application Added Successfully');
                //db=admin.database();
                //userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/stage1_plan_status");
                //userRef.set("In-Progress");
                res.send('Surveillance Audit Plan Added Successfully');
                //client.delete();
            }
        })
    }
});
app.post('/offline__add_surveillance_audit_plan_to_logs', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO surveillance_audit_plan_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['surveillancePlanDescription'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                //console.log("timestamp, ", req.body['timestamp']);
                //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";surveillance_audit_plans", JSON.stringify(req.body['fileNames'])]);
                console.log(stdout);
                res.send("Surveillance Audit Plan Logs Added Successfully");
            }
        });
    });
});
app.post('/aws_rds__add_surveillance_audit_plan_to_logs', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO surveillance_audit_plan_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['surveillancePlanDescription'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // //console.log("timestamp, ", req.body['timestamp']);
                // //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                // const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";surveillance_audit_plans", JSON.stringify(req.body['fileNames'])]);
                // console.log(stdout);
                res.send("Surveillance Audit Plan Added Successfully");
            }
        });
    });
});
app.post('/add_recertification_audit_plan_to_logs', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("recertification_audit_plans/" + req.body['clientid'] + "/logs");
    addUser({
        'description': req.body['stage2PlanDescription'],
        'date': req.body['date'],
        'status': 'Open'
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['timestamp']);
        oneUser.update(obj,(err)=>{
            client.delete();
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                //res.send('Customer Application Added Successfully');
                //db=admin.database();
                //userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/stage1_plan_status");
                //userRef.set("In-Progress");
                res.send('Recertification Audit Plan Added Successfully');
                //client.delete();
            }
        })
    }
});
app.post('/offline__add_recertification_audit_plan_to_logs', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO recertification_audit_plan_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['recertificationPlanDescription'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                //console.log("timestamp, ", req.body['timestamp']);
                //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";recertification_audit_plans", JSON.stringify(req.body['fileNames'])]);
                console.log(stdout);
                res.send("Recertification Audit Plan Logs Added Successfully");
            }
        });
    });
});
app.post('/aws_rds__add_recertification_audit_plan_to_logs', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO recertification_audit_plan_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['recertificationPlanDescription'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // //console.log("timestamp, ", req.body['timestamp']);
                // //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                // const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";recertification_audit_plans", JSON.stringify(req.body['fileNames'])]);
                // console.log(stdout);
                res.send("Recertification Audit Plan Added Successfully");
            }
        });
    });
});
app.post('/add_quotation_logs', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("quotations/" + req.body['clientid'] + "/logs");
    addUser({
        'description': req.body['description'],
        'date': req.body['date'],
        'status': 'Open'
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['timestamp']);
        oneUser.update(obj,(err)=>{
            client.delete();
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                res.send('Quotation Added Successfully');
            }
        })
    }
});
app.post('/offline__add_quotation_logs', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO quotation_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['description'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                //console.log("timestamp, ", req.body['timestamp']);
                //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";quotations", JSON.stringify(req.body['fileNames'])]);
                console.log(stdout);
                res.send("Quotation Added Successfully");
            }
        });
    });
});
app.post('/aws_rds__add_quotation_logs', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO quotation_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['description'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // //console.log("timestamp, ", req.body['timestamp']);
                // //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                // const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";quotations", JSON.stringify(req.body['fileNames'])]);
                // console.log(stdout);
                res.send("Quotation Added Successfully");
            }
        });
    });
});
app.post('/add_ho_activity_logs', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("ho_activities/" + req.body['clientid'] + "/logs");
    addUser({
        'description': req.body['description'],
        'date': req.body['date'],
        'status': 'Open'
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['timestamp']);
        oneUser.update(obj,(err)=>{
            client.delete();
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                res.send('Head Office Activity Added Successfully');
            }
        })
    }
});
app.post('/offline__add_ho_activity_logs', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO ho_activity_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['description'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                //console.log("timestamp, ", req.body['timestamp']);
                //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";ho_activities", JSON.stringify(req.body['fileNames'])]);
                console.log(stdout);
                res.send("Head Office Activity Added Successfully");
            }
        });
    });
});
app.post('/aws_rds__add_ho_activity_logs', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO ho_activity_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['description'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // //console.log("timestamp, ", req.body['timestamp']);
                // //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                // const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";ho_activities", JSON.stringify(req.body['fileNames'])]);
                // console.log(stdout);
                res.send("Head Office Activity Added Successfully");
            }
        });
    });
});
app.post('/add_initial_certification_conclusion_logs', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("initial_certification_conclusion/" + req.body['clientid'] + "/logs");
    addUser({
        'description': req.body['description'],
        'date': req.body['date'],
        'status': 'Open'
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['timestamp']);
        oneUser.update(obj,(err)=>{
            client.delete();
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                res.send('Initial Certification Conclusion Added Successfully');
            }
        })
    }
});
app.post('/offline__add_initial_certification_conclusion_logs', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO initial_certification_conclusion_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['description'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                //console.log("timestamp, ", req.body['timestamp']);
                //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";init_certification_conclusion", JSON.stringify(req.body['fileNames'])]);
                console.log(stdout);
                res.send("Initial Certification Conclusion Added Successfully");
            }
        });
    });
});
app.post('/aws_rds__add_initial_certification_conclusion_logs', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO initial_certification_conclusion_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['description'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // //console.log("timestamp, ", req.body['timestamp']);
                // //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                // const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";init_certification_conclusion", JSON.stringify(req.body['fileNames'])]);
                // console.log(stdout);
                res.send("Initial Certification Conclusion Added Successfully");
            }
        });
    });
});
app.post('/add_surveillance_audit_conclusion_logs', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("surveillance_audit_conclusion/" + req.body['clientid'] + "/logs");
    addUser({
        'description': req.body['description'],
        'date': req.body['date'],
        'status': 'Open'
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['timestamp']);
        oneUser.update(obj,(err)=>{
            client.delete();
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                res.send('Surveillance Audit Conclusion Added Successfully');
            }
        })
    }
});
app.post('/offline__add_surveillance_audit_conclusion_logs', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO surveillance_audit_conclusion_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['description'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                //console.log("timestamp, ", req.body['timestamp']);
                //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";surveillance_audit_conclusion", JSON.stringify(req.body['fileNames'])]);
                console.log(stdout);
                res.send("Surveillance Audit Conclusion Added Successfully");
            }
        });
    });
});
app.post('/aws_rds__add_surveillance_audit_conclusion_logs', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO surveillance_audit_conclusion_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['description'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // //console.log("timestamp, ", req.body['timestamp']);
                // //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                // const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";surveillance_audit_conclusion", JSON.stringify(req.body['fileNames'])]);
                // console.log(stdout);
                res.send("Surveillance Audit Conclusion Added Successfully");
            }
        });
    });
});
app.post('/add_recertification_audit_conclusion_logs', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("recertification_audit_conclusion/" + req.body['clientid'] + "/logs");
    addUser({
        'description': req.body['description'],
        'date': req.body['date'],
        'status': 'Open'
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['timestamp']);
        oneUser.update(obj,(err)=>{
            client.delete();
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                res.send('Recertification Audit Conclusion Added Successfully');
            }
        })
    }
});
app.post('/offline__add_recertification_audit_conclusion_logs', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO recertification_audit_conclusion_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['description'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                //console.log("timestamp, ", req.body['timestamp']);
                //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";recertification_audit_conclusion", JSON.stringify(req.body['fileNames'])]);
                console.log(stdout);
                res.send("Recertification Audit Conclusion Added Successfully");
            }
        });
    });
});
app.post('/aws_rds__add_recertification_audit_conclusion_logs', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO recertification_audit_conclusion_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['description'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // //console.log("timestamp, ", req.body['timestamp']);
                // //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                // const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";recertification_audit_conclusion", JSON.stringify(req.body['fileNames'])]);
                // console.log(stdout);
                res.send("Recertification Audit Conclusion Added Successfully");
            }
        });
    });
});
app.post('/add_surveillance_audit_logs', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("surveillance_audit_clients/" + req.body['clientid'] + "/logs");
    addUser({
        'description': req.body['description'],
        'date': req.body['date'],
        'status': 'Open'
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['timestamp']);
        oneUser.update(obj,(err)=>{
            client.delete();
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                //res.send('Customer Application Added Successfully');
                //db=admin.database();
                //userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/stage1_plan_status");
                //userRef.set("In-Progress");
                res.send('Surveillance Audit Added Successfully');
                //client.delete();
            }
        })
    }
});
app.post('/offline__add_surveillance_audit_logs', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO surveillance_audit_client_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['description'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                //console.log("timestamp, ", req.body['timestamp']);
                //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";surveillance_audit_client_files", JSON.stringify(req.body['fileNames'])]);
                console.log(stdout);
                res.send("Surveillance Audit Client Log Added Successfully");
            }
        });
    });
});
app.post('/aws_rds__add_surveillance_audit_logs', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO surveillance_audit_client_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['description'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // //console.log("timestamp, ", req.body['timestamp']);
                // //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                // const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";surveillance_audit_client_files", JSON.stringify(req.body['fileNames'])]);
                // console.log(stdout);
                res.send("Surveillance Audit Added Successfully");
            }
        });
    });
});
app.post('/add_recertification_audit_logs', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("recertification_audit_clients/" + req.body['clientid'] + "/logs");
    addUser({
        'description': req.body['description'],
        'date': req.body['date'],
        'status': 'Open'
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['timestamp']);
        oneUser.update(obj,(err)=>{
            client.delete();
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                //res.send('Customer Application Added Successfully');
                //db=admin.database();
                //userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/stage1_plan_status");
                //userRef.set("In-Progress");
                res.send('Recertification Audit Added Successfully');
                //client.delete();
            }
        })
    }
});
app.post('/offline__add_recertification_audit_logs', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO recertification_audit_client_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['description'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                //console.log("timestamp, ", req.body['timestamp']);
                //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";recertification_audit_client_files", JSON.stringify(req.body['fileNames'])]);
                console.log(stdout);
                res.send("Recertification Audit Client Log Added Successfully");
            }
        });
    });
});
app.post('/aws_rds__add_recertification_audit_logs', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO recertification_audit_client_logs VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['timestamp'] + "', '" 
        + req.body['date'] + "', '" 
        + req.body['description'] + "', '" 
        + "Open" + "')", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyLogFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // //console.log("timestamp, ", req.body['timestamp']);
                // //console.log("JSON.stringify(req.body['fileNames'], ", JSON.stringify(req.body['fileNames']));
                // const { status, stdout, stderr } = await java.run([req.body['timestamp'] + ";" + req.body['clientid'] + ";recertification_audit_client_files", JSON.stringify(req.body['fileNames'])]);
                // console.log(stdout);
                res.send("Recertification Audit Added Successfully");
            }
        });
    });
});
app.post('/add_surveillance_audit_plan', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("surveillance_audit_plans");
    addUser({
        'surveillanceAuditPlanDescription': req.body['stage1PlanDescription'],
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['clientid']);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                //res.send('Customer Application Added Successfully');
                db=admin.database();
                userRef=db.ref("surveillance_audit_clients/" + req.body.clientid  + "/surveillance_plan_status");
                userRef.set("In-Progress");
                userRef=db.ref("surveillance_audit_clients/" + req.body.clientid  + "/surveillance_audit_plan_date");
                userRef.set(req.body['date'], (err) => {
                    client.delete();
                    res.send('Surveillance Audit Plan Added Successfully');
                });
                //res.send('Surveillance Audit Plan Added Successfully');
                //client.delete();
            }
            //client.delete();
        })
    }
});
app.post('/offline__add_surveillance_audit_plan', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO surveillance_audit_plans VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['surveillancePlanDescription'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                request.query("UPDATE surveillance_audit_clients SET surveillance_audit_plan_date = '" 
                + req.body['date'] + "', surveillance_plan_status = 'In-Progress' WHERE client_id = '" 
                + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                    if (iErr)
                    {
                        console.log(iErr);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        const { JavaCaller } = require("java-caller");
                        const java = new JavaCaller({
                            classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                            mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                            rootPath: __dirname,
                        });
                        const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";surveillance_audit_plans", JSON.stringify(req.body['fileNames'])]);
                        console.log(stdout);
                        res.send("Surveillance Audit Plan Added Successfully");
                    }
                });
            }
        });
    });
});
app.post('/aws_rds__add_surveillance_audit_plan', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO surveillance_audit_plans VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['surveillancePlanDescription'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                sql.query("UPDATE surveillance_audit_clients SET surveillance_audit_plan_date = '" 
                + req.body['date'] + "', surveillance_plan_status = 'In-Progress' WHERE client_id = '" 
                + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                    sql.end();
                    if (iErr)
                    {
                        console.log(iErr);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        // const { JavaCaller } = require("java-caller");
                        // const java = new JavaCaller({
                        //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                        //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                        //     rootPath: __dirname,
                        // });
                        // const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";surveillance_audit_plans", JSON.stringify(req.body['fileNames'])]);
                        // console.log(stdout);
                        res.send("Surveillance Audit Plan Added Successfully");
                    }
                });
            }
        });
    });
});
app.post('/add_recertification_audit_plan', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("recertification_audit_plans");
    addUser({
        'recertificationAuditPlanDescription': req.body['stage1PlanDescription'],
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['clientid']);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                //res.send('Customer Application Added Successfully');
                db=admin.database();
                userRef=db.ref("recertification_audit_clients/" + req.body.clientid  + "/recertification_plan_status");
                userRef.set("In-Progress");
                userRef=db.ref("recertification_audit_clients/" + req.body.clientid  + "/recertification_audit_plan_date");
                userRef.set(req.body['date'], (err) => {
                    client.delete();
                    res.send('Recertification Audit Plan Added Successfully');
                });
                //res.send('Recertification Audit Plan Added Successfully');
                //client.delete();
            }
            //client.delete();
        })
    }
});
app.post('/offline__add_recertification_audit_plan', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO recertification_audit_plans VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['recertificationPlanDescription'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                request.query("UPDATE recertification_audit_clients SET recertification_audit_plan_date = '" 
                + req.body['date'] + "', recertification_plan_status = 'In-Progress' WHERE client_id = '" 
                + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                    if (iErr)
                    {
                        console.log(iErr);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        const { JavaCaller } = require("java-caller");
                        const java = new JavaCaller({
                            classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                            mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                            rootPath: __dirname,
                        });
                        const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";recertification_audit_plans", JSON.stringify(req.body['fileNames'])]);
                        console.log(stdout);
                        res.send("Recertification Audit Plan Added Successfully");
                    }
                });
            }
        });
    });
});
app.post('/aws_rds__add_recertification_audit_plan', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO recertification_audit_plans VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['recertificationPlanDescription'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                sql.query("UPDATE recertification_audit_clients SET recertification_audit_plan_date = '" 
                + req.body['date'] + "', recertification_plan_status = 'In-Progress' WHERE client_id = '" 
                + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                    sql.end();
                    if (iErr)
                    {
                        console.log(iErr);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        // const { JavaCaller } = require("java-caller");
                        // const java = new JavaCaller({
                        //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                        //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                        //     rootPath: __dirname,
                        // });
                        // const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";recertification_audit_plans", JSON.stringify(req.body['fileNames'])]);
                        // console.log(stdout);
                        res.send("Recertification Audit Plan Added Successfully");
                    }
                });
            }
        });
    });
});
app.post('/add_stage1_audit_plan_task_list', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("stage1_audit_plans");
    //console.log("req.body['clientid']: ", req.body['clientid']);
    addUser({
        'taskList': req.body['taskList'],
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['clientid']);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                //res.send('Customer Application Added Successfully');
                db=admin.database();
                userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/stage1_plan_task_status");
                userRef.set("In-Progress");
                res.send('Stage 1 Audit Plan Task Added Successfully');
                client.delete();
            }
            client.delete();
        })
    }
});
app.post('/offline__add_stage1_audit_plan_task_list', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        for (var intIdx = 0; intIdx < req.body['taskList'].length; intIdx++)
        {
            await request.query("INSERT INTO stage1_audit_plan_task_list VALUES ('" 
            + req.body['userid'] + "', '"
            + req.body['clientid'] + "', '"
            + req.body['timestamp'] + "', '"
            + req.body['taskList'][intIdx]['Member Assigned'] + "', '"
            + req.body['taskList'][intIdx]['Task Description'] + "', '"
            + req.body['taskList'][intIdx]['Task Name'] + "')");
        }
        await request.query("UPDATE Form_Data SET stage1_plan_task_status = 'In-Progress' WHERE client_id = '" + req.body['clientid'] + "'");
        res.send('Stage 1 Audit Plan Task Added Successfully');
    });
});
app.post('/aws_rds__add_stage1_audit_plan_task_list', (req, res) => {
    try
    {
        var mysql = require("mysql");
        // const fs = require('fs');
        // var info = {};
        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
        // allFileContents.split(/\r?\n/).forEach(line =>  {        
        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
        // });
        var sql = mysql.createConnection({
            host     : DBENDPOINT,
            user     : "admin",
            password : "qwertyui",
            port     : "3306",
            database : "mydb"
        });
        sql.connect(async function (err) {
            if (err) console.log(err);
            else console.log('connected');
            //var request = new sql.Request();
            for (var intIdx = 0; intIdx < req.body['taskList'].length; intIdx++)
            {
                await sql.query("INSERT INTO stage1_audit_plan_task_list VALUES ('" 
                + req.body['userid'] + "', '"
                + req.body['clientid'] + "', '"
                + req.body['timestamp'] + "', '"
                + req.body['taskList'][intIdx]['Member Assigned'] + "', '"
                + req.body['taskList'][intIdx]['Task Description'] + "', '"
                + req.body['taskList'][intIdx]['Task Name'] + "')");
            }
            await sql.query("UPDATE Form_Data SET stage1_plan_task_status = 'In-Progress' WHERE client_id = '" + req.body['clientid'] + "'");
            sql.end();
            res.send('Stage 1 Audit Plan Task Added Successfully');
        });
    }
    catch(error)
    {
        console.log(error);
        if (client) client.delete();
        if (sql) sql.end();
        //res.send("Something Went wrong please try again");
    }
});
app.post('/aws_rds__add_stage1_attendance_list', (req, res) => {
    try
    {
        var serviceAccount = require('./admin_group_chat.json');
        var client;
        if (!admin.apps.length) {
            client = admin.initializeApp({
                credential: admin.credential.cert(serviceAccount),
                databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
                authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
            });
        }else {
            client = admin.app(); // if already initialized, use that one
            client.delete();
            client = admin.initializeApp({
                credential: admin.credential.cert(serviceAccount),
                databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
                authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
            });
        }
        var db=admin.database();
        var initTodayDate = new Date();
        var idd = String(initTodayDate.getDate()).padStart(2, '0');
        var imm = String(initTodayDate.getMonth() + 1).padStart(2, '0'); //January is 0!
        var iyyyy = initTodayDate.getFullYear();
        var ihh = String(initTodayDate.getHours()).padStart(2, '0');
        var imins = String(initTodayDate.getMinutes()).padStart(2, '0');
        var iss = String(initTodayDate.getSeconds()).padStart(2, '0');
        var NoToMonth = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
        var mysql = require("mysql");
        // const fs = require('fs');
        // var info = {};
        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
        // allFileContents.split(/\r?\n/).forEach(line =>  {        
        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
        // });
        var sql = mysql.createConnection({
            host     : DBENDPOINT,
            user     : "admin",
            password : "qwertyui",
            port     : "3306",
            database : "mydb"
        });
        sql.connect(async function (err) {
            if (err) console.log(err);
            else console.log('connected');
            var userRef= await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 1 Audit/Groups/group 1");
            await userRef.set("");
            //var request = new sql.Request();
            var errorInsertAttendance = "";
            for (var intIdx = 0; intIdx < req.body['taskList'].length; intIdx++)
            {
                var resInsertAttendance = await sql.query("INSERT INTO stage1_audit_plan_attendance_list VALUES ('" 
                + req.body['userid'] + "', '"
                + req.body['client_id'] + "', '"
                + req.body['taskList'][intIdx]['checklist_id'] + "', '"
                + req.body['taskList'][intIdx]['template_name'] + "', '"
                + req.body['attendance_id'] + "', '"
                + req.body['taskList'][intIdx]['member_id'] + "', '"
                + req.body['taskList'][intIdx]['Member Name'] + "', '"
                + req.body['taskList'][intIdx]['Work Description'] + "', '"
                + req.body['taskList'][intIdx]['address'] + "', '"
                + String(req.body['taskList'][intIdx]['latitude']) + "', '"
                + String(req.body['taskList'][intIdx]['longitude']) + "', '"
                + req.body['audit_status'] + "', '"
                + "Unmarked" + "', '"
                + "" + "', '"
                + "" + "', '"
                + "" + "', '"
                + "" + "', '"
                + "" + "', '"
                + "" + "')");
                errorInsertAttendance = "";
                if (resInsertAttendance._connection._socket._writableState.errored)
                    errorInsertAttendance = resInsertAttendance._connection._socket._writableState.errored.message;
                if (errorInsertAttendance == "getaddrinfo ENOTFOUND " + DBENDPOINT) continue;
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 1 Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/device_token");
                await userRef.set(req.body['taskList'][intIdx]['member_id']);
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 1 Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/device_token");
                await userRef.set(req.body['taskList'][intIdx]['member_id']);

                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 1 Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/name");
                await userRef.set(req.body['taskList'][intIdx]['Member Name']);
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 1 Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/name");
                await userRef.set(req.body['taskList'][intIdx]['Member Name']);

                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 1 Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/status");
                await userRef.set("avail");
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 1 Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/status");
                await userRef.set("avail");

                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 1 Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/uid");
                await userRef.set(req.body['taskList'][intIdx]['member_id']);
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 1 Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/uid");
                await userRef.set(req.body['taskList'][intIdx]['member_id']);

                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 1 Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/date");
                await userRef.set(NoToMonth[parseInt(imm)] + " " + idd + ", " + iyyyy);
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 1 Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/date");
                await userRef.set(idd + "-" + imm + "-" + iyyyy);

                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 1 Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/state");
                await userRef.set("offline");
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 1 Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/state");
                await userRef.set("offline");

                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 1 Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/time");
                await userRef.set(ihh + ":" + imins + " " + iss);
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 1 Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/time");
                await userRef.set(ihh + ":" + imins + ":" + iss);

                for (var intIIdx = 0; intIIdx < req.body['taskList'].length; intIIdx++)
                {
                    if (intIdx != intIIdx)
                    {
                        userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 1 Audit/Contacts/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/" + req.body['taskList'][intIIdx]['group_chat_google_id'] + "/Contact");
                        await userRef.set("Saved");
                        userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 1 Audit/personal_chats/Contacts/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/" + req.body['taskList'][intIIdx]['group_chat_google_id'] + "/Contact");
                        await userRef.set("Saved");
                    }
                }
            }
            var resInsertAttendanceInList = await sql.query("INSERT INTO attendance_list VALUES ('" 
                + req.body['userid'] + "', '"
                + req.body['client_id'] + "', '"
                + req.body['attendance_id'] + "', '"
                + "Stage 1 Audit" + "', '"
                + idd + "-" + imm + "-" + iyyyy + "', '"
                + ihh + ":" + imins + ":" + iss + "')");
            //await sql.query("UPDATE Form_Data SET stage1_plan_task_status = 'In-Progress' WHERE client_id = '" + req.body['clientid'] + "'");
            if (resInsertAttendance._connection._socket._writableState.errored)
                errorInsertAttendance = resInsertAttendance._connection._socket._writableState.errored.message;
            var errorInsertAttendanceInList = "";
            if (resInsertAttendanceInList._connection._socket._writableState.errored)
                errorInsertAttendanceInList = resInsertAttendanceInList._connection._socket._writableState.errored.message;
            sql.end();
            client.delete();
            if (errorInsertAttendance == "getaddrinfo ENOTFOUND " + DBENDPOINT || errorInsertAttendanceInList == "getaddrinfo ENOTFOUND " + DBENDPOINT)
            {
                res.send('Internet connection lost. Please try again');    
            }
            else res.send('Attendance Data Added Successfully');
        });
    }
    catch(error)
    {
        console.log(error);
        if (client) client.delete();
        if (sql) sql.end();
        //res.send("Something Went wrong please try again");
    }
});
app.post('/aws_rds__add_stage2_attendance_list', (req, res) => {
    try
    {
        var serviceAccount = require('./admin_group_chat.json');
        var client;
        if (!admin.apps.length) {
            client = admin.initializeApp({
                credential: admin.credential.cert(serviceAccount),
                databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
                authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
            });
        }else {
            client = admin.app(); // if already initialized, use that one
            client.delete();
            client = admin.initializeApp({
                credential: admin.credential.cert(serviceAccount),
                databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
                authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
            });
        }
        var db=admin.database();
        var initTodayDate = new Date();
        var idd = String(initTodayDate.getDate()).padStart(2, '0');
        var imm = String(initTodayDate.getMonth() + 1).padStart(2, '0'); //January is 0!
        var iyyyy = initTodayDate.getFullYear();
        var ihh = String(initTodayDate.getHours()).padStart(2, '0');
        var imins = String(initTodayDate.getMinutes()).padStart(2, '0');
        var iss = String(initTodayDate.getSeconds()).padStart(2, '0');
        var NoToMonth = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
        var mysql = require("mysql");
        // const fs = require('fs');
        // var info = {};
        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
        // allFileContents.split(/\r?\n/).forEach(line =>  {        
        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
        // });
        var sql = mysql.createConnection({
            host     : DBENDPOINT,
            user     : "admin",
            password : "qwertyui",
            port     : "3306",
            database : "mydb"
        });
        sql.connect(async function (err) {
            if (err) console.log(err);
            else console.log('connected');
            var userRef= await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 2 Audit/Groups/group 1");
            await userRef.set("");
            //var request = new sql.Request();
            var errorInsertAttendance = "";
            for (var intIdx = 0; intIdx < req.body['taskList'].length; intIdx++)
            {
                var resInsertAttendance = await sql.query("INSERT INTO stage2_audit_plan_attendance_list VALUES ('" 
                + req.body['userid'] + "', '"
                + req.body['client_id'] + "', '"
                + req.body['taskList'][intIdx]['checklist_id'] + "', '"
                + req.body['taskList'][intIdx]['template_name'] + "', '"
                + req.body['attendance_id'] + "', '"
                + req.body['taskList'][intIdx]['member_id'] + "', '"
                + req.body['taskList'][intIdx]['Member Name'] + "', '"
                + req.body['taskList'][intIdx]['Work Description'] + "', '"
                + req.body['taskList'][intIdx]['address'] + "', '"
                + String(req.body['taskList'][intIdx]['latitude']) + "', '"
                + String(req.body['taskList'][intIdx]['longitude']) + "', '"
                + req.body['audit_status'] + "', '"
                + "Unmarked" + "', '"
                + "" + "', '"
                + "" + "', '"
                + "" + "', '"
                + "" + "', '"
                + "" + "', '"
                + "" + "')");
                errorInsertAttendance = "";
                if (resInsertAttendance._connection._socket._writableState.errored)
                    errorInsertAttendance = resInsertAttendance._connection._socket._writableState.errored.message;
                if (errorInsertAttendance == "getaddrinfo ENOTFOUND " + DBENDPOINT) continue;
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 2 Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/device_token");
                await userRef.set(req.body['taskList'][intIdx]['member_id']);
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 2 Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/device_token");
                await userRef.set(req.body['taskList'][intIdx]['member_id']);

                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 2 Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/name");
                await userRef.set(req.body['taskList'][intIdx]['Member Name']);
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 2 Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/name");
                await userRef.set(req.body['taskList'][intIdx]['Member Name']);

                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 2 Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/status");
                await userRef.set("avail");
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 2 Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/status");
                await userRef.set("avail");

                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 2 Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/uid");
                await userRef.set(req.body['taskList'][intIdx]['member_id']);
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 2 Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/uid");
                await userRef.set(req.body['taskList'][intIdx]['member_id']);

                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 2 Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/date");
                await userRef.set(NoToMonth[parseInt(imm)] + " " + idd + ", " + iyyyy);
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 2 Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/date");
                await userRef.set(idd + "-" + imm + "-" + iyyyy);

                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 2 Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/state");
                await userRef.set("offline");
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 2 Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/state");
                await userRef.set("offline");

                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 2 Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/time");
                await userRef.set(ihh + ":" + imins + " " + iss);
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 2 Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/time");
                await userRef.set(ihh + ":" + imins + ":" + iss);

                for (var intIIdx = 0; intIIdx < req.body['taskList'].length; intIIdx++)
                {
                    if (intIdx != intIIdx)
                    {
                        userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 2 Audit/Contacts/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/" + req.body['taskList'][intIIdx]['group_chat_google_id'] + "/Contact");
                        await userRef.set("Saved");
                        userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Stage 2 Audit/personal_chats/Contacts/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/" + req.body['taskList'][intIIdx]['group_chat_google_id'] + "/Contact");
                        await userRef.set("Saved");
                    }
                }
            }
            var resInsertAttendanceInList = await sql.query("INSERT INTO attendance_list VALUES ('" 
                + req.body['userid'] + "', '"
                + req.body['client_id'] + "', '"
                + req.body['attendance_id'] + "', '"
                + "Stage 2 Audit" + "', '"
                + idd + "-" + imm + "-" + iyyyy + "', '"
                + ihh + ":" + imins + ":" + iss + "')");
            if (resInsertAttendance._connection._socket._writableState.errored)
                errorInsertAttendance = resInsertAttendance._connection._socket._writableState.errored.message;
            var errorInsertAttendanceInList = "";
            if (resInsertAttendanceInList._connection._socket._writableState.errored)
                errorInsertAttendanceInList = resInsertAttendanceInList._connection._socket._writableState.errored.message;
            //await sql.query("UPDATE Form_Data SET stage1_plan_task_status = 'In-Progress' WHERE client_id = '" + req.body['clientid'] + "'");
            sql.end();
            client.delete();
            if (errorInsertAttendance == "getaddrinfo ENOTFOUND " + DBENDPOINT || errorInsertAttendanceInList == "getaddrinfo ENOTFOUND " + DBENDPOINT)
            {
                res.send('Internet connection lost. Please try again');    
            }
            else res.send('Attendance Data Added Successfully');
        });
    }
    catch(error)
    {
        console.log(error);
        if (client) client.delete();
        if (sql) sql.end();
        //res.send("Something Went wrong please try again");
    }
});
app.post('/aws_rds__add_surveillance_attendance_list', (req, res) => {
    try
    {
        var serviceAccount = require('./admin_group_chat.json');
        var client;
        if (!admin.apps.length) {
            client = admin.initializeApp({
                credential: admin.credential.cert(serviceAccount),
                databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
                authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
            });
        }else {
            client = admin.app(); // if already initialized, use that one
            client.delete();
            client = admin.initializeApp({
                credential: admin.credential.cert(serviceAccount),
                databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
                authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
            });
        }
        var db=admin.database();
        var initTodayDate = new Date();
        var idd = String(initTodayDate.getDate()).padStart(2, '0');
        var imm = String(initTodayDate.getMonth() + 1).padStart(2, '0'); //January is 0!
        var iyyyy = initTodayDate.getFullYear();
        var ihh = String(initTodayDate.getHours()).padStart(2, '0');
        var imins = String(initTodayDate.getMinutes()).padStart(2, '0');
        var iss = String(initTodayDate.getSeconds()).padStart(2, '0');
        var NoToMonth = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
        var mysql = require("mysql");
        // const fs = require('fs');
        // var info = {};
        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
        // allFileContents.split(/\r?\n/).forEach(line =>  {        
        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
        // });
        var sql = mysql.createConnection({
            host     : DBENDPOINT,
            user     : "admin",
            password : "qwertyui",
            port     : "3306",
            database : "mydb"
        });
        sql.connect(async function (err) {
            if (err) console.log(err);
            else console.log('connected');
            var errorInsertAttendance = "";
            var userRef= await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Surveillance Audit/Groups/group 1");
            await userRef.set("");
            //var request = new sql.Request();
            for (var intIdx = 0; intIdx < req.body['taskList'].length; intIdx++)
            {
                var resInsertAttendance = await sql.query("INSERT INTO surveillance_audit_plan_attendance_list VALUES ('" 
                + req.body['userid'] + "', '"
                + req.body['client_id'] + "', '"
                + req.body['taskList'][intIdx]['checklist_id'] + "', '"
                + req.body['taskList'][intIdx]['template_name'] + "', '"
                + req.body['attendance_id'] + "', '"
                + req.body['taskList'][intIdx]['member_id'] + "', '"
                + req.body['taskList'][intIdx]['Member Name'] + "', '"
                + req.body['taskList'][intIdx]['Work Description'] + "', '"
                + req.body['taskList'][intIdx]['address'] + "', '"
                + String(req.body['taskList'][intIdx]['latitude']) + "', '"
                + String(req.body['taskList'][intIdx]['longitude']) + "', '"
                + req.body['audit_status'] + "', '"
                + "Unmarked" + "', '"
                + "" + "', '"
                + "" + "', '"
                + "" + "', '"
                + "" + "', '"
                + "" + "', '"
                + "" + "')");
                errorInsertAttendance = "";
                if (resInsertAttendance._connection._socket._writableState.errored)
                    errorInsertAttendance = resInsertAttendance._connection._socket._writableState.errored.message;
                if (errorInsertAttendance == "getaddrinfo ENOTFOUND " + DBENDPOINT) continue;
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Surveillance Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/device_token");
                await userRef.set(req.body['taskList'][intIdx]['member_id']);
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Surveillance Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/device_token");
                await userRef.set(req.body['taskList'][intIdx]['member_id']);

                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Surveillance Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/name");
                await userRef.set(req.body['taskList'][intIdx]['Member Name']);
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Surveillance Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/name");
                await userRef.set(req.body['taskList'][intIdx]['Member Name']);

                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Surveillance Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/status");
                await userRef.set("avail");
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Surveillance Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/status");
                await userRef.set("avail");

                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Surveillance Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/uid");
                await userRef.set(req.body['taskList'][intIdx]['member_id']);
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Surveillance Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/uid");
                await userRef.set(req.body['taskList'][intIdx]['member_id']);

                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Surveillance Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/date");
                await userRef.set(NoToMonth[parseInt(imm)] + " " + idd + ", " + iyyyy);
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Surveillance Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/date");
                await userRef.set(idd + "-" + imm + "-" + iyyyy);

                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Surveillance Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/state");
                await userRef.set("offline");
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Surveillance Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/state");
                await userRef.set("offline");

                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Surveillance Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/time");
                await userRef.set(ihh + ":" + imins + " " + iss);
                userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Surveillance Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/time");
                await userRef.set(ihh + ":" + imins + ":" + iss);

                for (var intIIdx = 0; intIIdx < req.body['taskList'].length; intIIdx++)
                {
                    if (intIdx != intIIdx)
                    {
                        userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Surveillance Audit/Contacts/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/" + req.body['taskList'][intIIdx]['group_chat_google_id'] + "/Contact");
                        await userRef.set("Saved");
                        userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Surveillance Audit/personal_chats/Contacts/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/" + req.body['taskList'][intIIdx]['group_chat_google_id'] + "/Contact");
                        await userRef.set("Saved");
                    }
                }
            }
            var resInsertAttendanceInList = await sql.query("INSERT INTO attendance_list VALUES ('" 
                + req.body['userid'] + "', '"
                + req.body['client_id'] + "', '"
                + req.body['attendance_id'] + "', '"
                + "Surveillance Audit" + "', '"
                + idd + "-" + imm + "-" + iyyyy + "', '"
                + ihh + ":" + imins + ":" + iss + "')");
            //await sql.query("UPDATE Form_Data SET stage1_plan_task_status = 'In-Progress' WHERE client_id = '" + req.body['clientid'] + "'");
            if (resInsertAttendance._connection._socket._writableState.errored)
                errorInsertAttendance = resInsertAttendance._connection._socket._writableState.errored.message;
            var errorInsertAttendanceInList = "";
            if (resInsertAttendanceInList._connection._socket._writableState.errored)
                errorInsertAttendanceInList = resInsertAttendanceInList._connection._socket._writableState.errored.message;
            sql.end();
            client.delete();
            if (errorInsertAttendance == "getaddrinfo ENOTFOUND " + DBENDPOINT || errorInsertAttendanceInList == "getaddrinfo ENOTFOUND " + DBENDPOINT)
            {
                res.send('Internet connection lost. Please try again');    
            }
            else res.send('Attendance Data Added Successfully');
        });
    }
    catch(error)
    {
        console.log(error);
        if (client) client.delete();
        if (sql) sql.end();
        //res.send("Something Went wrong please try again");
    }
});
app.post('/aws_rds__add_recertification_attendance_list', (req, res) => {
    var serviceAccount = require('./admin_group_chat.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
            authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
            authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var initTodayDate = new Date();
    var idd = String(initTodayDate.getDate()).padStart(2, '0');
    var imm = String(initTodayDate.getMonth() + 1).padStart(2, '0'); //January is 0!
    var iyyyy = initTodayDate.getFullYear();
    var ihh = String(initTodayDate.getHours()).padStart(2, '0');
    var imins = String(initTodayDate.getMinutes()).padStart(2, '0');
    var iss = String(initTodayDate.getSeconds()).padStart(2, '0');
    var NoToMonth = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var userRef= await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Recertification Audit/Groups/group 1");
        await userRef.set("");
        //var request = new sql.Request();
        var errorInsertAttendance = "";
        for (var intIdx = 0; intIdx < req.body['taskList'].length; intIdx++)
        {
            var resInsertAttendance = await sql.query("INSERT INTO recertification_audit_plan_attendance_list VALUES ('" 
            + req.body['userid'] + "', '"
            + req.body['client_id'] + "', '"
            + req.body['taskList'][intIdx]['checklist_id'] + "', '"
            + req.body['taskList'][intIdx]['template_name'] + "', '"
            + req.body['attendance_id'] + "', '"
            + req.body['taskList'][intIdx]['member_id'] + "', '"
            + req.body['taskList'][intIdx]['Member Name'] + "', '"
            + req.body['taskList'][intIdx]['Work Description'] + "', '"
            + req.body['taskList'][intIdx]['address'] + "', '"
            + String(req.body['taskList'][intIdx]['latitude']) + "', '"
            + String(req.body['taskList'][intIdx]['longitude']) + "', '"
            + req.body['audit_status'] + "', '"
            + "Unmarked" + "', '"
            + "" + "', '"
            + "" + "', '"
            + "" + "', '"
            + "" + "', '"
            + "" + "', '"
            + "" + "')");
            errorInsertAttendance = "";
            if (resInsertAttendance._connection._socket._writableState.errored)
                errorInsertAttendance = resInsertAttendance._connection._socket._writableState.errored.message;
            if (errorInsertAttendance == "getaddrinfo ENOTFOUND " + DBENDPOINT) continue;
            userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Recertification Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/device_token");
            await userRef.set(req.body['taskList'][intIdx]['member_id']);
            userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Recertification Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/device_token");
            await userRef.set(req.body['taskList'][intIdx]['member_id']);

            userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Recertification Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/name");
            await userRef.set(req.body['taskList'][intIdx]['Member Name']);
            userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Recertification Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/name");
            await userRef.set(req.body['taskList'][intIdx]['Member Name']);

            userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Recertification Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/status");
            await userRef.set("avail");
            userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Recertification Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/status");
            await userRef.set("avail");

            userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Recertification Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/uid");
            await userRef.set(req.body['taskList'][intIdx]['member_id']);
            userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Recertification Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/uid");
            await userRef.set(req.body['taskList'][intIdx]['member_id']);

            userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Recertification Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/date");
            await userRef.set(NoToMonth[parseInt(imm)] + " " + idd + ", " + iyyyy);
            userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Recertification Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/date");
            await userRef.set(idd + "-" + imm + "-" + iyyyy);

            userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Recertification Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/state");
            await userRef.set("offline");
            userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Recertification Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/state");
            await userRef.set("offline");

            userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Recertification Audit/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/time");
            await userRef.set(ihh + ":" + imins + " " + iss);
            userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Recertification Audit/personal_chats/Users/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/userState/time");
            await userRef.set(ihh + ":" + imins + ":" + iss);

            for (var intIIdx = 0; intIIdx < req.body['taskList'].length; intIIdx++)
            {
                if (intIdx != intIIdx)
                {
                    userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Recertification Audit/Contacts/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/" + req.body['taskList'][intIIdx]['group_chat_google_id'] + "/Contact");
                    await userRef.set("Saved");
                    userRef = await db.ref(req.body['client_id'] + "_" + req.body['attendance_id'] + "/Recertification Audit/personal_chats/Contacts/" + req.body['taskList'][intIdx]['group_chat_google_id'] + "/" + req.body['taskList'][intIIdx]['group_chat_google_id'] + "/Contact");
                    await userRef.set("Saved");
                }
            }
        }
        var resInsertAttendanceInList = await sql.query("INSERT INTO attendance_list VALUES ('"
            + req.body['userid'] + "', '"
            + req.body['client_id'] + "', '"
            + req.body['attendance_id'] + "', '"
            + "Recertification Audit" + "', '"
            + idd + "-" + imm + "-" + iyyyy + "', '"
            + ihh + ":" + imins + ":" + iss + "')");
        //await sql.query("UPDATE Form_Data SET stage1_plan_task_status = 'In-Progress' WHERE client_id = '" + req.body['clientid'] + "'");
        if (resInsertAttendance._connection._socket._writableState.errored)
            errorInsertAttendance = resInsertAttendance._connection._socket._writableState.errored.message;
        var errorInsertAttendanceInList = "";
        if (resInsertAttendanceInList._connection._socket._writableState.errored)
            errorInsertAttendanceInList = resInsertAttendanceInList._connection._socket._writableState.errored.message;
        sql.end();
        client.delete();
        if (errorInsertAttendance == "getaddrinfo ENOTFOUND " + DBENDPOINT || errorInsertAttendanceInList == "getaddrinfo ENOTFOUND " + DBENDPOINT)
        {
            res.send('Internet connection lost. Please try again');    
        }
        else res.send('Attendance Data Added Successfully');
    });
});
// app.post('/aws_rds__add_recertification_attendance_list', (req, res) => {
//     var mysql = require("mysql");
//     // const fs = require('fs');
//     // var info = {};
//     // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
//     // allFileContents.split(/\r?\n/).forEach(line =>  {        
//     //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
//     // });
//     var sql = mysql.createConnection({
//         host     : DBENDPOINT,
//         user     : "admin",
//         password : "qwertyui",
//         port     : "3306",
//         database : "mydb"
//     });
//     sql.connect(async function (err) {
//         if (err) console.log(err);
//         else console.log('connected');
//         //var request = new sql.Request();
//         for (var intIdx = 0; intIdx < req.body['taskList'].length; intIdx++)
//         {
//             await sql.query("INSERT INTO recertification_audit_plan_attendance_list VALUES ('" 
//             + req.body['taskList'][intIdx]['userid'] + "', '"
//             + req.body['taskList'][intIdx]['client_id'] + "', '"
//             + req.body['taskList'][intIdx]['id'] + "', '"
//             + req.body['taskList'][intIdx]['Member Name'] + "', '"
//             + req.body['taskList'][intIdx]['Work Description'] + "', '"
//             + req.body['taskList'][intIdx]['address'] + "', '"
//             + req.body['taskList'][intIdx]['latitude'] + "', '"
//             + req.body['taskList'][intIdx]['longitude'] + "', '"
//             + req.body['taskList'][intIdx]['audit_status'] + "', '"
//             + "Unmarked" + "')");
//         }
//         //await sql.query("UPDATE Form_Data SET stage1_plan_task_status = 'In-Progress' WHERE client_id = '" + req.body['clientid'] + "'");
//         sql.end();
//         res.send('Attendance Data Added Successfully');
//     });
// });
app.post('/offline__add_stage2_audit_plan_task_list', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        for (var intIdx = 0; intIdx < req.body['taskList'].length; intIdx++)
        {
            await request.query("INSERT INTO stage2_audit_plan_task_list VALUES ('" 
            + req.body['userid'] + "', '"
            + req.body['clientid'] + "', '"
            + req.body['timestamp'] + "', '"
            + req.body['taskList'][intIdx]['Member Assigned'] + "', '"
            + req.body['taskList'][intIdx]['Task Description'] + "', '"
            + req.body['taskList'][intIdx]['Task Name'] + "')");
        }
        await request.query("UPDATE Form_Data SET stage2_plan_task_status = 'In-Progress' WHERE client_id = '" + req.body['clientid'] + "'");
        res.send('Stage 2 Audit Plan Task Added Successfully');
    });
});
app.post('/aws_rds__add_stage2_audit_plan_task_list', (req, res) => {
    try
    {
        var mysql = require("mysql");
        // const fs = require('fs');
        // var info = {};
        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
        // allFileContents.split(/\r?\n/).forEach(line =>  {        
        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
        // });
        var sql = mysql.createConnection({
            host     : DBENDPOINT,
            user     : "admin",
            password : "qwertyui",
            port     : "3306",
            database : "mydb"
        });
        sql.connect(async function (err) {
            if (err) console.log(err);
            else console.log('connected');
            //var request = new sql.Request();
            for (var intIdx = 0; intIdx < req.body['taskList'].length; intIdx++)
            {
                await sql.query("INSERT INTO stage2_audit_plan_task_list VALUES ('" 
                + req.body['userid'] + "', '"
                + req.body['clientid'] + "', '"
                + req.body['timestamp'] + "', '"
                + req.body['taskList'][intIdx]['Member Assigned'] + "', '"
                + req.body['taskList'][intIdx]['Task Description'] + "', '"
                + req.body['taskList'][intIdx]['Task Name'] + "')");
            }
            await sql.query("UPDATE Form_Data SET stage2_plan_task_status = 'In-Progress' WHERE client_id = '" + req.body['clientid'] + "'");
            sql.end();
            res.send('Stage 2 Audit Plan Task Added Successfully');
        });
    }
    catch(error)
    {
        console.log(error);
        if (client) client.delete();
        if (sql) sql.end();
        //res.send("Something Went wrong please try again");
    }
});
app.post('/add_surveillance_audit_plan_task_list', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("surveillance_audit_plans");
    //console.log("req.body['clientid']: ", req.body['clientid']);
    addUser({
        'taskList': req.body['taskList'],
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['clientid']);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                //res.send('Customer Application Added Successfully');
                db=admin.database();
                userRef=db.ref("surveillance_audit_clients/" + req.body.clientid  + "/surveillance_plan_task_status");
                userRef.set("In-Progress");
                res.send('Surveillance Audit Plan Task Added Successfully');
                client.delete();
            }
            client.delete();
        })
    }
});
app.post('/offline__add_surveillance_audit_plan_task_list', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        for (var intIdx = 0; intIdx < req.body['taskList'].length; intIdx++)
        {
            await request.query("INSERT INTO surveillance_audit_plan_task_list VALUES ('" 
            + req.body['userid'] + "', '"
            + req.body['clientid'] + "', '"
            + req.body['timestamp'] + "', '"
            + req.body['taskList'][intIdx]['Member Assigned'] + "', '"
            + req.body['taskList'][intIdx]['Task Description'] + "', '"
            + req.body['taskList'][intIdx]['Task Name'] + "')");
        }
        await request.query("UPDATE surveillance_audit_clients SET surveillance_plan_task_status = 'In-Progress' WHERE client_id = '" + req.body['clientid'] + "'");
        res.send('Surveillance Audit Plan Task Added Successfully');
    });
});
app.post('/aws_rds__add_surveillance_audit_plan_task_list', (req, res) => {
    try
    {
        var mysql = require("mysql");
        // const fs = require('fs');
        // var info = {};
        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
        // allFileContents.split(/\r?\n/).forEach(line =>  {        
        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
        // });
        var sql = mysql.createConnection({
            host     : DBENDPOINT,
            user     : "admin",
            password : "qwertyui",
            port     : "3306",
            database : "mydb"
        });
        sql.connect(async function (err) {
            if (err) console.log(err);
            else console.log('connected');
            //var request = new sql.Request();
            for (var intIdx = 0; intIdx < req.body['taskList'].length; intIdx++)
            {
                await sql.query("INSERT INTO surveillance_audit_plan_task_list VALUES ('" 
                + req.body['userid'] + "', '"
                + req.body['clientid'] + "', '"
                + req.body['timestamp'] + "', '"
                + req.body['taskList'][intIdx]['Member Assigned'] + "', '"
                + req.body['taskList'][intIdx]['Task Description'] + "', '"
                + req.body['taskList'][intIdx]['Task Name'] + "')");
            }
            await sql.query("UPDATE surveillance_audit_clients SET surveillance_plan_task_status = 'In-Progress' WHERE client_id = '" + req.body['clientid'] + "'");
            sql.end();
            res.send('Surveillance Audit Plan Task Added Successfully');
        });
    }
    catch(error)
    {
        console.log(error);
        if (client) client.delete();
        if (sql) sql.end();
        //res.send("Something Went wrong please try again");
    }
});
app.post('/add_recertification_audit_plan_task_list', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("recertification_audit_plans");
    //console.log("req.body['clientid']: ", req.body['clientid']);
    addUser({
        'taskList': req.body['taskList'],
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['clientid']);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                //res.send('Customer Application Added Successfully');
                db=admin.database();
                userRef=db.ref("recertification_audit_clients/" + req.body.clientid  + "/recertification_plan_task_status");
                userRef.set("In-Progress");
                res.send('Recertification Audit Plan Task Added Successfully');
                client.delete();
            }
            client.delete();
        })
    }
});
app.post('/offline__add_recertification_audit_plan_task_list', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        for (var intIdx = 0; intIdx < req.body['taskList'].length; intIdx++)
        {
            await request.query("INSERT INTO recertification_audit_plan_task_list VALUES ('" 
            + req.body['userid'] + "', '"
            + req.body['clientid'] + "', '"
            + req.body['timestamp'] + "', '"
            + req.body['taskList'][intIdx]['Member Assigned'] + "', '"
            + req.body['taskList'][intIdx]['Task Description'] + "', '"
            + req.body['taskList'][intIdx]['Task Name'] + "')");
        }
        await request.query("UPDATE recertification_audit_clients SET recertification_plan_task_status = 'In-Progress' WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'");
        res.send('Recertification Audit Plan Task Added Successfully');
    });
});
app.post('/aws_rds__add_recertification_audit_plan_task_list', (req, res) => {
    try
    {
        var mysql = require("mysql");
        // const fs = require('fs');
        // var info = {};
        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
        // allFileContents.split(/\r?\n/).forEach(line =>  {        
        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
        // });
        var sql = mysql.createConnection({
            host     : DBENDPOINT,
            user     : "admin",
            password : "qwertyui",
            port     : "3306",
            database : "mydb"
        });
        sql.connect(async function (err) {
            if (err) console.log(err);
            else console.log('connected');
            //var request = new sql.Request();
            for (var intIdx = 0; intIdx < req.body['taskList'].length; intIdx++)
            {
                await sql.query("INSERT INTO recertification_audit_plan_task_list VALUES ('" 
                + req.body['userid'] + "', '"
                + req.body['clientid'] + "', '"
                + req.body['timestamp'] + "', '"
                + req.body['taskList'][intIdx]['Member Assigned'] + "', '"
                + req.body['taskList'][intIdx]['Task Description'] + "', '"
                + req.body['taskList'][intIdx]['Task Name'] + "')");
            }
            await sql.query("UPDATE recertification_audit_clients SET recertification_plan_task_status = 'In-Progress' WHERE client_id = '" + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'");
            sql.end();
            res.send('Recertification Audit Plan Task Added Successfully');
        });
    }
    catch(error)
    {
        console.log(error);
        if (client) client.delete();
        if (sql) sql.end();
        //res.send("Something Went wrong please try again");
    }
});
app.post('/add_stage2_audit_plan_task_list', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("stage2_audit_plans");
    //console.log("req.body['clientid']: ", req.body['clientid']);
    addUser({
        'taskList': req.body['taskList'],
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['clientid']);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                //res.send('Customer Application Added Successfully');
                db=admin.database();
                userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/stage2_plan_task_status");
                userRef.set("In-Progress");
                res.send('Stage 2 Audit Plan Task Added Successfully');
                client.delete();
            }
            client.delete();
        })
    }
});
app.post('/delete_stage1_audit_plan_files', async (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/stage1_audit_plan/" + req.body['clientid'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/stage1_audit_plan/' + req.body['clientid'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/delete_stage1_audit_plan_log_files', async (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/stage1_audit_plan/" + req.body['clientid'] + "/logs/" + req.body['timestamp'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/stage1_audit_plan/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/delete_customer_application_log_files', async (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/init_certification_client_application/" + req.body['clientid'] + "/logs/" + req.body['timestamp'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/init_certification_client_application/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/delete_stage2_audit_plan_log_files', async (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/stage2_audit_plan/" + req.body['clientid'] + "/logs/" + req.body['timestamp'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/stage2_audit_plan/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/delete_surveillance_audit_plan_log_files', async (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/surveillance_audit_plans/" + req.body['clientid'] + "/logs/" + req.body['timestamp'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/surveillance_audit_plans/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/delete_recertification_audit_plan_log_files', async (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/recertification_audit_plans/" + req.body['clientid'] + "/logs/" + req.body['timestamp'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/recertification_audit_plans/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/delete_quotation_log_files', async (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/quotation_files/" + req.body['clientid'] + "/logs/" + req.body['timestamp'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/quotations/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/delete_ho_activity_log_files', async (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/HOActivity_files/" + req.body['clientid'] + "/logs/" + req.body['timestamp'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/HOActivity_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/delete_surveillance_audit_log_files', async (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/surveillance_audit_files/" + req.body['clientid'] + "/logs/" + req.body['timestamp'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/surveillance_audit_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/delete_recertification_audit_log_files', async (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/recertification_audit_files/" + req.body['clientid'] + "/logs/" + req.body['timestamp'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/recertification_audit_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/delete_initial_certification_conclusion_log_files', async (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/initial_certification_conclusion_files/" + req.body['clientid'] + "/logs/" + req.body['timestamp'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/initial_certification_conclusion_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/delete_surveillance_audit_conclusion_log_files', async (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/surveillance_audit_conclusion_files/" + req.body['clientid'] + "/logs/" + req.body['timestamp'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/surveillance_audit_conclusion_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/delete_recertification_audit_conclusion_log_files', async (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/recertification_audit_conclusion_files/" + req.body['clientid'] + "/logs/" + req.body['timestamp'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/recertification_audit_conclusion_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/delete_initial_certification_files', async (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/init_certification_client_application/" + req.body['clientid'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/init_certification_client_application/' + req.body['clientid'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/delete_surveillance_audit_plan_files', async (req, res) => {
    //console.log(req.body['clientid']);
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/surveillance_audit_plans/" + req.body['clientid'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    //console.log('domains/cwac.in/public_html/surveillance_audit_plans/' + req.body['clientid'] + "/" + list[intIdx].name);
                    await ftpClient.delete('domains/cwac.in/public_html/surveillance_audit_plans/' + req.body['clientid'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/delete_recertification_audit_plan_files', async (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/recertification_audit_plans/" + req.body['clientid'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/recertification_audit_plans/' + req.body['clientid'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/delete_stage2_audit_plan_files', async (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', async function() {
        //console.log(req.body['clientid']);
        ftpClient.list("domains/cwac.in/public_html/stage2_audit_plan/" + req.body['clientid'], false, async function( err, list ) {
            //console.log('here');
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            //console.log(list);
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/stage2_audit_plan/' + req.body['clientid'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            //console.log('success');
            res.send("Success");
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/delete_HOActivity_files', async (req, res) => {
    const ftpClient = new Ftp();
    await ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
    await ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/HOActivity_files/" + req.body['clientid'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/HOActivity_files/' + req.body['clientid'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
        });
    });
    await ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/HOActivity_files/" + req.body['clientid'] + "/contract_review_form", false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/HOActivity_files/' + req.body['clientid'] + "/contract_review_form/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
        });
    });
    await ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/HOActivity_files/" + req.body['clientid'] + "/audit_document_checklist", false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/HOActivity_files/' + req.body['clientid'] + "/audit_document_checklist/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
        });
    });
    await ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/HOActivity_files/" + req.body['clientid'] + "/certification_recommendation_report", false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/HOActivity_files/' + req.body['clientid'] + "/certification_recommendation_report/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
});
app.post('/delete_initial_certification_conclusion_files', async (req, res) => {
    const ftpClient = new Ftp();
    await ftpClient.connect({
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
    await ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/initial_certification_conclusion_files/" + req.body['clientid'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/initial_certification_conclusion_files/' + req.body['clientid'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
});
app.post('/delete_surveillance_audit_conclusion_files', async (req, res) => {
    const ftpClient = new Ftp();
    await ftpClient.connect({
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
    await ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/surveillance_audit_conclusion_files/" + req.body['clientid'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/surveillance_audit_conclusion_files/' + req.body['clientid'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
});
app.post('/delete_recertification_audit_conclusion_files', async (req, res) => {
    const ftpClient = new Ftp();
    await ftpClient.connect({
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
    await ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/recertification_audit_conclusion_files/" + req.body['clientid'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/recertification_audit_conclusion_files/' + req.body['clientid'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
});
app.post('/delete_surveillance_audit_files', async (req, res) => {
    const ftpClient = new Ftp();
    await ftpClient.connect({
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
    await ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/surveillance_audit_files/" + req.body['clientid'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/surveillance_audit_files/' + req.body['clientid'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
});
app.post('/delete_recertification_audit_files', async (req, res) => {
    const ftpClient = new Ftp();
    await ftpClient.connect({
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
    await ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/recertification_audit_files/" + req.body['clientid'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/recertification_audit_files/' + req.body['clientid'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
});
app.post('/delete_surveillance_audit_files', async (req, res) => {
    const ftpClient = new Ftp();
    await ftpClient.connect({
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
    await ftpClient.on( 'ready', async function() {
        ftpClient.list("domains/cwac.in/public_html/surveillance_audit_files/" + req.body['clientid'], false, async function( err, list ) {
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/initial_certification_conclusion_files/' + req.body['clientid'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            res.send("Success");
            ftpClient.end();
        });
    });
});
app.post('/add_stage1_audit_plan_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Stage 1 Audit Plan', 'No', 'No', '" + 'domains/cwac.in/public_html/stage1_audit_plan/' + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        ftpClient.on( 'ready', function() {
            ftpClient.mkdir('domains/cwac.in/public_html/stage1_audit_plan/' + req.body['timestamp'], true, (err) => {
                if (!err) {
                ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/stage1_audit_plan/' + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                    if ( err ) throw err;
                    ftpClient.end();
                    if (req.body['intIdx'] == req.body['fileLength'] - 1)
                    {
                        var mysql = require("mysql");
                        // const fs = require('fs');
                        // var info = {};
                        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                        // allFileContents.split(/\r?\n/).forEach(line =>  {        
                        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                        // });
                        var sql = mysql.createConnection({
                            host     : DBENDPOINT,
                            user     : "admin",
                            password : "qwertyui",
                            port     : "3306",
                            database : "mydb"
                        });
                        const ConnectToSql = (queryForFilter) => {
                            return new Promise((resolve, reject)=>{
                                sql.connect(function (err) {
                                    if (err) return reject(err);
                                    else return resolve("Connected");
                                });
                            });
                        };
                        const RemoveIncompleteFileUploadState = () => {
                            return new Promise((resolve, reject)=>{
                                sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Stage 1 Audit Plan' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/stage1_audit_plan/' + req.body['timestamp'] + "'",  (error, results)=>{
                                    if(error){
                                        return reject(error);
                                    }
                                    return resolve(results);
                                });
                            });
                        };
                        await ConnectToSql();
                        await RemoveIncompleteFileUploadState();
                        sql.end();
                    }
                    res.send('Stage 1 Audit Plan Added Successfully'); 
                });  
                }
            });
        });
        
        ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_stage1_audit_plan_log_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Stage 1 Audit Plan Logs', 'No', 'No', '" + 'domains/cwac.in/public_html/stage1_audit_plan/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        ftpClient.on( 'ready', function() {
            ftpClient.mkdir('domains/cwac.in/public_html/stage1_audit_plan/' + req.body['clientid'] + "/logs/" + req.body['timestamp'], true, (err) => {
                if (!err) {
                ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/stage1_audit_plan/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                    if ( err ) throw err;
                    ftpClient.end(); 
                    if (req.body['intIdx'] == req.body['fileLength'] - 1)
                    {
                        var mysql = require("mysql");
                        // const fs = require('fs');
                        // var info = {};
                        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                        // allFileContents.split(/\r?\n/).forEach(line =>  {        
                        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                        // });
                        var sql = mysql.createConnection({
                            host     : DBENDPOINT,
                            user     : "admin",
                            password : "qwertyui",
                            port     : "3306",
                            database : "mydb"
                        });
                        const ConnectToSql = (queryForFilter) => {
                            return new Promise((resolve, reject)=>{
                                sql.connect(function (err) {
                                    if (err) return reject(err);
                                    else return resolve("Connected");
                                });
                            });
                        };
                        const RemoveIncompleteFileUploadState = () => {
                            return new Promise((resolve, reject)=>{
                                sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Stage 1 Audit Plan Logs' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/stage1_audit_plan/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "'",  (error, results)=>{
                                    if(error){
                                        return reject(error);
                                    }
                                    return resolve(results);
                                });
                            });
                        };
                        await ConnectToSql();
                        await RemoveIncompleteFileUploadState();
                        sql.end();
                    }
                    res.send('Stage 1 Audit Plan Added Successfully'); 
                });  
                }
            });
        });
        
        ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_stage2_audit_plan_log_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Stage 2 Audit Plan Logs', 'No', 'No', '" + 'domains/cwac.in/public_html/stage2_audit_plan/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        ftpClient.on( 'ready', function() {
            ftpClient.mkdir('domains/cwac.in/public_html/stage2_audit_plan/' + req.body['clientid'] + "/logs/" + req.body['timestamp'], true, (err) => {
                if (!err) {
                ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/stage2_audit_plan/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                    if ( err ) throw err;
                    ftpClient.end();
                    if (req.body['intIdx'] == req.body['fileLength'] - 1)
                    {
                        var mysql = require("mysql");
                        // const fs = require('fs');
                        // var info = {};
                        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                        // allFileContents.split(/\r?\n/).forEach(line =>  {        
                        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                        // });
                        var sql = mysql.createConnection({
                            host     : DBENDPOINT,
                            user     : "admin",
                            password : "qwertyui",
                            port     : "3306",
                            database : "mydb"
                        });
                        const ConnectToSql = (queryForFilter) => {
                            return new Promise((resolve, reject)=>{
                                sql.connect(function (err) {
                                    if (err) return reject(err);
                                    else return resolve("Connected");
                                });
                            });
                        };
                        const RemoveIncompleteFileUploadState = () => {
                            return new Promise((resolve, reject)=>{
                                sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Stage 2 Audit Plan Logs' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/stage2_audit_plan/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "'",  (error, results)=>{
                                    if(error){
                                        return reject(error);
                                    }
                                    return resolve(results);
                                });
                            });
                        };
                        await ConnectToSql();
                        await RemoveIncompleteFileUploadState();
                        sql.end();
                    }
                    res.send('Stage 2 Audit Plan Added Successfully'); 
                });  
                }
            });
        });
        
        ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_surveillance_audit_plan_log_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Surveillance Audit Plan Logs', 'No', 'No', '" + 'domains/cwac.in/public_html/surveillance_audit_plans/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        ftpClient.on( 'ready', function() {
            ftpClient.mkdir('domains/cwac.in/public_html/surveillance_audit_plans/' + req.body['clientid'] + "/logs/" + req.body['timestamp'], true, (err) => {
                if (!err) {
                ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/surveillance_audit_plans/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                    if ( err ) throw err;
                    ftpClient.end();
                    if (req.body['intIdx'] == req.body['fileLength'] - 1)
                    {
                        var mysql = require("mysql");
                        // const fs = require('fs');
                        // var info = {};
                        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                        // allFileContents.split(/\r?\n/).forEach(line =>  {        
                        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                        // });
                        var sql = mysql.createConnection({
                            host     : DBENDPOINT,
                            user     : "admin",
                            password : "qwertyui",
                            port     : "3306",
                            database : "mydb"
                        });
                        const ConnectToSql = (queryForFilter) => {
                            return new Promise((resolve, reject)=>{
                                sql.connect(function (err) {
                                    if (err) return reject(err);
                                    else return resolve("Connected");
                                });
                            });
                        };
                        const RemoveIncompleteFileUploadState = () => {
                            return new Promise((resolve, reject)=>{
                                sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Surveillance Audit Plan Logs' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/surveillance_audit_plans/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "'",  (error, results)=>{
                                    if(error){
                                        return reject(error);
                                    }
                                    return resolve(results);
                                });
                            });
                        };
                        await ConnectToSql();
                        await RemoveIncompleteFileUploadState();
                        sql.end();
                    }
                    res.send('Surveillance Audit Plan Added Successfully'); 
                });  
                }
            });
        });
        
        ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_recertification_audit_plan_log_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Recertification Audit Plan Logs', 'No', 'No', '" + 'domains/cwac.in/public_html/recertification_audit_plans/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        ftpClient.on( 'ready', function() {
            ftpClient.mkdir('domains/cwac.in/public_html/recertification_audit_plans/' + req.body['clientid'] + "/logs/" + req.body['timestamp'], true, (err) => {
                if (!err) {
                ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/recertification_audit_plans/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                    if ( err ) throw err;
                    ftpClient.end();
                    if (req.body['intIdx'] == req.body['fileLength'] - 1)
                    {
                        var mysql = require("mysql");
                        // const fs = require('fs');
                        // var info = {};
                        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                        // allFileContents.split(/\r?\n/).forEach(line =>  {        
                        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                        // });
                        var sql = mysql.createConnection({
                            host     : DBENDPOINT,
                            user     : "admin",
                            password : "qwertyui",
                            port     : "3306",
                            database : "mydb"
                        });
                        const ConnectToSql = (queryForFilter) => {
                            return new Promise((resolve, reject)=>{
                                sql.connect(function (err) {
                                    if (err) return reject(err);
                                    else return resolve("Connected");
                                });
                            });
                        };
                        const RemoveIncompleteFileUploadState = () => {
                            return new Promise((resolve, reject)=>{
                                sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Recertification Audit Plan Logs' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/recertification_audit_plans/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "'",  (error, results)=>{
                                    if(error){
                                        return reject(error);
                                    }
                                    return resolve(results);
                                });
                            });
                        };
                        await ConnectToSql();
                        await RemoveIncompleteFileUploadState();
                        sql.end();
                    }  
                    res.send('Recertification Audit Plan Added Successfully'); 
                });  
                }
            });
        });
        
        ftpClient.connect({
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_quotation_log_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Quotation and Order Confirmation Logs', 'No', 'No', '" + 'domains/cwac.in/public_html/quotation_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
        }
        const ftpClient = new Ftp();
        ftpClient.on( 'ready', function() {
            ftpClient.mkdir('domains/cwac.in/public_html/quotation_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'], true, (err) => {
                if (!err) {
                ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/quotation_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                    if ( err ) throw err;
                    ftpClient.end();
                    if (req.body['intIdx'] == req.body['fileLength'] - 1)
                    {
                        var mysql = require("mysql");
                        // const fs = require('fs');
                        // var info = {};
                        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                        // allFileContents.split(/\r?\n/).forEach(line =>  {        
                        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                        // });
                        var sql = mysql.createConnection({
                            host     : DBENDPOINT,
                            user     : "admin",
                            password : "qwertyui",
                            port     : "3306",
                            database : "mydb"
                        });
                        const ConnectToSql = (queryForFilter) => {
                            return new Promise((resolve, reject)=>{
                                sql.connect(function (err) {
                                    if (err) return reject(err);
                                    else return resolve("Connected");
                                });
                            });
                        };
                        const RemoveIncompleteFileUploadState = () => {
                            return new Promise((resolve, reject)=>{
                                sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Quotation and Order Confirmation Logs' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/quotation_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "'",  (error, results)=>{
                                    if(error){
                                        return reject(error);
                                    }
                                    return resolve(results);
                                });
                            });
                        };
                        await ConnectToSql();
                        await RemoveIncompleteFileUploadState();
                    } 
                    res.send('Quotation Added Successfully'); 
                });  
                }
            });
        });
        
        ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        } );
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_ho_activity_log_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'HO Activity Logs', 'No', 'No', '" + 'domains/cwac.in/public_html/HOActivity_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        ftpClient.on( 'ready', function() {
            ftpClient.mkdir('domains/cwac.in/public_html/HOActivity_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'], true, (err) => {
                if (!err) {
                ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/HOActivity_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                    if ( err ) throw err;
                    ftpClient.end();
                    if (req.body['intIdx'] == req.body['fileLength'] - 1)
                    {
                        var mysql = require("mysql");
                        // const fs = require('fs');
                        // var info = {};
                        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                        // allFileContents.split(/\r?\n/).forEach(line =>  {        
                        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                        // });
                        var sql = mysql.createConnection({
                            host     : DBENDPOINT,
                            user     : "admin",
                            password : "qwertyui",
                            port     : "3306",
                            database : "mydb"
                        });
                        const ConnectToSql = (queryForFilter) => {
                            return new Promise((resolve, reject)=>{
                                sql.connect(function (err) {
                                    if (err) return reject(err);
                                    else return resolve("Connected");
                                });
                            });
                        };
                        const RemoveIncompleteFileUploadState = () => {
                            return new Promise((resolve, reject)=>{
                                sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'HO Activity Logs' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/HOActivity_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "'",  (error, results)=>{
                                    if(error){
                                        return reject(error);
                                    }
                                    return resolve(results);
                                });
                            });
                        };
                        await ConnectToSql();
                        await RemoveIncompleteFileUploadState();
                        sql.end();
                    } 
                    res.send('Head Office Activity Added Successfully'); 
                });  
                }
            });
        });
        
        ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_initial_certification_conclusion_log_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Initial Certification Conclusion Logs', 'No', 'No', '" + 'domains/cwac.in/public_html/initial_certification_conclusion_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        ftpClient.on( 'ready', function() {
            ftpClient.mkdir('domains/cwac.in/public_html/initial_certification_conclusion_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'], true, (err) => {
                if (!err) {
                ftpClient.put(req.file.buffer, 'domains/cwac.in/public_html/initial_certification_conclusion_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                    if ( err ) throw err;
                    ftpClient.end();
                    if (req.body['intIdx'] == req.body['fileLength'] - 1)
                    {
                        var mysql = require("mysql");
                        // const fs = require('fs');
                        // var info = {};
                        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                        // allFileContents.split(/\r?\n/).forEach(line =>  {        
                        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                        // });
                        var sql = mysql.createConnection({
                            host     : DBENDPOINT,
                            user     : "admin",
                            password : "qwertyui",
                            port     : "3306",
                            database : "mydb"
                        });
                        const ConnectToSql = (queryForFilter) => {
                            return new Promise((resolve, reject)=>{
                                sql.connect(function (err) {
                                    if (err) return reject(err);
                                    else return resolve("Connected");
                                });
                            });
                        };
                        const RemoveIncompleteFileUploadState = () => {
                            return new Promise((resolve, reject)=>{
                                sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Initial Certification Conclusion Logs' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/initial_certification_conclusion_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "'",  (error, results)=>{
                                    if(error){
                                        return reject(error);
                                    }
                                    return resolve(results);
                                });
                            });
                        };
                        await ConnectToSql();
                        await RemoveIncompleteFileUploadState();
                        sql.end();
                    }
                    res.send('Initial Certification Conclusion Added Successfully'); 
                });  
                }
            });
        });
        
        ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_surveillance_audit_conclusion_log_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Surveillance Audit Conclusion Logs', 'No', 'No', '" + 'domains/cwac.in/public_html/surveillance_audit_conclusion_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        ftpClient.on( 'ready', function() {
            ftpClient.mkdir('domains/cwac.in/public_html/surveillance_audit_conclusion_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'], true, (err) => {
                if (!err) {
                ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/surveillance_audit_conclusion_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                    if ( err ) throw err;
                    ftpClient.end();
                    if (req.body['intIdx'] == req.body['fileLength'] - 1)
                    {
                        var mysql = require("mysql");
                        // const fs = require('fs');
                        // var info = {};
                        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                        // allFileContents.split(/\r?\n/).forEach(line =>  {        
                        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                        // });
                        var sql = mysql.createConnection({
                            host     : DBENDPOINT,
                            user     : "admin",
                            password : "qwertyui",
                            port     : "3306",
                            database : "mydb"
                        });
                        const ConnectToSql = (queryForFilter) => {
                            return new Promise((resolve, reject)=>{
                                sql.connect(function (err) {
                                    if (err) return reject(err);
                                    else return resolve("Connected");
                                });
                            });
                        };
                        const RemoveIncompleteFileUploadState = () => {
                            return new Promise((resolve, reject)=>{
                                sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Surveillance Audit Conclusion Logs' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/surveillance_audit_conclusion_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "'",  (error, results)=>{
                                    if(error){
                                        return reject(error);
                                    }
                                    return resolve(results);
                                });
                            });
                        };
                        await ConnectToSql();
                        await RemoveIncompleteFileUploadState();
                        sql.end();
                    }
                    res.send('Surveillance Audit Conclusion Added Successfully'); 
                });  
                }
            });
        });
        
        ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_recertification_audit_conclusion_log_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Recertification Audit Conclusion Logs', 'No', 'No', '" + 'domains/cwac.in/public_html/recertification_audit_conclusion_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        ftpClient.on( 'ready', function() {
            ftpClient.mkdir('domains/cwac.in/public_html/recertification_audit_conclusion_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'], true, (err) => {
                if (!err) {
                ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/recertification_audit_conclusion_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                    if ( err ) throw err;
                    ftpClient.end();
                    if (req.body['intIdx'] == req.body['fileLength'] - 1)
                    {
                        var mysql = require("mysql");
                        // const fs = require('fs');
                        // var info = {};
                        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                        // allFileContents.split(/\r?\n/).forEach(line =>  {        
                        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                        // });
                        var sql = mysql.createConnection({
                            host     : DBENDPOINT,
                            user     : "admin",
                            password : "qwertyui",
                            port     : "3306",
                            database : "mydb"
                        });
                        const ConnectToSql = (queryForFilter) => {
                            return new Promise((resolve, reject)=>{
                                sql.connect(function (err) {
                                    if (err) return reject(err);
                                    else return resolve("Connected");
                                });
                            });
                        };
                        const RemoveIncompleteFileUploadState = () => {
                            return new Promise((resolve, reject)=>{
                                sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Recertification Audit Conclusion Logs' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/recertification_audit_conclusion_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "'",  (error, results)=>{
                                    if(error){
                                        return reject(error);
                                    }
                                    return resolve(results);
                                });
                            });
                        };
                        await ConnectToSql();
                        await RemoveIncompleteFileUploadState();
                        sql.end();
                    }
                    res.send('Recertification Audit Conclusion Added Successfully'); 
                });  
                }
            });
        });
        
        ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_surveillance_audit_log_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Surveillance Audit Client Logs', 'No', 'No', '" + 'domains/cwac.in/public_html/surveillance_audit_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        ftpClient.on( 'ready', function() {
            ftpClient.mkdir('domains/cwac.in/public_html/surveillance_audit_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'], true, (err) => {
                if (!err) {
                ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/surveillance_audit_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                    if ( err ) throw err;
                    ftpClient.end();
                    if (req.body['intIdx'] == req.body['fileLength'] - 1)
                    {
                        var mysql = require("mysql");
                        // const fs = require('fs');
                        // var info = {};
                        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                        // allFileContents.split(/\r?\n/).forEach(line =>  {        
                        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                        // });
                        var sql = mysql.createConnection({
                            host     : DBENDPOINT,
                            user     : "admin",
                            password : "qwertyui",
                            port     : "3306",
                            database : "mydb"
                        });
                        const ConnectToSql = (queryForFilter) => {
                            return new Promise((resolve, reject)=>{
                                sql.connect(function (err) {
                                    if (err) return reject(err);
                                    else return resolve("Connected");
                                });
                            });
                        };
                        const RemoveIncompleteFileUploadState = () => {
                            return new Promise((resolve, reject)=>{
                                sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Surveillance Audit Client Logs' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/surveillance_audit_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "'",  (error, results)=>{
                                    if(error){
                                        return reject(error);
                                    }
                                    return resolve(results);
                                });
                            });
                        };
                        await ConnectToSql();
                        await RemoveIncompleteFileUploadState();
                        sql.end();
                    }
                    res.send('Surveillance Audit Added Successfully'); 
                });  
                }
            });
        });
        
        ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_recertification_audit_log_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Recertification Audit Client Logs', 'No', 'No', '" + 'domains/cwac.in/public_html/recertification_audit_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        ftpClient.on( 'ready', function() {
            ftpClient.mkdir('domains/cwac.in/public_html/recertification_audit_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'], true, (err) => {
                if (!err) {
                ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/recertification_audit_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                    if ( err ) throw err;
                    ftpClient.end();
                    if (req.body['intIdx'] == req.body['fileLength'] - 1)
                    {
                        var mysql = require("mysql");
                        // const fs = require('fs');
                        // var info = {};
                        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                        // allFileContents.split(/\r?\n/).forEach(line =>  {        
                        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                        // });
                        var sql = mysql.createConnection({
                            host     : DBENDPOINT,
                            user     : "admin",
                            password : "qwertyui",
                            port     : "3306",
                            database : "mydb"
                        });
                        const ConnectToSql = (queryForFilter) => {
                            return new Promise((resolve, reject)=>{
                                sql.connect(function (err) {
                                    if (err) return reject(err);
                                    else return resolve("Connected");
                                });
                            });
                        };
                        const RemoveIncompleteFileUploadState = () => {
                            return new Promise((resolve, reject)=>{
                                sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Recertification Audit Client Logs' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/recertification_audit_files/' + req.body['clientid'] + "/logs/" + req.body['timestamp'] + "'",  (error, results)=>{
                                    if(error){
                                        return reject(error);
                                    }
                                    return resolve(results);
                                });
                            });
                        };
                        await ConnectToSql();
                        await RemoveIncompleteFileUploadState();
                        sql.end();
                    }
                    res.send('Recertification Audit Added Successfully'); 
                });  
                }
            });
        });
        
        ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_surveillance_audit_plan_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Surveillance Audit Plan', 'No', 'No', '" + 'domains/cwac.in/public_html/surveillance_audit_plans/' + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        ftpClient.on( 'ready', function() {
            ftpClient.mkdir('domains/cwac.in/public_html/surveillance_audit_plans/' + req.body['timestamp'], true, (err) => {
                if (!err) {
                ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/surveillance_audit_plans/' + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                    if ( err ) throw err;
                    ftpClient.end();
                    if (req.body['intIdx'] == req.body['fileLength'] - 1)
                    {
                        var mysql = require("mysql");
                        // const fs = require('fs');
                        // var info = {};
                        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                        // allFileContents.split(/\r?\n/).forEach(line =>  {        
                        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                        // });
                        var sql = mysql.createConnection({
                            host     : DBENDPOINT,
                            user     : "admin",
                            password : "qwertyui",
                            port     : "3306",
                            database : "mydb"
                        });
                        const ConnectToSql = (queryForFilter) => {
                            return new Promise((resolve, reject)=>{
                                sql.connect(function (err) {
                                    if (err) return reject(err);
                                    else return resolve("Connected");
                                });
                            });
                        };
                        const RemoveIncompleteFileUploadState = () => {
                            return new Promise((resolve, reject)=>{
                                sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Surveillance Audit Plan' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/surveillance_audit_plans/' + req.body['timestamp'] + "'",  (error, results)=>{
                                    if(error){
                                        return reject(error);
                                    }
                                    return resolve(results);
                                });
                            });
                        };
                        await ConnectToSql();
                        await RemoveIncompleteFileUploadState();
                        sql.end();
                    }
                    res.send('Surveillance Audit Plan Added Successfully'); 
                });
                }
            });
        });
        
        ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_recertification_audit_plan_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Recertification Audit Plan', 'No', 'No', '" + 'domains/cwac.in/public_html/recertification_audit_plans/' + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        ftpClient.on( 'ready', function() {
            ftpClient.mkdir('domains/cwac.in/public_html/recertification_audit_plans/' + req.body['timestamp'], true, (err) => {
                if (!err) {
                ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/recertification_audit_plans/' + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                    if ( err ) throw err;
                    ftpClient.end();
                    if (req.body['intIdx'] == req.body['fileLength'] - 1)
                    {
                        var mysql = require("mysql");
                        // const fs = require('fs');
                        // var info = {};
                        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                        // allFileContents.split(/\r?\n/).forEach(line =>  {        
                        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                        // });
                        var sql = mysql.createConnection({
                            host     : DBENDPOINT,
                            user     : "admin",
                            password : "qwertyui",
                            port     : "3306",
                            database : "mydb"
                        });
                        const ConnectToSql = (queryForFilter) => {
                            return new Promise((resolve, reject)=>{
                                sql.connect(function (err) {
                                    if (err) return reject(err);
                                    else return resolve("Connected");
                                });
                            });
                        };
                        const RemoveIncompleteFileUploadState = () => {
                            return new Promise((resolve, reject)=>{
                                sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Recertification Audit Plan' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/recertification_audit_plans/' + req.body['timestamp'] + "'",  (error, results)=>{
                                    if(error){
                                        return reject(error);
                                    }
                                    return resolve(results);
                                });
                            });
                        };
                        await ConnectToSql();
                        await RemoveIncompleteFileUploadState();
                        sql.end();
                    }
                    res.send('Recertification Audit Plan Added Successfully'); 
                });  
                }
            });
        });
        
        ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_stage1_audit_plan_form_files', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0 && req.body['directory_name'] == 'auditor_appointment_form')
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = (dirName) => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Stage 1 Audit Plan', 'No', 'Yes', '" + 'domains/cwac.in/public_html/stage1_audit_plan/' + req.body['timestamp'] + "/" + dirName + "/" + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState("auditor_appointment_form");
            await AddIncompleteFileUploadState("confidentiality_statement");
            await AddIncompleteFileUploadState("document_review_report");
            await AddIncompleteFileUploadState("attendance_sheet");
            await AddIncompleteFileUploadState("audit_report");
            await AddIncompleteFileUploadState("surveillance_audit_report");
            await AddIncompleteFileUploadState("nc_report");
            sql.end();
        }
        const ftpClient = new Ftp();
        //console.log(req.body['directory_name']);
        await ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        } );
        await ftpClient.on( 'ready', async function() {
            ftpClient.mkdir('domains/cwac.in/public_html/stage1_audit_plan/' + req.body['timestamp'] + "/" + req.body['directory_name'], true, async (err) => {
                if (!err) {
                await ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/stage1_audit_plan/' + req.body['timestamp'] + "/" + req.body['directory_name'] + "/" + req.file.originalname, async function( err, list ) {
                    if ( err ) throw err;
                    ftpClient.end();
                    if (req.body['intIdx'] == req.body['fileLength'] - 1 && req.body['directory_name'] == 'nc_report')
                    {
                        var mysql = require("mysql");
                        // const fs = require('fs');
                        // var info = {};
                        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                        // allFileContents.split(/\r?\n/).forEach(line =>  {        
                        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                        // });
                        var sql = mysql.createConnection({
                            host     : DBENDPOINT,
                            user     : "admin",
                            password : "qwertyui",
                            port     : "3306",
                            database : "mydb"
                        });
                        const ConnectToSql = (queryForFilter) => {
                            return new Promise((resolve, reject)=>{
                                sql.connect(function (err) {
                                    if (err) return reject(err);
                                    else return resolve("Connected");
                                });
                            });
                        };
                        const RemoveIncompleteFileUploadState = (dirName) => {
                            return new Promise((resolve, reject)=>{
                                sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Stage 1 Audit Plan' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/stage1_audit_plan/' + req.body['timestamp'] + "/" + dirName + "/" + "'",  (error, results)=>{
                                    if(error){
                                        return reject(error);
                                    }
                                    return resolve(results);
                                });
                            });
                        };
                        await ConnectToSql();
                        await RemoveIncompleteFileUploadState("auditor_appointment_form");
                        await RemoveIncompleteFileUploadState("confidentiality_statement");
                        await RemoveIncompleteFileUploadState("document_review_report");
                        await RemoveIncompleteFileUploadState("attendance_sheet");
                        await RemoveIncompleteFileUploadState("audit_report");
                        await RemoveIncompleteFileUploadState("surveillance_audit_report");
                        await RemoveIncompleteFileUploadState("nc_report");
                        sql.end();
                    }
                    res.send('Stage 1 Audit Plan Form Added Successfully'); 
                });  
                }
            });
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/offline__add_stage1_audit_plan_form_files', upload.single('file'), async (req, res) => {
    const { JavaCaller } = require("java-caller");
    var lstFiles = [
        {"dirname": "auditor_appointment_form", files: req.body['filesAuditorAppointmentForm']},
        {"dirname": "confidentiality_statement", files: req.body['filesConfidentialityStatementForm']},
        {"dirname": "document_review_report", files: req.body['filesDocumentReviewReportForm']},
        {"dirname": "attendance_sheet", files: req.body['filesAttendanceSheetForm']},
        {"dirname": "audit_report", files: req.body['filesAuditReportForm']},
        {"dirname": "surveillance_audit_report", files: req.body['filesSurveillanceAuditReportForm']},
        {"dirname": "nc_report", files: req.body['filesNCReportForm']},
    ]
    for (var intIdx = 0; intIdx < lstFiles.length; intIdx++)
    {
        const java = new JavaCaller({
            classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
            mainClass: 'nodejsofflinefileuploadproject.CopyFormFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
            rootPath: __dirname,
        });
        console.log("req.body['clientid'], ", req.body['clientid']);
        const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";stage1_audit_plans;" + lstFiles[intIdx]['dirname'], JSON.stringify(lstFiles[intIdx]['files'])]);
        console.log(stdout);
    }
    res.send("Uploaded all Stage 1 Audit Plan Forms Successfully");
})
app.post('/offline__add_stage2_audit_plan_form_files', upload.single('file'), async (req, res) => {
    const { JavaCaller } = require("java-caller");
    var lstFiles = [
        {"dirname": "auditor_appointment_form", files: req.body['filesAuditorAppointmentForm']},
        {"dirname": "confidentiality_statement", files: req.body['filesConfidentialityStatementForm']},
        {"dirname": "document_review_report", files: req.body['filesDocumentReviewReportForm']},
        {"dirname": "attendance_sheet", files: req.body['filesAttendanceSheetForm']},
        {"dirname": "audit_report", files: req.body['filesAuditReportForm']},
        {"dirname": "surveillance_audit_report", files: req.body['filesSurveillanceAuditReportForm']},
        {"dirname": "nc_report", files: req.body['filesNCReportForm']},
    ]
    for (var intIdx = 0; intIdx < lstFiles.length; intIdx++)
    {
        const java = new JavaCaller({
            classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
            mainClass: 'nodejsofflinefileuploadproject.CopyFormFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
            rootPath: __dirname,
        });
        console.log("req.body['clientid'], ", req.body['clientid']);
        const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";stage2_audit_plans;" + lstFiles[intIdx]['dirname'], JSON.stringify(lstFiles[intIdx]['files'])]);
        console.log(stdout);
    }
    res.send("Uploaded all Stage 2 Audit Plan Forms Successfully");
})
app.post('/add_stage2_audit_plan_form_files', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0 && req.body['directory_name'] == 'auditor_appointment_form')
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = (dirName) => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Stage 2 Audit Plan', 'No', 'Yes', '" + 'domains/cwac.in/public_html/stage2_audit_plan/' + req.body['timestamp'] + "/" + dirName + "/" + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState("auditor_appointment_form");
            await AddIncompleteFileUploadState("confidentiality_statement");
            await AddIncompleteFileUploadState("document_review_report");
            await AddIncompleteFileUploadState("attendance_sheet");
            await AddIncompleteFileUploadState("audit_report");
            await AddIncompleteFileUploadState("surveillance_audit_report");
            await AddIncompleteFileUploadState("nc_report");
            sql.end();
        }
        const ftpClient = new Ftp();
        //console.log(req.body['directory_name']);
        await ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        } );
        await ftpClient.on( 'ready', async function() {
            ftpClient.mkdir('domains/cwac.in/public_html/stage2_audit_plan/' + req.body['timestamp'] + "/" + req.body['directory_name'], true, async (err) => {
                if (!err) {
                await ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/stage2_audit_plan/' + req.body['timestamp'] + "/" + req.body['directory_name'] + "/" + req.file.originalname, async function( err, list ) {
                    if ( err ) throw err;
                    ftpClient.end();
                    if (req.body['intIdx'] == req.body['fileLength'] - 1 && req.body['directory_name'] == 'nc_report')
                    {
                        var mysql = require("mysql");
                        // const fs = require('fs');
                        // var info = {};
                        // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                        // allFileContents.split(/\r?\n/).forEach(line =>  {        
                        //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                        // });
                        var sql = mysql.createConnection({
                            host     : DBENDPOINT,
                            user     : "admin",
                            password : "qwertyui",
                            port     : "3306",
                            database : "mydb"
                        });
                        const ConnectToSql = (queryForFilter) => {
                            return new Promise((resolve, reject)=>{
                                sql.connect(function (err) {
                                    if (err) return reject(err);
                                    else return resolve("Connected");
                                });
                            });
                        };
                        const RemoveIncompleteFileUploadState = (dirName) => {
                            return new Promise((resolve, reject)=>{
                                sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Stage 2 Audit Plan' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/stage2_audit_plan/' + req.body['timestamp'] + "/" + dirName + "/" + "'",  (error, results)=>{
                                    if(error){
                                        return reject(error);
                                    }
                                    return resolve(results);
                                });
                            });
                        };
                        await ConnectToSql();
                        await RemoveIncompleteFileUploadState("auditor_appointment_form");
                        await RemoveIncompleteFileUploadState("confidentiality_statement");
                        await RemoveIncompleteFileUploadState("document_review_report");
                        await RemoveIncompleteFileUploadState("attendance_sheet");
                        await RemoveIncompleteFileUploadState("audit_report");
                        await RemoveIncompleteFileUploadState("surveillance_audit_report");
                        await RemoveIncompleteFileUploadState("nc_report");
                        sql.end();
                    }
                    res.send('Stage 2 Audit Plan Form Added Successfully'); 
                });  
                }
            });
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_stage2_audit_plan', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("stage2_audit_plans");
    //console.log(req.body['stage2PlanDescription']);
    addUser({
        'stage2PlanDescription': req.body['stage2PlanDescription']
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['clientid']);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                //res.send('Customer Application Added Successfully');
                db=admin.database();
                userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/stage2_plan_status");
                userRef.set("In-Progress");
                userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/stage2_plan_date");
                userRef.set(req.body['date'], (err) => {
                    client.delete();
                    res.send('Stage 2 Audit Plan Added Successfully');
                });
                //res.send('Stage 2 Audit Plan Added Successfully');
                //client.delete();
            }
            //client.delete();
        })
    }
});
app.post('/add_HOActivity', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("ho_activities");
    //console.log(req.body['stage2PlanDescription']);
    addUser({
        'HOActivityDescription': req.body['HOActivityDescription']
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['clientid']);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                //res.send('Customer Application Added Successfully');
                db=admin.database();
                userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/HO_activity_status");
                userRef.set("In-Progress");
                userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/HO_activity_date");
                userRef.set(req.body['date'], (err) => {
                    client.delete();
                    res.send('HO Activity Added Successfully');
                });
                // res.send('HO Activity Added Successfully');
                // client.delete();
            }
            //client.delete();
        })
    }
});
app.post('/offline__add_HOActivity', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO ho_activities VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['HOActivityDescription'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                request.query("UPDATE Form_Data SET HO_activity_date = '" 
                + req.body['date'] + "', HO_activity_status = 'In-Progress' WHERE client_id = '" 
                + req.body['clientid'] + "'", async function (iErr, iRecordset) {
                    if (iErr)
                    {
                        console.log(iErr);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        const { JavaCaller } = require("java-caller");
                        const java = new JavaCaller({
                            classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                            mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                            rootPath: __dirname,
                        });
                        const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";ho_activities", JSON.stringify(req.body['fileNames'])]);
                        console.log(stdout);
                        var lstFiles = [
                            {"dirname": "contract_review_form", files: req.body['fileContractReviewForm']},
                            {"dirname": "checklist", files: req.body['fileChecklist']},
                            {"dirname": "certificate_recommendation", files: req.body['fileCertificateRecommendation']},
                        ]
                        for (var intIdx = 0; intIdx < lstFiles.length; intIdx++)
                        {
                            const java = new JavaCaller({
                                classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                                mainClass: 'nodejsofflinefileuploadproject.CopyFormFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                                rootPath: __dirname,
                            });
                            //console.log("req.body['clientid'], ", req.body['clientid']);
                            const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";ho_activities;" + lstFiles[intIdx]['dirname'], JSON.stringify(lstFiles[intIdx]['files'])]);
                            console.log(stdout);
                        }
                        res.send("Head Office Activity Added Successfully");
                    }
                });
            }
        });
    });
});
app.post('/aws_rds__add_HOActivity', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO ho_activities VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['HOActivityDescription'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                sql.query("UPDATE Form_Data SET HO_activity_date = '" 
                + req.body['date'] + "', HO_activity_status = 'In-Progress' WHERE client_id = '" 
                + req.body['clientid'] + "'", async function (iErr, iRecordset) {
                    sql.end();
                    if (iErr)
                    {
                        console.log(iErr);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        // const { JavaCaller } = require("java-caller");
                        // const java = new JavaCaller({
                        //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                        //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                        //     rootPath: __dirname,
                        // });
                        // const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";ho_activities", JSON.stringify(req.body['fileNames'])]);
                        // console.log(stdout);
                        // var lstFiles = [
                        //     {"dirname": "contract_review_form", files: req.body['fileContractReviewForm']},
                        //     {"dirname": "checklist", files: req.body['fileChecklist']},
                        //     {"dirname": "certificate_recommendation", files: req.body['fileCertificateRecommendation']},
                        // ]
                        // for (var intIdx = 0; intIdx < lstFiles.length; intIdx++)
                        // {
                        //     const java = new JavaCaller({
                        //         classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                        //         mainClass: 'nodejsofflinefileuploadproject.CopyFormFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                        //         rootPath: __dirname,
                        //     });
                        //     //console.log("req.body['clientid'], ", req.body['clientid']);
                        //     const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";ho_activities;" + lstFiles[intIdx]['dirname'], JSON.stringify(lstFiles[intIdx]['files'])]);
                        //     console.log(stdout);
                        // }
                        res.send("HO Activity Added Successfully");
                    }
                });
            }
        });
    });
});
app.post('/add_initial_certification_conclusion', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("initial_certification_conclusion");
    //console.log(req.body['stage2PlanDescription']);
    addUser({
        'conclusionDescription': req.body['conclusionDescription']
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['clientid']);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                //res.send('Customer Application Added Successfully');
                db=admin.database();
                userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/initial_certification_conclusion");
                userRef.set("In-Progress");
                userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/initial_certification_conclusion_date");
                userRef.set(req.body['date'], (err) => {
                    client.delete();
                    res.send('Initial Certification Conclusion Added Successfully');
                });
                //res.send('Initial Certification Conclusion Added Successfully');
                //client.delete();
            }
            //client.delete();
        })
    }
});
app.post('/offline__add_initial_certification_conclusion', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO initial_certification_conclusion VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['conclusionDescription'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                request.query("UPDATE Form_Data SET initial_certification_conclusion_date = '" 
                + req.body['date'] + "', initial_certification_conclusion = 'In-Progress' WHERE client_id = '" 
                + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                    if (iErr)
                    {
                        console.log(iErr);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        const { JavaCaller } = require("java-caller");
                        const java = new JavaCaller({
                            classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                            mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                            rootPath: __dirname,
                        });
                        const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";init_certification_conclusion", JSON.stringify(req.body['fileNames'])]);
                        console.log(stdout);
                        res.send("Initial Certification Conclusion Added Successfully");
                    }
                });
            }
        });
    });
});
app.post('/aws_rds__add_initial_certification_conclusion', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO initial_certification_conclusion VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['conclusionDescription'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                sql.query("UPDATE Form_Data SET initial_certification_conclusion_date = '" 
                + req.body['date'] + "', initial_certification_conclusion = 'In-Progress' WHERE client_id = '" 
                + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                    sql.end();
                    if (iErr)
                    {
                        console.log(iErr);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        // const { JavaCaller } = require("java-caller");
                        // const java = new JavaCaller({
                        //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                        //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                        //     rootPath: __dirname,
                        // });
                        // const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";init_certification_conclusion", JSON.stringify(req.body['fileNames'])]);
                        // console.log(stdout);
                        res.send("Initial Certification Conclusion Added Successfully");
                    }
                });
            }
        });
    });
});
app.post('/add_surveillance_audit_conclusion', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("surveillance_audit_conclusion");
    //console.log(req.body['stage2PlanDescription']);
    addUser({
        'conclusionDescription': req.body['conclusionDescription']
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['clientid']);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                //res.send('Customer Application Added Successfully');
                db=admin.database();
                userRef=db.ref("surveillance_audit_clients/" + req.body.clientid  + "/surveillance_audit_conclusion");
                userRef.set("In-Progress");
                userRef=db.ref("surveillance_audit_clients/" + req.body.clientid  + "/surveillance_audit_conclusion_date");
                userRef.set(req.body['date'], (err) => {
                    client.delete();
                    res.send('Surveillance Audit Conclusion Added Successfully');
                });
                //res.send('Surveillance Audit Conclusion Added Successfully');
                //client.delete();
            }
            //client.delete();
        })
    }
});
app.post('/offline__add_surveillance_audit_conclusion', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO surveillance_audit_conclusion VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['conclusionDescription'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                request.query("UPDATE surveillance_audit_clients SET surveillance_audit_conclusion_date = '" 
                + req.body['date'] + "', surveillance_audit_conclusion = 'In-Progress' WHERE client_id = '" 
                + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                    if (iErr)
                    {
                        console.log(iErr);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        const { JavaCaller } = require("java-caller");
                        const java = new JavaCaller({
                            classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                            mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                            rootPath: __dirname,
                        });
                        const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";surveillance_audit_conclusion", JSON.stringify(req.body['fileNames'])]);
                        console.log(stdout);
                        res.send("Surveillance Audit Conclusion Added Successfully");
                    }
                });
            }
        });
    });
});
app.post('/aws_rds__add_surveillance_audit_conclusion', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO surveillance_audit_conclusion VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['conclusionDescription'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                sql.query("UPDATE surveillance_audit_clients SET surveillance_audit_conclusion_date = '" 
                + req.body['date'] + "', surveillance_audit_conclusion = 'In-Progress' WHERE client_id = '" 
                + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                    sql.end();
                    if (iErr)
                    {
                        console.log(iErr);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        // const { JavaCaller } = require("java-caller");
                        // const java = new JavaCaller({
                        //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                        //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                        //     rootPath: __dirname,
                        // });
                        // const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";surveillance_audit_conclusion", JSON.stringify(req.body['fileNames'])]);
                        // console.log(stdout);
                        res.send("Surveillance Audit Conclusion Added Successfully");
                    }
                });
            }
        });
    });
});
app.post('/add_recertification_audit_conclusion', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("recertification_audit_conclusion");
    //console.log(req.body['stage2PlanDescription']);
    addUser({
        'conclusionDescription': req.body['conclusionDescription']
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['clientid']);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                //res.send('Customer Application Added Successfully');
                db=admin.database();
                userRef=db.ref("recertification_audit_clients/" + req.body.clientid  + "/recertification_audit_conclusion");
                userRef.set("In-Progress");
                userRef=db.ref("recertification_audit_clients/" + req.body.clientid  + "/recertification_audit_conclusion_date");
                userRef.set(req.body['date'], (err) => {
                    client.delete();
                    res.send('Recertification Audit Conclusion Added Successfully');
                });
                //res.send('Recertification Audit Conclusion Added Successfully');
                //client.delete();
            }
            //client.delete();
        })
    }
});
app.post('/offline__add_recertification_audit_conclusion', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("INSERT INTO recertification_audit_conclusion VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['conclusionDescription'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                request.query("UPDATE recertification_audit_clients SET recertification_audit_conclusion_date = '" 
                + req.body['date'] + "', recertification_audit_conclusion = 'In-Progress' WHERE client_id = '" 
                + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                    if (iErr)
                    {
                        console.log(iErr);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        const { JavaCaller } = require("java-caller");
                        const java = new JavaCaller({
                            classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                            mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                            rootPath: __dirname,
                        });
                        const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";recertification_audit_conclusion", JSON.stringify(req.body['fileNames'])]);
                        console.log(stdout);
                        res.send("Recertification Audit Conclusion Added Successfully");
                    }
                });
            }
        });
    });
});
app.post('/aws_rds__add_recertification_audit_conclusion', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("INSERT INTO recertification_audit_conclusion VALUES ('" 
        + req.body['userid'] + "', '" 
        + req.body['clientid'] + "', '" 
        + req.body['conclusionDescription'] + "')", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                sql.query("UPDATE recertification_audit_clients SET recertification_audit_conclusion_date = '" 
                + req.body['date'] + "', recertification_audit_conclusion = 'In-Progress' WHERE client_id = '" 
                + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (iErr, iRecordset) {
                    sql.end();
                    if (iErr)
                    {
                        console.log(iErr);
                        res.send('Something went wrong. Please submit again.')
                    }
                    else 
                    {
                        // const { JavaCaller } = require("java-caller");
                        // const java = new JavaCaller({
                        //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                        //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                        //     rootPath: __dirname,
                        // });
                        // const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";recertification_audit_conclusion", JSON.stringify(req.body['fileNames'])]);
                        // console.log(stdout);
                        res.send("Recertification Audit Conclusion Added Successfully");
                    }
                });
            }
        });
    });
});
app.post('/add_surveillance_audit', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("surveillance_audit_clients/" + req.body['clientid'] + "/description");
    userRef.set(req.body['conclusionDescription'], (err) => {
        if (err) {
            console.log(err);
            res.send(err);
        }
        else {
            var userRefInner=db.ref("surveillance_audit_clients/" + req.body['clientid'] + "/Status");
            userRefInner.set("Not Approved", (err) => {
                if (err) {
                    console.log(err);
                    res.send(err);
                }
                else {
                    // res.send('Surveillance Audit Details Added Successfully');
                    // client.delete();
                    var userRefIInner=db.ref("surveillance_audit_clients/" + req.body['clientid'] + "/surveillance_audit_date");
                    userRefIInner.set(req.body['date'], (err) => {
                        if (err) {
                            console.log(err);
                            res.send(err);
                        }
                        else {
                            res.send('Surveillance Audit Details Added Successfully');
                            client.delete();
                        }
                    });
                }
            });
        }
    });

    // userRef.update(req.body['conclusionDescription'],(err)=>{
    //     if(err){
    //         res.send('Something went wrong. Please submit again.');
    //     }
    //     else {
    //         //res.send('Customer Application Added Successfully');
    //         db=admin.database();
    //         userRef=db.ref("surveillance_audit_clients/" + req.body.clientid  + "/Status");
    //         userRef.set("In-Progress");
    //         res.send('Surveillance Audit Details Added Successfully');
    //         client.delete();
    //     }
    //     client.delete();
    // })
    //console.log(req.body['stage2PlanDescription']);
    // addUser({
    //     'conclusionDescription': req.body['conclusionDescription']
    // })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['clientid']);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                //res.send('Customer Application Added Successfully');
                db=admin.database();
                userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/initial_certification_conclusion");
                userRef.set("In-Progress");
                res.send('Initial Certification Conclusion Added Successfully');
                client.delete();
            }
            client.delete();
        })
    }
});
app.post('/offline__add_surveillance_audit', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE surveillance_audit_clients SET description = '" 
        + req.body['conclusionDescription'] 
        + "', surveillance_audit_date = '" + req.body['date'] 
        + "', Status = '" + "Not Approved" 
        + "' WHERE client_id = '" 
        + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                // request.query("UPDATE surveillance_audit_clients SET description = '" 
                // + req.body['conclusionDescription'] 
                // + "', surveillance_audit_date = '" + req.body['date'] 
                // + "', Status = '" + "Not Approved" 
                // + "' WHERE client_id = '" 
                // + req.body['clientid'] + "'", async function (iErr, iRecordset) {
                //     if (iErr)
                //     {
                //         console.log(iErr);
                //         res.send('Something went wrong. Please submit again.')
                //     }
                //     else 
                //     {
                        const { JavaCaller } = require("java-caller");
                        const java = new JavaCaller({
                            classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                            mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                            rootPath: __dirname,
                        });
                        const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";surveillance_audit_client_files", JSON.stringify(req.body['fileNames'])]);
                        console.log(stdout);
                        res.send("Surveillance Audit Client Info Added Successfully");
                //     }
                // });
            }
        });
    });
});
app.post('/aws_rds__add_surveillance_audit', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE surveillance_audit_clients SET description = '" 
        + req.body['conclusionDescription'] 
        + "', surveillance_audit_date = '" + req.body['date'] 
        + "', Status = '" + "Not Approved" 
        + "' WHERE client_id = '" 
        + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";surveillance_audit_client_files", JSON.stringify(req.body['fileNames'])]);
                // console.log(stdout);
                res.send("Surveillance Audit Details Added Successfully");
            }
        });
    });
});
app.post('/add_recertification_audit', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    //var userRef=db.ref("surveillance_audit_clients/" + req.body['clientid'] + "/recertification_description");
    var userRef=db.ref("recertification_audit_clients/" + req.body['clientid'] + "/description");
    userRef.set(req.body['conclusionDescription'], (err) => {
        if (err) {
            console.log(err);
            res.send(err);
        }
        else {
            //var userRefInner=db.ref("surveillance_audit_clients/" + req.body['clientid'] + "/recertification_status");
            var userRefInner=db.ref("recertification_audit_clients/" + req.body['clientid'] + "/Status");
            userRefInner.set("Not Approved", (err) => {
                if (err) {
                    console.log(err);
                    res.send(err);
                }
                else {
                    //res.send('Recertification Audit Details Added Successfully');
                    //client.delete();
                    var userRefIInner=db.ref("recertification_audit_clients/" + req.body['clientid'] + "/recertification_audit_date");
                    userRefIInner.set(req.body['date'], (err) => {
                        if (err) {
                            console.log(err);
                            res.send(err);
                        }
                        else {
                            res.send('Recertification Audit Details Added Successfully');
                            client.delete();
                        }
                    });
                }
            });
        }
    });
});
app.post('/offline__add_recertification_audit', (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("UPDATE recertification_audit_clients SET description = '" 
        + req.body['conclusionDescription'] 
        + "', recertification_audit_date = '" + req.body['date'] 
        + "', Status = '" + "Not Approved" 
        + "' WHERE client_id = '" 
        + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";recertification_audit_client_files", JSON.stringify(req.body['fileNames'])]);
                console.log(stdout);
                res.send("Recertification Audit Client Info Added Successfully");
            }
        });
    });
});
app.post('/aws_rds__add_recertification_audit', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE recertification_audit_clients SET description = '" 
        + req.body['conclusionDescription'] 
        + "', recertification_audit_date = '" + req.body['date'] 
        + "', Status = '" + "Not Approved" 
        + "' WHERE client_id = '" 
        + req.body['clientid'] + "' AND user_id = '" + req.body['userid'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send('Something went wrong. Please submit again.')
            }
            else 
            {
                // const { JavaCaller } = require("java-caller");
                // const java = new JavaCaller({
                //     classPath: 'NodeJSOfflineFileUploadProject.jar', // CLASSPATH referencing the package embedded jar files
                //     mainClass: 'nodejsofflinefileuploadproject.CopyAnyFilesAuditSoftware_v1',// Main class to call, must be available from CLASSPATH,
                //     rootPath: __dirname,
                // });
                // const { status, stdout, stderr } = await java.run([req.body['clientid'] + ";recertification_audit_client_files", JSON.stringify(req.body['fileNames'])]);
                // console.log(stdout);
                res.send("Recertification Audit Details Added Successfully");
            }
        });
    });
});
app.post('/aws_rds__add_accreditation_board_access', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    const DeleteExistingAccessDetails = () =>{
        return new Promise((resolve, reject)=>{
            sql.query("DELETE FROM columns_to_filter_for_ab  WHERE user_id = '" + req.body['userid'] + "'",  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    const InsertAccessDetails = (tableName, toBeShown, tableType, filterValue, dateFilterValue) =>{
        return new Promise((resolve, reject)=>{
            sql.query("INSERT INTO columns_to_filter_for_ab VALUES('" + req.body['userid'] + "', '" + tableName + "', '" + toBeShown + "', '" + tableType + "', '" + filterValue + "', '" + dateFilterValue + "')",  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        await DeleteExistingAccessDetails();
        await InsertAccessDetails("Existing Applications", req.body['showExistingApplications'], "Main Table", JSON.stringify(req.body['filteredExistingApplications'][0]), JSON.stringify({
            filterDate: req.body['dateRangeExistingApplications'].filterDate,
            fromDate: req.body['dateRangeExistingApplications'].fromDate,
            toDate: req.body['dateRangeExistingApplications'].toDate,
            fromDateForCalendar: req.body['dateRangeExistingApplications'].fromDateForCalendar,
            toDateForCalendar: req.body['dateRangeExistingApplications'].toDateForCalendar,
        }));
        await InsertAccessDetails("Existing Applications", req.body['showExistingApplications'], "Logs", JSON.stringify(req.body['filteredExistingApplications'][1]), JSON.stringify({
            filterDateLogs: req.body['dateRangeExistingApplications'].filterDateLogs,
            fromDateLogs: req.body['dateRangeExistingApplications'].fromDateLogs,
            toDateLogs: req.body['dateRangeExistingApplications'].toDateLogs,
            fromDateForCalendarLogs: req.body['dateRangeExistingApplications'].fromDateForCalendarLogs,
            toDateForCalendarLogs: req.body['dateRangeExistingApplications'].toDateForCalendarLogs,
        }));
        await InsertAccessDetails("Quotation & Order Confirmation", req.body['showQuotationAndOrderConfirmation'], "Main Table", JSON.stringify(req.body['filteredQuotationAndOrderConfirmation'][0]), JSON.stringify({
            filterDate: req.body['dateRangeQuotationAndOrderConfirmation'].filterDate,
            fromDate: req.body['dateRangeQuotationAndOrderConfirmation'].fromDate,
            toDate: req.body['dateRangeQuotationAndOrderConfirmation'].toDate,
            fromDateForCalendar: req.body['dateRangeQuotationAndOrderConfirmation'].fromDateForCalendar,
            toDateForCalendar: req.body['dateRangeQuotationAndOrderConfirmation'].toDateForCalendar,
        }));
        await InsertAccessDetails("Quotation & Order Confirmation", req.body['showQuotationAndOrderConfirmation'], "Logs", JSON.stringify(req.body['filteredQuotationAndOrderConfirmation'][1]), JSON.stringify({
            filterDateLogs: req.body['dateRangeQuotationAndOrderConfirmation'].filterDateLogs,
            fromDateLogs: req.body['dateRangeQuotationAndOrderConfirmation'].fromDateLogs,
            toDateLogs: req.body['dateRangeQuotationAndOrderConfirmation'].toDateLogs,
            fromDateForCalendarLogs: req.body['dateRangeQuotationAndOrderConfirmation'].fromDateForCalendarLogs,
            toDateForCalendarLogs: req.body['dateRangeQuotationAndOrderConfirmation'].toDateForCalendarLogs,
        }));
        await InsertAccessDetails("Assign Stage 1 Audit Team", req.body['showAssignedStage1AuditTeam'], "Main Table", JSON.stringify(req.body['filteredAssignedStage1AuditTeam'][0]), "{}");
        await InsertAccessDetails("Assign Stage 1 Audit Team", req.body['showAssignedStage1AuditTeam'], "Logs", JSON.stringify(req.body['filteredAssignedStage1AuditTeam'][1]), "{}");
        await InsertAccessDetails("Stage 1 Audit Plan", req.body['showStage1AuditPlan'], "Main Table", JSON.stringify(req.body['filteredStage1AuditPlan'][0]), JSON.stringify({
            filterDate: req.body['dateRangeStage1AuditPlan'].filterDate,
            fromDate: req.body['dateRangeStage1AuditPlan'].fromDate,
            toDate: req.body['dateRangeStage1AuditPlan'].toDate,
            fromDateForCalendar: req.body['dateRangeStage1AuditPlan'].fromDateForCalendar,
            toDateForCalendar: req.body['dateRangeStage1AuditPlan'].toDateForCalendar,
        }));
        await InsertAccessDetails("Stage 1 Audit Plan", req.body['showStage1AuditPlan'], "Logs", JSON.stringify(req.body['filteredStage1AuditPlan'][1]), JSON.stringify({
            filterDateLogs: req.body['dateRangeStage1AuditPlan'].filterDateLogs,
            fromDateLogs: req.body['dateRangeStage1AuditPlan'].fromDateLogs,
            toDateLogs: req.body['dateRangeStage1AuditPlan'].toDateLogs,
            fromDateForCalendarLogs: req.body['dateRangeStage1AuditPlan'].fromDateForCalendarLogs,
            toDateForCalendarLogs: req.body['dateRangeStage1AuditPlan'].toDateForCalendarLogs,
        }));
        await InsertAccessDetails("Stage 1 Audit Plan Tasks", req.body['showStage1AuditPlanTasks'], "Main Table", JSON.stringify(req.body['filteredStage1AuditPlanTasks'][0]), JSON.stringify({
            filterDate: req.body['dateRangeStage1AuditPlanTasks'].filterDate,
            fromDate: req.body['dateRangeStage1AuditPlanTasks'].fromDate,
            toDate: req.body['dateRangeStage1AuditPlanTasks'].toDate,
            fromDateForCalendar: req.body['dateRangeStage1AuditPlanTasks'].fromDateForCalendar,
            toDateForCalendar: req.body['dateRangeStage1AuditPlanTasks'].toDateForCalendar,
        }));
        await InsertAccessDetails("Stage 1 Audit Plan Tasks", req.body['showStage1AuditPlanTasks'], "Logs", JSON.stringify(req.body['filteredStage1AuditPlanTasks'][1]), JSON.stringify({
            filterDateLogs: req.body['dateRangeStage1AuditPlanTasks'].filterDateLogs,
            fromDateLogs: req.body['dateRangeStage1AuditPlanTasks'].fromDateLogs,
            toDateLogs: req.body['dateRangeStage1AuditPlanTasks'].toDateLogs,
            fromDateForCalendarLogs: req.body['dateRangeStage1AuditPlanTasks'].fromDateForCalendarLogs,
            toDateForCalendarLogs: req.body['dateRangeStage1AuditPlanTasks'].toDateForCalendarLogs,
        }));
        await InsertAccessDetails("Stage 1 Audit Plan Forms", req.body['showStage1AuditPlanForms'], "Main Table", JSON.stringify(req.body['filteredStage1AuditPlanForms'][0]), "{}");
        await InsertAccessDetails("Stage 1 Audit Plan Forms", req.body['showStage1AuditPlanForms'], "Logs", JSON.stringify(req.body['filteredStage1AuditPlanForms'][1]), "{}");
        await InsertAccessDetails("Assign Stage 2 Audit Team", req.body['showAssignedStage2AuditTeam'], "Main Table", JSON.stringify(req.body['filteredAssignedStage2AuditTeam'][0]), "{}");
        await InsertAccessDetails("Assign Stage 2 Audit Team", req.body['showAssignedStage2AuditTeam'], "Logs", JSON.stringify(req.body['filteredAssignedStage2AuditTeam'][1]), "{}");
        await InsertAccessDetails("Stage 2 Audit Plan", req.body['showStage2AuditPlan'], "Main Table", JSON.stringify(req.body['filteredStage2AuditPlan'][0]), JSON.stringify({
            filterDate: req.body['dateRangeStage2AuditPlan'].filterDate,
            fromDate: req.body['dateRangeStage2AuditPlan'].fromDate,
            toDate: req.body['dateRangeStage2AuditPlan'].toDate,
            fromDateForCalendar: req.body['dateRangeStage2AuditPlan'].fromDateForCalendar,
            toDateForCalendar: req.body['dateRangeStage2AuditPlan'].toDateForCalendar,
        }));
        await InsertAccessDetails("Stage 2 Audit Plan", req.body['showStage2AuditPlan'], "Logs", JSON.stringify(req.body['filteredStage2AuditPlan'][1]), JSON.stringify({
            filterDateLogs: req.body['dateRangeStage2AuditPlan'].filterDateLogs,
            fromDateLogs: req.body['dateRangeStage2AuditPlan'].fromDateLogs,
            toDateLogs: req.body['dateRangeStage2AuditPlan'].toDateLogs,
            fromDateForCalendarLogs: req.body['dateRangeStage2AuditPlan'].fromDateForCalendarLogs,
            toDateForCalendarLogs: req.body['dateRangeStage2AuditPlan'].toDateForCalendarLogs,
        }));
        await InsertAccessDetails("Stage 2 Audit Plan Tasks", req.body['showStage2AuditPlanTasks'], "Main Table", JSON.stringify(req.body['filteredStage2AuditPlanTasks'][0]), JSON.stringify({
            filterDate: req.body['dateRangeStage2AuditPlanTasks'].filterDate,
            fromDate: req.body['dateRangeStage2AuditPlanTasks'].fromDate,
            toDate: req.body['dateRangeStage2AuditPlanTasks'].toDate,
            fromDateForCalendar: req.body['dateRangeStage2AuditPlanTasks'].fromDateForCalendar,
            toDateForCalendar: req.body['dateRangeStage2AuditPlanTasks'].toDateForCalendar,
        }));
        await InsertAccessDetails("Stage 2 Audit Plan Tasks", req.body['showStage2AuditPlanTasks'], "Logs", JSON.stringify(req.body['filteredStage2AuditPlanTasks'][1]), JSON.stringify({
            filterDateLogs: req.body['dateRangeStage2AuditPlanTasks'].filterDateLogs,
            fromDateLogs: req.body['dateRangeStage2AuditPlanTasks'].fromDateLogs,
            toDateLogs: req.body['dateRangeStage2AuditPlanTasks'].toDateLogs,
            fromDateForCalendarLogs: req.body['dateRangeStage2AuditPlanTasks'].fromDateForCalendarLogs,
            toDateForCalendarLogs: req.body['dateRangeStage2AuditPlanTasks'].toDateForCalendarLogs,
        }));
        await InsertAccessDetails("Stage 2 Audit Plan Forms", req.body['showStage2AuditPlanForms'], "Main Table", JSON.stringify(req.body['filteredStage2AuditPlanForms'][0]), "{}");
        await InsertAccessDetails("Stage 2 Audit Plan Forms", req.body['showStage2AuditPlanForms'], "Logs", JSON.stringify(req.body['filteredStage2AuditPlanForms'][1]), "{}");
        await InsertAccessDetails("HO Activities", req.body['showHeadOfficeActivities'], "Main Table", JSON.stringify(req.body['filteredHeadOfficeActivities'][0]), JSON.stringify({
            filterDate: req.body['dateRangeHeadOfficeActivities'].filterDate,
            fromDate: req.body['dateRangeHeadOfficeActivities'].fromDate,
            toDate: req.body['dateRangeHeadOfficeActivities'].toDate,
            fromDateForCalendar: req.body['dateRangeHeadOfficeActivities'].fromDateForCalendar,
            toDateForCalendar: req.body['dateRangeHeadOfficeActivities'].toDateForCalendar,
        }));
        await InsertAccessDetails("HO Activities", req.body['showHeadOfficeActivities'], "Logs", JSON.stringify(req.body['filteredHeadOfficeActivities'][1]), JSON.stringify({
            filterDateLogs: req.body['dateRangeHeadOfficeActivities'].filterDateLogs,
            fromDateLogs: req.body['dateRangeHeadOfficeActivities'].fromDateLogs,
            toDateLogs: req.body['dateRangeHeadOfficeActivities'].toDateLogs,
            fromDateForCalendarLogs: req.body['dateRangeHeadOfficeActivities'].fromDateForCalendarLogs,
            toDateForCalendarLogs: req.body['dateRangeHeadOfficeActivities'].toDateForCalendarLogs,
        }));
        await InsertAccessDetails("Initial Certification Conclusion", req.body['showInitialCertificationConclusion'], "Main Table", JSON.stringify(req.body['filteredInitialCertificationConclusion'][0]), JSON.stringify({
            filterDate: req.body['dateRangeInitialCertificationConclusion'].filterDate,
            fromDate: req.body['dateRangeInitialCertificationConclusion'].fromDate,
            toDate: req.body['dateRangeInitialCertificationConclusion'].toDate,
            fromDateForCalendar: req.body['dateRangeInitialCertificationConclusion'].fromDateForCalendar,
            toDateForCalendar: req.body['dateRangeInitialCertificationConclusion'].toDateForCalendar,
        }));
        await InsertAccessDetails("Initial Certification Conclusion", req.body['showInitialCertificationConclusion'], "Logs", JSON.stringify(req.body['filteredInitialCertificationConclusion'][1]), JSON.stringify({
            filterDateLogs: req.body['dateRangeInitialCertificationConclusion'].filterDateLogs,
            fromDateLogs: req.body['dateRangeInitialCertificationConclusion'].fromDateLogs,
            toDateLogs: req.body['dateRangeInitialCertificationConclusion'].toDateLogs,
            fromDateForCalendarLogs: req.body['dateRangeInitialCertificationConclusion'].fromDateForCalendarLogs,
            toDateForCalendarLogs: req.body['dateRangeInitialCertificationConclusion'].toDateForCalendarLogs,
        }));
        await InsertAccessDetails("Surveillance Audit Application", req.body['showSurveillanceAuditApplications'], "Main Table", JSON.stringify(req.body['filteredSurveillanceAuditApplications'][0]), JSON.stringify({
            filterDate: req.body['dateRangeSurveillanceAuditApplications'].filterDate,
            fromDate: req.body['dateRangeSurveillanceAuditApplications'].fromDate,
            toDate: req.body['dateRangeSurveillanceAuditApplications'].toDate,
            fromDateForCalendar: req.body['dateRangeSurveillanceAuditApplications'].fromDateForCalendar,
            toDateForCalendar: req.body['dateRangeSurveillanceAuditApplications'].toDateForCalendar,
        }));
        await InsertAccessDetails("Surveillance Audit Application", req.body['showSurveillanceAuditApplications'], "Logs", JSON.stringify(req.body['filteredSurveillanceAuditApplications'][1]), JSON.stringify({
            filterDateLogs: req.body['dateRangeSurveillanceAuditApplications'].filterDateLogs,
            fromDateLogs: req.body['dateRangeSurveillanceAuditApplications'].fromDateLogs,
            toDateLogs: req.body['dateRangeSurveillanceAuditApplications'].toDateLogs,
            fromDateForCalendarLogs: req.body['dateRangeSurveillanceAuditApplications'].fromDateForCalendarLogs,
            toDateForCalendarLogs: req.body['dateRangeSurveillanceAuditApplications'].toDateForCalendarLogs,
        }));
        await InsertAccessDetails("Assign Surveillance Audit Team", req.body['showAssignedSurveillanceAuditTeam'], "Main Table", JSON.stringify(req.body['filteredAssignedSurveillanceAuditTeam'][0]), "{}");
        await InsertAccessDetails("Assign Surveillance Audit Team", req.body['showAssignedSurveillanceAuditTeam'], "Logs", JSON.stringify(req.body['filteredAssignedSurveillanceAuditTeam'][1]), "{}");
        await InsertAccessDetails("Surveillance Audit Plan", req.body['showSurveillanceAuditPlan'], "Main Table", JSON.stringify(req.body['filteredSurveillanceAuditPlan'][0]), JSON.stringify({
            filterDate: req.body['dateRangeSurveillanceAuditPlan'].filterDate,
            fromDate: req.body['dateRangeSurveillanceAuditPlan'].fromDate,
            toDate: req.body['dateRangeSurveillanceAuditPlan'].toDate,
            fromDateForCalendar: req.body['dateRangeSurveillanceAuditPlan'].fromDateForCalendar,
            toDateForCalendar: req.body['dateRangeSurveillanceAuditPlan'].toDateForCalendar,
        }));
        await InsertAccessDetails("Surveillance Audit Plan", req.body['showSurveillanceAuditPlan'], "Logs", JSON.stringify(req.body['filteredSurveillanceAuditPlan'][1]), JSON.stringify({
            filterDateLogs: req.body['dateRangeSurveillanceAuditPlan'].filterDateLogs,
            fromDateLogs: req.body['dateRangeSurveillanceAuditPlan'].fromDateLogs,
            toDateLogs: req.body['dateRangeSurveillanceAuditPlan'].toDateLogs,
            fromDateForCalendarLogs: req.body['dateRangeSurveillanceAuditPlan'].fromDateForCalendarLogs,
            toDateForCalendarLogs: req.body['dateRangeSurveillanceAuditPlan'].toDateForCalendarLogs,
        }));
        await InsertAccessDetails("Surveillance Audit Plan Tasks", req.body['showSurveillanceAuditPlanTasks'], "Main Table", JSON.stringify(req.body['filteredSurveillanceAuditPlanTasks'][0]), JSON.stringify({
            filterDate: req.body['dateRangeSurveillanceAuditPlanTasks'].filterDate,
            fromDate: req.body['dateRangeSurveillanceAuditPlanTasks'].fromDate,
            toDate: req.body['dateRangeSurveillanceAuditPlanTasks'].toDate,
            fromDateForCalendar: req.body['dateRangeSurveillanceAuditPlanTasks'].fromDateForCalendar,
            toDateForCalendar: req.body['dateRangeSurveillanceAuditPlanTasks'].toDateForCalendar,
        }));
        await InsertAccessDetails("Surveillance Audit Plan Tasks", req.body['showSurveillanceAuditPlanTasks'], "Logs", JSON.stringify(req.body['filteredSurveillanceAuditPlanTasks'][1]), JSON.stringify({
            filterDateLogs: req.body['dateRangeSurveillanceAuditPlanTasks'].filterDateLogs,
            fromDateLogs: req.body['dateRangeSurveillanceAuditPlanTasks'].fromDateLogs,
            toDateLogs: req.body['dateRangeSurveillanceAuditPlanTasks'].toDateLogs,
            fromDateForCalendarLogs: req.body['dateRangeSurveillanceAuditPlanTasks'].fromDateForCalendarLogs,
            toDateForCalendarLogs: req.body['dateRangeSurveillanceAuditPlanTasks'].toDateForCalendarLogs,
        }));
        await InsertAccessDetails("Surveillance Audit Conclusion", req.body['showSurveillanceAuditConclusion'], "Main Table", JSON.stringify(req.body['filteredSurveillanceAuditConclusion'][0]), JSON.stringify({
            filterDate: req.body['dateRangeSurveillanceAuditConclusion'].filterDate,
            fromDate: req.body['dateRangeSurveillanceAuditConclusion'].fromDate,
            toDate: req.body['dateRangeSurveillanceAuditConclusion'].toDate,
            fromDateForCalendar: req.body['dateRangeSurveillanceAuditConclusion'].fromDateForCalendar,
            toDateForCalendar: req.body['dateRangeSurveillanceAuditConclusion'].toDateForCalendar,
        }));
        await InsertAccessDetails("Surveillance Audit Conclusion", req.body['showSurveillanceAuditConclusion'], "Logs", JSON.stringify(req.body['filteredSurveillanceAuditConclusion'][1]), JSON.stringify({
            filterDateLogs: req.body['dateRangeSurveillanceAuditConclusion'].filterDateLogs,
            fromDateLogs: req.body['dateRangeSurveillanceAuditConclusion'].fromDateLogs,
            toDateLogs: req.body['dateRangeSurveillanceAuditConclusion'].toDateLogs,
            fromDateForCalendarLogs: req.body['dateRangeSurveillanceAuditConclusion'].fromDateForCalendarLogs,
            toDateForCalendarLogs: req.body['dateRangeSurveillanceAuditConclusion'].toDateForCalendarLogs,
        }));
        await InsertAccessDetails("Recertification Audit Application", req.body['showRecertificationAuditApplications'], "Main Table", JSON.stringify(req.body['filteredRecertificationAuditApplications'][0]), JSON.stringify({
            filterDate: req.body['dateRangeRecertificationAuditApplications'].filterDate,
            fromDate: req.body['dateRangeRecertificationAuditApplications'].fromDate,
            toDate: req.body['dateRangeRecertificationAuditApplications'].toDate,
            fromDateForCalendar: req.body['dateRangeRecertificationAuditApplications'].fromDateForCalendar,
            toDateForCalendar: req.body['dateRangeRecertificationAuditApplications'].toDateForCalendar,
        }));
        await InsertAccessDetails("Recertification Audit Application", req.body['showRecertificationAuditApplications'], "Logs", JSON.stringify(req.body['filteredRecertificationAuditApplications'][1]), JSON.stringify({
            filterDateLogs: req.body['dateRangeRecertificationAuditApplications'].filterDateLogs,
            fromDateLogs: req.body['dateRangeRecertificationAuditApplications'].fromDateLogs,
            toDateLogs: req.body['dateRangeRecertificationAuditApplications'].toDateLogs,
            fromDateForCalendarLogs: req.body['dateRangeRecertificationAuditApplications'].fromDateForCalendarLogs,
            toDateForCalendarLogs: req.body['dateRangeRecertificationAuditApplications'].toDateForCalendarLogs,
        }));
        await InsertAccessDetails("Assign Recertification Audit Team", req.body['showAssignedRecertificationAuditTeam'], "Main Table", JSON.stringify(req.body['filteredAssignedRecertificationAuditTeam'][0]), "{}");
        await InsertAccessDetails("Assign Recertification Audit Team", req.body['showAssignedRecertificationAuditTeam'], "Logs", JSON.stringify(req.body['filteredAssignedRecertificationAuditTeam'][1]), "{}");
        await InsertAccessDetails("Recertification Audit Plan", req.body['showRecertificationAuditPlan'], "Main Table", JSON.stringify(req.body['filteredRecertificationAuditPlan'][0]), JSON.stringify({
            filterDate: req.body['dateRangeRecertificationAuditPlan'].filterDate,
            fromDate: req.body['dateRangeRecertificationAuditPlan'].fromDate,
            toDate: req.body['dateRangeRecertificationAuditPlan'].toDate,
            fromDateForCalendar: req.body['dateRangeRecertificationAuditPlan'].fromDateForCalendar,
            toDateForCalendar: req.body['dateRangeRecertificationAuditPlan'].toDateForCalendar,
        }));
        await InsertAccessDetails("Recertification Audit Plan", req.body['showRecertificationAuditPlan'], "Logs", JSON.stringify(req.body['filteredRecertificationAuditPlan'][1]), JSON.stringify({
            filterDateLogs: req.body['dateRangeRecertificationAuditPlan'].filterDateLogs,
            fromDateLogs: req.body['dateRangeRecertificationAuditPlan'].fromDateLogs,
            toDateLogs: req.body['dateRangeRecertificationAuditPlan'].toDateLogs,
            fromDateForCalendarLogs: req.body['dateRangeRecertificationAuditPlan'].fromDateForCalendarLogs,
            toDateForCalendarLogs: req.body['dateRangeRecertificationAuditPlan'].toDateForCalendarLogs,
        }));
        await InsertAccessDetails("Recertification Audit Plan Tasks", req.body['showRecertificationAuditPlanTasks'], "Main Table", JSON.stringify(req.body['filteredRecertificationAuditPlanTasks'][0]), JSON.stringify({
            filterDate: req.body['dateRangeRecertificationAuditPlanTasks'].filterDate,
            fromDate: req.body['dateRangeRecertificationAuditPlanTasks'].fromDate,
            toDate: req.body['dateRangeRecertificationAuditPlanTasks'].toDate,
            fromDateForCalendar: req.body['dateRangeRecertificationAuditPlanTasks'].fromDateForCalendar,
            toDateForCalendar: req.body['dateRangeRecertificationAuditPlanTasks'].toDateForCalendar,
        }));
        await InsertAccessDetails("Recertification Audit Plan Tasks", req.body['showRecertificationAuditPlanTasks'], "Logs", JSON.stringify(req.body['filteredRecertificationAuditPlanTasks'][1]), JSON.stringify({
            filterDateLogs: req.body['dateRangeRecertificationAuditPlanTasks'].filterDateLogs,
            fromDateLogs: req.body['dateRangeRecertificationAuditPlanTasks'].fromDateLogs,
            toDateLogs: req.body['dateRangeRecertificationAuditPlanTasks'].toDateLogs,
            fromDateForCalendarLogs: req.body['dateRangeRecertificationAuditPlanTasks'].fromDateForCalendarLogs,
            toDateForCalendarLogs: req.body['dateRangeRecertificationAuditPlanTasks'].toDateForCalendarLogs,
        }));
        await InsertAccessDetails("Recertification Audit Conclusion", req.body['showRecertificationAuditConclusion'], "Main Table", JSON.stringify(req.body['filteredRecertificationAuditConclusion'][0]), JSON.stringify({
            filterDate: req.body['dateRangeRecertificationAuditConclusion'].filterDate,
            fromDate: req.body['dateRangeRecertificationAuditConclusion'].fromDate,
            toDate: req.body['dateRangeRecertificationAuditConclusion'].toDate,
            fromDateForCalendar: req.body['dateRangeRecertificationAuditConclusion'].fromDateForCalendar,
            toDateForCalendar: req.body['dateRangeRecertificationAuditConclusion'].toDateForCalendar,
        }));
        await InsertAccessDetails("Recertification Audit Conclusion", req.body['showRecertificationAuditConclusion'], "Logs", JSON.stringify(req.body['filteredRecertificationAuditConclusion'][1]), JSON.stringify({
            filterDateLogs: req.body['dateRangeRecertificationAuditConclusion'].filterDateLogs,
            fromDateLogs: req.body['dateRangeRecertificationAuditConclusion'].fromDateLogs,
            toDateLogs: req.body['dateRangeRecertificationAuditConclusion'].toDateLogs,
            fromDateForCalendarLogs: req.body['dateRangeRecertificationAuditConclusion'].fromDateForCalendarLogs,
            toDateForCalendarLogs: req.body['dateRangeRecertificationAuditConclusion'].toDateForCalendarLogs,
        }));
        await InsertAccessDetails("Stage 1 Audit Team Master", req.body['showExistingStage1AuditTeams'], "Main Table", JSON.stringify(req.body['filteredExistingStage1AuditTeams'][0]), "{}");
        await InsertAccessDetails("Stage 1 Audit Team Master", req.body['showExistingStage1AuditTeams'], "Logs", JSON.stringify(req.body['filteredExistingStage1AuditTeams'][1]), "{}");
        await InsertAccessDetails("Stage 2 Audit Team Master", req.body['showExistingStage2AuditTeams'], "Main Table", JSON.stringify(req.body['filteredExistingStage2AuditTeams'][0]), "{}");
        await InsertAccessDetails("Stage 2 Audit Team Master", req.body['showExistingStage2AuditTeams'], "Logs", JSON.stringify(req.body['filteredExistingStage2AuditTeams'][1]), "{}");
        await InsertAccessDetails("Employee Master", req.body['showExistingEmployees'], "Main Table", JSON.stringify(req.body['filteredExistingEmployees'][0]), "{}");
        await InsertAccessDetails("Employee Master", req.body['showExistingEmployees'], "Logs", JSON.stringify(req.body['filteredExistingEmployees'][1]), "{}");
        res.send("Accreditation Board Access Updated Successfully");
    });
});
app.post('/add_quotation', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("quotations");
    //console.log(req.body['stage2PlanDescription']);
    addUser({
        'quotation_description': req.body['QuotationDescription']
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['clientid']);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else {
                //res.send('Customer Application Added Successfully');
                db=admin.database();
                userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/quotation_status");
                userRef.set("In-Progress");
                userRef=db.ref("client_application_form_data/" + req.body.clientid  + "/quotation_date");
                userRef.set(req.body['date'], (err) => {
                    client.delete();
                    res.send('Quotation Added Successfully');
                });
                //res.send('Quotation Added Successfully');
                //client.delete();
            }
            //client.delete();
        })
    }
});
app.post('/add_stage2_audit_plan_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Stage 2 Audit Plan', 'No', 'No', '" + 'domains/cwac.in/public_html/stage2_audit_plan/' + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        ftpClient.on( 'ready', function() {
            ftpClient.mkdir('domains/cwac.in/public_html/stage2_audit_plan/' + req.body['timestamp'], true, (err) => {
                if (!err) {
                    ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/stage2_audit_plan/' + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                        if ( err ) throw err;
                        ftpClient.end();
                        if (req.body['intIdx'] == req.body['fileLength'] - 1)
                        {
                            var mysql = require("mysql");
                            // const fs = require('fs');
                            // var info = {};
                            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                            // allFileContents.split(/\r?\n/).forEach(line =>  {        
                            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                            // });
                            var sql = mysql.createConnection({
                                host     : DBENDPOINT,
                                user     : "admin",
                                password : "qwertyui",
                                port     : "3306",
                                database : "mydb"
                            });
                            const ConnectToSql = (queryForFilter) => {
                                return new Promise((resolve, reject)=>{
                                    sql.connect(function (err) {
                                        if (err) return reject(err);
                                        else return resolve("Connected");
                                    });
                                });
                            };
                            const RemoveIncompleteFileUploadState = () => {
                                return new Promise((resolve, reject)=>{
                                    sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Stage 2 Audit Plan' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/stage2_audit_plan/' + req.body['timestamp'] + "'",  (error, results)=>{
                                        if(error){
                                            return reject(error);
                                        }
                                        return resolve(results);
                                    });
                                });
                            };
                            await ConnectToSql();
                            await RemoveIncompleteFileUploadState();
                        }
                        res.send('Stage 2 Audit Plan Added Successfully'); 
                    });  
                }
            });
        });
        
        ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_HOActivity_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'HO Activities', 'No', 'No', '" + 'domains/cwac.in/public_html/HOActivity_files/' + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        await ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        } );
        await ftpClient.on( 'ready', async function() {
            await ftpClient.mkdir('domains/cwac.in/public_html/HOActivity_files/' + req.body['timestamp'], true, async (err) => {
                if (!err) {
                    await ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/HOActivity_files/' + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                        if ( err ) throw err;
                        ftpClient.end();
                        if (req.body['intIdx'] == req.body['fileLength'] - 1)
                        {
                            var mysql = require("mysql");
                            // const fs = require('fs');
                            // var info = {};
                            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                            // allFileContents.split(/\r?\n/).forEach(line =>  {        
                            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                            // });
                            var sql = mysql.createConnection({
                                host     : DBENDPOINT,
                                user     : "admin",
                                password : "qwertyui",
                                port     : "3306",
                                database : "mydb"
                            });
                            const ConnectToSql = (queryForFilter) => {
                                return new Promise((resolve, reject)=>{
                                    sql.connect(function (err) {
                                        if (err) return reject(err);
                                        else return resolve("Connected");
                                    });
                                });
                            };
                            const RemoveIncompleteFileUploadState = () => {
                                return new Promise((resolve, reject)=>{
                                    sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'HO Activities' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/HOActivity_files/' + req.body['timestamp'] + "'",  (error, results)=>{
                                        if(error){
                                            return reject(error);
                                        }
                                        return resolve(results);
                                    });
                                });
                            };
                            await ConnectToSql();
                            await RemoveIncompleteFileUploadState();
                            sql.end();
                        }
                        res.send('HO Activity Added Successfully'); 
                    });  
                }
            });
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_initial_certification_conclusion_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Initial Certification Conclusion', 'No', 'No', '" + 'domains/cwac.in/public_html/initial_certification_conclusion_files/' + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        await ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
        await ftpClient.on( 'ready', async function() {
            await ftpClient.mkdir('domains/cwac.in/public_html/initial_certification_conclusion_files/' + req.body['timestamp'], true, async (err) => {
                if (!err) {
                    await ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/initial_certification_conclusion_files/' + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                        if ( err ) throw err;
                        ftpClient.end();
                        if (req.body['intIdx'] == req.body['fileLength'] - 1)
                        {
                            var mysql = require("mysql");
                            // const fs = require('fs');
                            // var info = {};
                            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                            // allFileContents.split(/\r?\n/).forEach(line =>  {        
                            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                            // });
                            var sql = mysql.createConnection({
                                host     : DBENDPOINT,
                                user     : "admin",
                                password : "qwertyui",
                                port     : "3306",
                                database : "mydb"
                            });
                            const ConnectToSql = (queryForFilter) => {
                                return new Promise((resolve, reject)=>{
                                    sql.connect(function (err) {
                                        if (err) return reject(err);
                                        else return resolve("Connected");
                                    });
                                });
                            };
                            const RemoveIncompleteFileUploadState = () => {
                                return new Promise((resolve, reject)=>{
                                    sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Initial Certification Conclusion' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/initial_certification_conclusion_files/' + req.body['timestamp'] + "'",  (error, results)=>{
                                        if(error){
                                            return reject(error);
                                        }
                                        return resolve(results);
                                    });
                                });
                            };
                            await ConnectToSql();
                            await RemoveIncompleteFileUploadState();
                            sql.end();
                        }
                        res.send('Initial Certification Conclusion Added Successfully'); 
                    });  
                }
                else console.log(err);
            });
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_surveillance_audit_conclusion_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Surveillance Audit Conclusion', 'No', 'No', '" + 'domains/cwac.in/public_html/surveillance_audit_conclusion_files/' + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        await ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
        await ftpClient.on( 'ready', async function() {
            await ftpClient.mkdir('domains/cwac.in/public_html/surveillance_audit_conclusion_files/' + req.body['timestamp'], true, async (err) => {
                if (!err) {
                    await ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/surveillance_audit_conclusion_files/' + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                        if ( err ) throw err;
                        ftpClient.end();   
                        if (req.body['intIdx'] == req.body['fileLength'] - 1)
                        {
                            var mysql = require("mysql");
                            // const fs = require('fs');
                            // var info = {};
                            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                            // allFileContents.split(/\r?\n/).forEach(line =>  {        
                            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                            // });
                            var sql = mysql.createConnection({
                                host     : DBENDPOINT,
                                user     : "admin",
                                password : "qwertyui",
                                port     : "3306",
                                database : "mydb"
                            });
                            const ConnectToSql = (queryForFilter) => {
                                return new Promise((resolve, reject)=>{
                                    sql.connect(function (err) {
                                        if (err) return reject(err);
                                        else return resolve("Connected");
                                    });
                                });
                            };
                            const RemoveIncompleteFileUploadState = () => {
                                return new Promise((resolve, reject)=>{
                                    sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Surveillance Audit Conclusion' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/surveillance_audit_conclusion_files/' + req.body['timestamp'] + "'",  (error, results)=>{
                                        if(error){
                                            return reject(error);
                                        }
                                        return resolve(results);
                                    });
                                });
                            };
                            await ConnectToSql();
                            await RemoveIncompleteFileUploadState();
                            sql.end();
                        }
                        res.send('Surveillance Audit Conclusion Added Successfully'); 
                    });  
                }
                else console.log(err);
            });
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_recertification_audit_conclusion_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Recertification Audit Conclusion', 'No', 'No', '" + 'domains/cwac.in/public_html/recertification_audit_conclusion_files/' + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        await ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
        await ftpClient.on( 'ready', async function() {
            await ftpClient.mkdir('domains/cwac.in/public_html/recertification_audit_conclusion_files/' + req.body['timestamp'], true, async (err) => {
                if (!err) {
                    await ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/recertification_audit_conclusion_files/' + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                        if ( err ) throw err;
                        ftpClient.end();
                        if (req.body['intIdx'] == req.body['fileLength'] - 1)
                        {
                            var mysql = require("mysql");
                            // const fs = require('fs');
                            // var info = {};
                            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                            // allFileContents.split(/\r?\n/).forEach(line =>  {        
                            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                            // });
                            var sql = mysql.createConnection({
                                host     : DBENDPOINT,
                                user     : "admin",
                                password : "qwertyui",
                                port     : "3306",
                                database : "mydb"
                            });
                            const ConnectToSql = (queryForFilter) => {
                                return new Promise((resolve, reject)=>{
                                    sql.connect(function (err) {
                                        if (err) return reject(err);
                                        else return resolve("Connected");
                                    });
                                });
                            };
                            const RemoveIncompleteFileUploadState = () => {
                                return new Promise((resolve, reject)=>{
                                    sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Recertification Audit Conclusion' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/recertification_audit_conclusion_files/' + req.body['timestamp'] + "'",  (error, results)=>{
                                        if(error){
                                            return reject(error);
                                        }
                                        return resolve(results);
                                    });
                                });
                            };
                            await ConnectToSql();
                            await RemoveIncompleteFileUploadState();
                            sql.end();
                        }
                        res.send('Recertification Audit Conclusion Added Successfully'); 
                    });  
                }
                else console.log(err);
            });
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_surveillance_audit_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Surveillance Audit Clients', 'No', 'No', '" + 'domains/cwac.in/public_html/surveillance_audit_files/' + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        await ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        } );
        await ftpClient.on( 'ready', async function() {
            await ftpClient.mkdir('domains/cwac.in/public_html/surveillance_audit_files/' + req.body['timestamp'], true, async (err) => {
                if (!err) {
                    await ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/surveillance_audit_files/' + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                        if ( err ) throw err;
                        ftpClient.end();
                        if (req.body['intIdx'] == req.body['fileLength'] - 1)
                        {
                            var mysql = require("mysql");
                            // const fs = require('fs');
                            // var info = {};
                            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                            // allFileContents.split(/\r?\n/).forEach(line =>  {        
                            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                            // });
                            var sql = mysql.createConnection({
                                host     : DBENDPOINT,
                                user     : "admin",
                                password : "qwertyui",
                                port     : "3306",
                                database : "mydb"
                            });
                            const ConnectToSql = (queryForFilter) => {
                                return new Promise((resolve, reject)=>{
                                    sql.connect(function (err) {
                                        if (err) return reject(err);
                                        else return resolve("Connected");
                                    });
                                });
                            };
                            const RemoveIncompleteFileUploadState = () => {
                                return new Promise((resolve, reject)=>{
                                    sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Surveillance Audit Clients' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/surveillance_audit_files/' + req.body['timestamp'] + "'",  (error, results)=>{
                                        if(error){
                                            return reject(error);
                                        }
                                        return resolve(results);
                                    });
                                });
                            };
                            await ConnectToSql();
                            await RemoveIncompleteFileUploadState();
                            sql.end();
                        }
                        res.send('Surveillance Audit Details Added Successfully'); 
                    });
                }
                else console.log(err);
            });
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_recertification_audit_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Recertification Audit Clients', 'No', 'No', '" + 'domains/cwac.in/public_html/recertification_audit_files/' + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        await ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        } );
        await ftpClient.on( 'ready', async function() {
            await ftpClient.mkdir('domains/cwac.in/public_html/recertification_audit_files/' + req.body['timestamp'], true, async (err) => {
                if (!err) {
                    await ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/recertification_audit_files/' + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                        if ( err ) throw err;
                        ftpClient.end();
                        if (req.body['intIdx'] == req.body['fileLength'] - 1)
                        {
                            var mysql = require("mysql");
                            // const fs = require('fs');
                            // var info = {};
                            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                            // allFileContents.split(/\r?\n/).forEach(line =>  {        
                            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                            // });
                            var sql = mysql.createConnection({
                                host     : DBENDPOINT,
                                user     : "admin",
                                password : "qwertyui",
                                port     : "3306",
                                database : "mydb"
                            });
                            const ConnectToSql = (queryForFilter) => {
                                return new Promise((resolve, reject)=>{
                                    sql.connect(function (err) {
                                        if (err) return reject(err);
                                        else return resolve("Connected");
                                    });
                                });
                            };
                            const RemoveIncompleteFileUploadState = () => {
                                return new Promise((resolve, reject)=>{
                                    sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Recertification Audit Clients' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/recertification_audit_files/' + req.body['timestamp'] + "'",  (error, results)=>{
                                        if(error){
                                            return reject(error);
                                        }
                                        return resolve(results);
                                    });
                                });
                            };
                            await ConnectToSql();
                            await RemoveIncompleteFileUploadState();
                            sql.end();
                        }
                        res.send('Recertification Audit Details Added Successfully'); 
                    });  
                }
                else console.log(err);
            });
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_HOActivity_file_contract_review_form', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'HO Activities', 'No', 'No', '" + 'domains/cwac.in/public_html/HOActivity_files/' + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        await ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
        await ftpClient.on( 'ready', async function() {
            await ftpClient.mkdir('domains/cwac.in/public_html/HOActivity_files/' + req.body['timestamp'] + "/contract_review_form", true, async (err) => {
                if (!err) {
                    await ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/HOActivity_files/' + req.body['timestamp'] + "/contract_review_form/" + req.file.originalname, async function( err, list ) {
                        if ( err ) throw err;
                        ftpClient.end(); 
                        if (req.body['intIdx'] == req.body['fileLength'] - 1)
                        {
                            var mysql = require("mysql");
                            // const fs = require('fs');
                            // var info = {};
                            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                            // allFileContents.split(/\r?\n/).forEach(line =>  {        
                            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                            // });
                            var sql = mysql.createConnection({
                                host     : DBENDPOINT,
                                user     : "admin",
                                password : "qwertyui",
                                port     : "3306",
                                database : "mydb"
                            });
                            const ConnectToSql = (queryForFilter) => {
                                return new Promise((resolve, reject)=>{
                                    sql.connect(function (err) {
                                        if (err) return reject(err);
                                        else return resolve("Connected");
                                    });
                                });
                            };
                            const RemoveIncompleteFileUploadState = () => {
                                return new Promise((resolve, reject)=>{
                                    sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'HO Activities' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/HOActivity_files/' + req.body['timestamp'] + "'",  (error, results)=>{
                                        if(error){
                                            return reject(error);
                                        }
                                        return resolve(results);
                                    });
                                });
                            };
                            await ConnectToSql();
                            await RemoveIncompleteFileUploadState();
                            sql.end();
                        }    
                        res.send('HO Activity Added Successfully'); 
                    });  
                }
            });
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_HOActivity_file_audit_document_checklist', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'HO Activities', 'No', 'No', '" + 'domains/cwac.in/public_html/HOActivity_files/' + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        await ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
        await ftpClient.on( 'ready', async function() {
            await ftpClient.mkdir('domains/cwac.in/public_html/HOActivity_files/' + req.body['timestamp'] + "/audit_document_checklist", true, async (err) => {
                if (!err) {
                    await ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/HOActivity_files/' + req.body['timestamp'] + "/audit_document_checklist/" + req.file.originalname, async function( err, list ) {
                        if ( err ) throw err;
                        ftpClient.end();     
                        if (req.body['intIdx'] == req.body['fileLength'] - 1)
                        {
                            var mysql = require("mysql");
                            // const fs = require('fs');
                            // var info = {};
                            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                            // allFileContents.split(/\r?\n/).forEach(line =>  {        
                            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                            // });
                            var sql = mysql.createConnection({
                                host     : DBENDPOINT,
                                user     : "admin",
                                password : "qwertyui",
                                port     : "3306",
                                database : "mydb"
                            });
                            const ConnectToSql = (queryForFilter) => {
                                return new Promise((resolve, reject)=>{
                                    sql.connect(function (err) {
                                        if (err) return reject(err);
                                        else return resolve("Connected");
                                    });
                                });
                            };
                            const RemoveIncompleteFileUploadState = () => {
                                return new Promise((resolve, reject)=>{
                                    sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'HO Activities' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/HOActivity_files/' + req.body['timestamp'] + "'",  (error, results)=>{
                                        if(error){
                                            return reject(error);
                                        }
                                        return resolve(results);
                                    });
                                });
                            };
                            await ConnectToSql();
                            await RemoveIncompleteFileUploadState();
                            sql.end();
                        }
                        res.send('HO Activity Added Successfully'); 
                    });  
                }
            });
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_HOActivity_file_certification_recommendation_report', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'HO Activities', 'No', 'No', '" + 'domains/cwac.in/public_html/HOActivity_files/' + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
            sql.end();
        }
        const ftpClient = new Ftp();
        await ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
        await ftpClient.on( 'ready', async function() {
            await ftpClient.mkdir('domains/cwac.in/public_html/HOActivity_files/' + req.body['timestamp'] + "/certification_recommendation_report", true, async (err) => {
                if (!err) {
                    await ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/HOActivity_files/' + req.body['timestamp'] + "/certification_recommendation_report/" + req.file.originalname, async function( err, list ) {
                        if ( err ) throw err;
                        ftpClient.end();
                        if (req.body['intIdx'] == req.body['fileLength'] - 1)
                        {
                            var mysql = require("mysql");
                            // const fs = require('fs');
                            // var info = {};
                            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                            // allFileContents.split(/\r?\n/).forEach(line =>  {        
                            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                            // });
                            var sql = mysql.createConnection({
                                host     : DBENDPOINT,
                                user     : "admin",
                                password : "qwertyui",
                                port     : "3306",
                                database : "mydb"
                            });
                            const ConnectToSql = (queryForFilter) => {
                                return new Promise((resolve, reject)=>{
                                    sql.connect(function (err) {
                                        if (err) return reject(err);
                                        else return resolve("Connected");
                                    });
                                });
                            };
                            const RemoveIncompleteFileUploadState = () => {
                                return new Promise((resolve, reject)=>{
                                    sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'HO Activities' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/HOActivity_files/' + req.body['timestamp'] + "'",  (error, results)=>{
                                        if(error){
                                            return reject(error);
                                        }
                                        return resolve(results);
                                    });
                                });
                            };
                            await ConnectToSql();
                            await RemoveIncompleteFileUploadState();
                            sql.end();
                        }
                        res.send('HO Activity Added Successfully'); 
                    });  
                }
            });
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/add_quotation_file', upload.single('file'), async (req, res) => {
    try
    {
        if (req.body['intIdx'] == 0)
        {
            var mysql = require("mysql");
            // const fs = require('fs');
            // var info = {};
            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
            // allFileContents.split(/\r?\n/).forEach(line =>  {        
            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
            // });
            var sql = mysql.createConnection({
                host     : DBENDPOINT,
                user     : "admin",
                password : "qwertyui",
                port     : "3306",
                database : "mydb"
            });
            const ConnectToSql = (queryForFilter) => {
                return new Promise((resolve, reject)=>{
                    sql.connect(function (err) {
                        if (err) return reject(err);
                        else return resolve("Connected");
                    });
                });
            };
            const AddIncompleteFileUploadState = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['timestamp'] + "', 'Quotation and Order Confirmation', 'No', 'No', '" + 'domains/cwac.in/public_html/quotation_files/' + req.body['timestamp'] + "')",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            await ConnectToSql();
            await AddIncompleteFileUploadState();
        }
        const ftpClient = new Ftp();
        ftpClient.on( 'ready', function() {
            ftpClient.mkdir('domains/cwac.in/public_html/quotation_files/' + req.body['timestamp'], true, (err) => {
                if (!err) {
                    ftpClient.put( req.file.buffer, 'domains/cwac.in/public_html/quotation_files/' + req.body['timestamp'] + "/" + req.file.originalname, async function( err, list ) {
                        if ( err ) throw err;
                        ftpClient.end();
                        if (req.body['intIdx'] == req.body['fileLength'] - 1)
                        {
                            var mysql = require("mysql");
                            // const fs = require('fs');
                            // var info = {};
                            // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
                            // allFileContents.split(/\r?\n/).forEach(line =>  {        
                            //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
                            // });
                            var sql = mysql.createConnection({
                                host     : DBENDPOINT,
                                user     : "admin",
                                password : "qwertyui",
                                port     : "3306",
                                database : "mydb"
                            });
                            const ConnectToSql = (queryForFilter) => {
                                return new Promise((resolve, reject)=>{
                                    sql.connect(function (err) {
                                        if (err) return reject(err);
                                        else return resolve("Connected");
                                    });
                                });
                            };
                            const RemoveIncompleteFileUploadState = () => {
                                return new Promise((resolve, reject)=>{
                                    sql.query("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['timestamp'] + "' AND category = 'Quotation and Order Confirmation' AND delete_or_not = 'No' AND dirpath = '" + 'domains/cwac.in/public_html/quotation_files/' + req.body['timestamp'] + "'",  (error, results)=>{
                                        if(error){
                                            return reject(error);
                                        }
                                        return resolve(results);
                                    });
                                });
                            };
                            await ConnectToSql();
                            await RemoveIncompleteFileUploadState();
                        } 
                        res.send('Quotation Added Successfully'); 
                    });  
                }
            });
        });
        
        ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
    }
    catch(e)
    {
        console.log(e);
    }
})
app.post('/delete_quotation_files', async (req, res) => {
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', async function() {
        //console.log(req.body['clientid']);
        ftpClient.list("domains/cwac.in/public_html/quotation_files/" + req.body['clientid'], false, async function( err, list ) {
            //console.log('here');
            if ( err ) 
            {
                console.log(err);
                throw err;
            }
            //console.log(list);
            var fileNames = [];
            for (var intIdx = 0; intIdx < list.length; intIdx++)
            {
                if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                {
                    await ftpClient.delete('domains/cwac.in/public_html/quotation_files/' + req.body['clientid'] + "/" + list[intIdx].name, () => {
                        if (err) {
                            res.send(err);
                            ftpClient.end();
                            console.log('error');
                            return;
                        }
                    });
                }
            }
            //console.log('success');
            res.send("Success");
            ftpClient.end();
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
    
});
app.get('/generate_mis_reports_ref', (req, res) => {
    var xl = require('excel4node');
    var wb = new xl.Workbook();
   
    // Add Worksheets to the workbook
    var ws = wb.addWorksheet('Sheet 1');
    var ws2 = wb.addWorksheet('Sheet 2');
   
    // Create a reusable style
    var style = wb.createStyle({
      font: {
        color: '#FF0800',
        size: 12,
      },
      numberFormat: '$#,##0.00; ($#,##0.00); -',
    });
   
   // Set value of cell A1 to 100 as a number type styled with 
   ws.cell(1, 1)
      .number(100)
      .style(style);
   
   // Set value of cell B1 to 200 as a number type styled with 
  
  //paramaters of style
  ws.cell(1, 2)
    .number(200)
    .style(style);
   
  // Set value of cell C1 to a formula styled with paramaters of style
  ws.cell(1, 3)
    .formula('A1 + B1')
    .style(style);
   
  // Set value of cell A2 to 'string' styled with paramaters of style
  ws.cell(2, 1)
    .string('Rohan Vishwakarma')
    .style(style);
   
  // Set value of cell A3 to true as a boolean type styled with paramaters of style but with an adjustment to the font size.
  ws.cell(3, 1)
    .bool(true)
    .style(style)
    .style({font: {size: 14}});
  //console.log('reached here');
  wb.write('Excel.xlsx', res);
});
app.post('/clean_exported_database', async (req, res) => {
    const mainDirPath = path.join(__dirname, '/');
    if (fs.existsSync(mainDirPath + req.body['userid'] + "_database_backup.xlsx"))
    {
        fs.unlinkSync(
            mainDirPath + req.body['userid'] + "_database_backup.xlsx"
        );
        //console.log("deleted file: ", mainDirPath + req.body['userid'] + "__mis_report_template_avail.xlsx");
    }
    res.send("Done");
});
app.post('/upload_mis_to_ftp', async (req, res) => {
    const ftpClient = new Ftp();
    const fs = require('fs');
    const mainDirPath = path.join(__dirname, '/');
    var buffer = fs.readFileSync('./' + req.body['userid'] + '__mis_report_template_avail.xlsx');
    ftpClient.on( 'ready', function() {
        ftpClient.mkdir('domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_software/database_backups/' + req.body['userid'] + '/', true, (err) => {
            if (!err) {
                ftpClient.put( buffer, 'domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_software/database_backups/' + req.body['userid'] + '/database_backup.xlsx', function( err, list ) {
                    if ( err ) throw err;
                    ftpClient.end();
                    if (fs.existsSync(mainDirPath + req.body['userid'] + "__mis_report_template_avail.xlsx"))
                    {
                        fs.unlinkSync(
                            mainDirPath + req.body['userid'] + "__mis_report_template_avail.xlsx"
                        );
                        //console.log("deleted file: ", mainDirPath + req.body['userid'] + "__mis_report_template_avail.xlsx");
                    }
                    if (fs.existsSync(mainDirPath + req.body['userid'] + "__mis_report_template.xlsx"))
                    {
                        fs.unlinkSync(
                            mainDirPath + req.body['userid'] + "__mis_report_template.xlsx"
                        );
                        //console.log("deleted file: ", mainDirPath + req.body['userid'] + "__mis_report_template.xlsx");
                    }
                    res.send("Done");
                    //res.send(JSON.stringify({"OK": "File Uploaded", "Param1": 'entry1', "Param2": 'entry2', "Param3": 'entry3'}));
                });  
            }
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    });
});
app.get('/query_each_table', async (req, res) => {
    var mysql = require("mysql");
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        const QueryData = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query,  (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        var result = await QueryData("SELECT * FROM Form_Data");
        console.log(result);
        result.forEach(ele => {
            var strEle = [];
            for (const [key, value] of Object.entries(ele)) {
                //console.log(value + "-->");
                strEle.push(value);
            }
            strEle = strEle.join("<<->>");
            strEle = strEle + ">>--<<";
            console.log(strEle);
            console.log("************");
        })
        res.send("okay");
    });
});
app.post('/generate_mis_reports_v2', async (req, res) => {
    var request = require('request');
    const { JavaCaller } = require('java-caller');
    const mainDirPath = path.join(__dirname, '/');
    var timestamp = "" + Date.now();
    var download = function (url, dest, callback) {
        request
          .get(url)
          .on('error', function (err) {
            console.log(err);
          })
          .pipe(fs.createWriteStream(dest))
          .on('close', callback);
    };
    const downloadFile = () => {
        return new Promise((resolve, reject)=>{
            download("https://cwac.in/softwares_apps/quest_global_mcs/audit_software/mis_report_template.xlsx", mainDirPath + req.body['userid'] + "__mis_report_template.xlsx", async function () {
                return resolve(true);
            });
        });
    };
    if (req.body['intIdx'] == 0)
    {
        await downloadFile();
    }
    var mysql = require("mysql");
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });

    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');

        const QueryData = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query,  (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        const java = new JavaCaller({
            classPath: 'AuditPlatformProject.jar', // CLASSPATH referencing the package embedded jar files
            mainClass: 'auditplatformproject.GenerateMISReport',// Main class to call, must be available from CLASSPATH,
            rootPath: __dirname,
        });
        if (req.body['intIdx'] == 0)
        {
            var initTodayDate = new Date();
            var idd = String(initTodayDate.getDate()).padStart(2, '0');
            var imm = String(initTodayDate.getMonth() + 1).padStart(2, '0'); //January is 0!
            var iyyyy = initTodayDate.getFullYear();
            var ihh = String(initTodayDate.getHours()).padStart(2, '0');
            var imins = String(initTodayDate.getMinutes()).padStart(2, '0');
            var iss = String(initTodayDate.getSeconds()).padStart(2, '0');
            //console.log("Init Date, Time: ", idd + "-" + imm + "-" + iyyyy + " " + ihh + ":" + imins + ":" + iss);
            await QueryData("UPDATE registered_users SET database_export_date_time = '" + idd + "-" + NoToMonth[parseInt(imm - 1)] + "-" + iyyyy + ";" + ihh + ":" + imins + ":" + iss + "' WHERE id = '" + req.body['userid'] + "'");
        }
        // if (req.body['intIdx'] != 6)
        // {
        //     var queryResult = [];
        //     if (req.body['intIdx'] != 26)
        //         queryResult = await QueryData("SELECT * FROM " + req.body['tableName'] + " WHERE user_id = '" + req.body['userid'] + "' OR user_id = ''");
        //     else queryResult = await QueryData("SELECT * FROM " + req.body['tableName']);
        //     const { status, stdout, stderr } = await java.run([req.body['userid'] + ";;;" + req.body['intIdx'] + ";;;false", JSON.stringify(queryResult)]);
        // }
        // else
        // {
            queryResult = await QueryData("SELECT * FROM " + req.body['tableName'] + " WHERE user_id = '" + req.body['userid'] + "' OR user_id = ''");
            var newQueryResult = "";
            // for (var intIIdx = 0; intIIdx < queryResult.length; intIIdx++)
            // {
            //     newQueryResult = newQueryResult + queryResult[intIIdx]['user_id'] + "<<->>";
            //     newQueryResult = newQueryResult + queryResult[intIIdx]['table_name'].replaceAll(" ", "_") + "<<->>";
            //     newQueryResult = newQueryResult + queryResult[intIIdx]['to_be_shown'] + "<<->>";
            //     newQueryResult = newQueryResult + queryResult[intIIdx]['table_type'].replaceAll(" ", "_") + "<<->>";
            //     newQueryResult = newQueryResult + queryResult[intIIdx]['filter_value'].replaceAll(" ", "_") + ">>--<<";
            // }
            queryResult.forEach(queryResultEle => {
                var strEle = [];
                for (const [key, value] of Object.entries(queryResultEle)) {
                    //console.log(value + "-->");
                    strEle.push(value.replaceAll(" ", "<<SPC>>").replaceAll("_", "<<UNDS>>").replaceAll('"', "<<DBLQT>>"));
                }
                strEle = strEle.join("<<->>");
                strEle = strEle + ">>--<<";
                newQueryResult = newQueryResult + strEle;
                //console.log(strEle);
                //console.log("************");
            })
            const { status, stdout, stderr } = await java.run([req.body['userid'] + ";;;" + req.body['intIdx'] + ";;;true", newQueryResult]);
        //}
        console.log(req.body['intIdx']);
        sql.end();
        res.send("done");
    });
});
app.post('/generate_mis_reports_individual', async (req, res) => {
    var request = require('request');
    const { JavaCaller } = require('java-caller');
    const fs = require('fs');
    const mainDirPath = path.join(__dirname, '/');
    var timestamp = "" + Date.now();
    var download = function (url, dest, callback) {
        request
          .get(url)
          .on('error', function (err) {
            console.log(err);
          })
          .pipe(fs.createWriteStream(dest))
          .on('close', callback);
    };
    const downloadFile = (templateName, fileName) => {
        return new Promise((resolve, reject)=>{
            download("https://cwac.in/softwares_apps/quest_global_mcs/audit_software/" + templateName, mainDirPath + fileName, async function () {
                return resolve(true);
            });
        });
    };
    if (req.body['intIdx'] == 0)
    {
        await downloadFile(req.body['template_name'], req.body['userid'] + "__mis_report_template.xlsx");
        if (req.body['logs_template_name'] != "NA")
            await downloadFile(req.body['logs_template_name'], req.body['userid'] + "__mis_report_template_logs.xlsx");
    }
    var mysql = require("mysql");
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    const Ftp = require('ftp');
    const ftpClient = new Ftp();
    ftpClient.on( 'ready', function() {
    //ftpClient.mkdir('domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_software/individual_reports/incoming_initial_certification/' + req.body['userid'], true, (err) => {
    ftpClient.mkdir('domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_software/individual_reports/' + req.body['dirName'] + '/' + req.body['userid'], true, (err) => {
    if (!err) {
    const UploadFile = (fileObj, path) => {
        return new Promise((resolve, reject)=>{
            ftpClient.put(fileObj, path, async function( err, list ) {
                if ( err ) reject(err);
                else resolve("done");
            });
        });
    };
    const ListFiles = (path) =>{
        return new Promise((resolve, reject)=>{
            ftpClient.list(path, false, async function( err, list ) {
                if (err) return reject(err);
                var fileNames = [];
                for (var intIdx = 0; intIdx < list.length; intIdx++)
                {
                    if (list[intIdx].name !== '.' && list[intIdx].name !== '..')
                    {
                        fileNames.push(list[intIdx].name);
                    }
                }
                return resolve(fileNames);
            });
        });
    };
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');

        const QueryData = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query,  (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        const java = new JavaCaller({
            classPath: 'AuditPlatformProject.jar', // CLASSPATH referencing the package embedded jar files
            mainClass: 'auditplatformproject.GenerateIndividualMISReport',// Main class to call, must be available from CLASSPATH,
            rootPath: __dirname,
        });
        if (req.body['intIdx'] == 0)
        {
            var initTodayDate = new Date();
            var idd = String(initTodayDate.getDate()).padStart(2, '0');
            var imm = String(initTodayDate.getMonth() + 1).padStart(2, '0'); //January is 0!
            var iyyyy = initTodayDate.getFullYear();
            var ihh = String(initTodayDate.getHours()).padStart(2, '0');
            var imins = String(initTodayDate.getMinutes()).padStart(2, '0');
            var iss = String(initTodayDate.getSeconds()).padStart(2, '0');
            //console.log("Init Date, Time: ", idd + "-" + imm + "-" + iyyyy + " " + ihh + ":" + imins + ":" + iss);
            //await QueryData("UPDATE registered_users SET database_export_date_time = '" + idd + "-" + NoToMonth[parseInt(imm - 1)] + "-" + iyyyy + ";" + ihh + ":" + imins + ":" + iss + "' WHERE id = '" + req.body['userid'] + "'");
        }
        // if (req.body['intIdx'] != 6)
        // {
        //     var queryResult = [];
        //     if (req.body['intIdx'] != 26)
        //         queryResult = await QueryData("SELECT * FROM " + req.body['tableName'] + " WHERE user_id = '" + req.body['userid'] + "' OR user_id = ''");
        //     else queryResult = await QueryData("SELECT * FROM " + req.body['tableName']);
        //     const { status, stdout, stderr } = await java.run([req.body['userid'] + ";;;" + req.body['intIdx'] + ";;;false", JSON.stringify(queryResult)]);
        // }
        // else
        // {
            var clientDirList = [];
            var moreClientDetails = [];
            queryResult = await QueryData("SELECT * FROM " + req.body['tableName'] + " WHERE user_id = '" + req.body['userid'] + "'");
            if (req.body['dirName'] == 'incoming_initial_certification')
            {
                clientDirList = await ListFiles('domains/cwac.in/public_html/init_certification_client_application');
            }
            else if (req.body['dirName'] == 'quotations')
            {
                clientDirList = await ListFiles('domains/cwac.in/public_html/quotation_files');
                moreClientDetails = await QueryData("SELECT * FROM quotations WHERE user_id = '" + req.body['userid'] + "'");
            }
            else if (req.body['dirName'] == 'stage1_audit_plan')
            {
                clientDirList = await ListFiles('domains/cwac.in/public_html/stage1_audit_plan');
                moreClientDetails = await QueryData("SELECT * FROM stage1_audit_plans WHERE user_id = '" + req.body['userid'] + "'");
            }
            else if (req.body['dirName'] == 'stage2_audit_plan')
            {
                clientDirList = await ListFiles('domains/cwac.in/public_html/stage2_audit_plan');
                moreClientDetails = await QueryData("SELECT * FROM stage2_audit_plans WHERE user_id = '" + req.body['userid'] + "'");
            }
            else if (req.body['dirName'] == 'ho_activities')
            {
                clientDirList = await ListFiles('domains/cwac.in/public_html/HOActivity_files');
                moreClientDetails = await QueryData("SELECT * FROM ho_activities WHERE user_id = '" + req.body['userid'] + "'");
            }
            else if (req.body['dirName'] == 'initial_certification_conclusion')
            {
                clientDirList = await ListFiles('domains/cwac.in/public_html/initial_certification_conclusion_files');
                moreClientDetails = await QueryData("SELECT * FROM initial_certification_conclusion WHERE user_id = '" + req.body['userid'] + "'");
            }
            else if (req.body['dirName'] == 'surveillance_audit_clients')
            {
                clientDirList = await ListFiles('domains/cwac.in/public_html/surveillance_audit_files');
            }
            else if (req.body['dirName'] == 'surveillance_audit_plans')
            {
                clientDirList = await ListFiles('domains/cwac.in/public_html/surveillance_audit_plans');
                moreClientDetails = await QueryData("SELECT * FROM surveillance_audit_plans WHERE user_id = '" + req.body['userid'] + "'");
            }
            else if (req.body['dirName'] == 'surveillance_audit_conclusion')
            {
                clientDirList = await ListFiles('domains/cwac.in/public_html/surveillance_audit_conclusion_files');
                moreClientDetails = await QueryData("SELECT * FROM surveillance_audit_conclusion WHERE user_id = '" + req.body['userid'] + "'");
            }
            else if (req.body['dirName'] == 'recertification_audit_clients')
            {
                clientDirList = await ListFiles('domains/cwac.in/public_html/recertification_audit_files');
            }
            else if (req.body['dirName'] == 'recertification_audit_plans')
            {
                clientDirList = await ListFiles('domains/cwac.in/public_html/recertification_audit_plans');
                moreClientDetails = await QueryData("SELECT * FROM recertification_audit_plans WHERE user_id = '" + req.body['userid'] + "'");
            }
            else if (req.body['dirName'] == 'recertification_audit_conclusion')
            {
                clientDirList = await ListFiles('domains/cwac.in/public_html/recertification_audit_conclusion_files');
                moreClientDetails = await QueryData("SELECT * FROM recertification_audit_conclusion WHERE user_id = '" + req.body['userid'] + "'");
            }
            else if (req.body['dirName'] == 'stage1_audit_team')
            {
                moreClientDetails = await QueryData("SELECT * FROM Form_Data WHERE user_id = '" + req.body['userid'] + "'");
            }
            else if (req.body['dirName'] == 'stage2_audit_team')
            {
                moreClientDetails = await QueryData("SELECT * FROM Form_Data WHERE user_id = '" + req.body['userid'] + "'");
            }
            else if (req.body['dirName'] == 'surveillance_audit_team')
            {
                moreClientDetails = await QueryData("SELECT * FROM surveillance_audit_clients WHERE user_id = '" + req.body['userid'] + "'");
            }
            else if (req.body['dirName'] == 'recertification_audit_team')
            {
                moreClientDetails = await QueryData("SELECT * FROM recertification_audit_clients WHERE user_id = '" + req.body['userid'] + "'");
            }
            else if (req.body['dirName'] == 'stage1_audit_task_list')
            {
                moreClientDetails = await QueryData("SELECT * FROM Form_Data WHERE user_id = '" + req.body['userid'] + "'");
            }
            else if (req.body['dirName'] == 'stage2_audit_task_list')
            {
                moreClientDetails = await QueryData("SELECT * FROM Form_Data WHERE user_id = '" + req.body['userid'] + "'");
            }
            else if (req.body['dirName'] == 'surveillance_audit_task_list')
            {
                moreClientDetails = await QueryData("SELECT * FROM surveillance_audit_clients WHERE user_id = '" + req.body['userid'] + "'");
            }
            else if (req.body['dirName'] == 'recertification_audit_task_list')
            {
                moreClientDetails = await QueryData("SELECT * FROM recertification_audit_clients WHERE user_id = '" + req.body['userid'] + "'");
            }
            else if (req.body['dirName'] == 'stage1_audit_attendance' || req.body['dirName'] == 'stage2_audit_attendance')
            {
                var lstAttendanceUniqueAttendanceId = [...new Map(queryResult.map(item => [item['attendance_id'], item])).values()];
                lstAttendanceUniqueAttendanceId = lstAttendanceUniqueAttendanceId.map((ele, idx) => {
                    var newEle = ele;
                    newEle['attendanceIdx'] = idx + 1;
                    return newEle;
                })
                queryResult = queryResult.map(ele => {
                    var newEle = ele;
                    var attendanceIdxData = lstAttendanceUniqueAttendanceId.filter(iEle => iEle['attendance_id'] == ele['attendance_id']);
                    newEle['session_name'] = "Session " + attendanceIdxData[0]['attendanceIdx']
                    return newEle;
                })
                moreClientDetails = await QueryData("SELECT * FROM Form_Data WHERE user_id = '" + req.body['userid'] + "'");
            }
            else if (req.body['dirName'] == 'surveillance_audit_attendance')
            {
                var lstAttendanceUniqueAttendanceId = [...new Map(queryResult.map(item => [item['attendance_id'], item])).values()];
                lstAttendanceUniqueAttendanceId = lstAttendanceUniqueAttendanceId.map((ele, idx) => {
                    var newEle = ele;
                    newEle['attendanceIdx'] = idx + 1;
                    return newEle;
                })
                queryResult = queryResult.map(ele => {
                    var newEle = ele;
                    var attendanceIdxData = lstAttendanceUniqueAttendanceId.filter(iEle => iEle['attendance_id'] == ele['attendance_id']);
                    newEle['session_name'] = "Session " + attendanceIdxData[0]['attendanceIdx']
                    return newEle;
                })
                moreClientDetails = await QueryData("SELECT * FROM surveillance_audit_clients WHERE user_id = '" + req.body['userid'] + "'");
            }
            else if (req.body['dirName'] == 'recertification_audit_attendance')
            {
                var lstAttendanceUniqueAttendanceId = [...new Map(queryResult.map(item => [item['attendance_id'], item])).values()];
                lstAttendanceUniqueAttendanceId = lstAttendanceUniqueAttendanceId.map((ele, idx) => {
                    var newEle = ele;
                    newEle['attendanceIdx'] = idx + 1;
                    return newEle;
                })
                queryResult = queryResult.map(ele => {
                    var newEle = ele;
                    var attendanceIdxData = lstAttendanceUniqueAttendanceId.filter(iEle => iEle['attendance_id'] == ele['attendance_id']);
                    newEle['session_name'] = "Session " + attendanceIdxData[0]['attendanceIdx']
                    return newEle;
                })
                moreClientDetails = await QueryData("SELECT * FROM recertification_audit_clients WHERE user_id = '" + req.body['userid'] + "'");
            }
            var logsData = [];
            if (req.body['logsTableName'] != 'NA')
                logsData = await QueryData("SELECT * FROM " + req.body['logsTableName'] + " WHERE user_id = '" + req.body['userid'] + "'");
            // if (req.body['template_name'] == "mis_report_template__form_data.xlsx")
            // {
                // queryResult = queryResult.map((ele) => {
                //     var newEle = {};
                //     newEle['Approved'] = ele['Approved'];
                //     newEle['Client Name'] = ele['Client Name'];
                //     newEle['assignedToWhom'] = ele['assignedToWhom'];
                //     newEle['date'] = ele['date'];
                //     newEle['description'] = ele['description'];
                //     newEle['email'] = ele['email'];
                //     newEle['phone'] = ele['phone'];
                //     var files = [];
                //     var fileNames = "";
                //     var curDirName = clientDirList.filter(iEle => iEle == ele['client_id']);
                //     if (curDirName.length != 0)
                //         files = await ListFiles('domains/cwac.in/public_html/init_certification_client_application/' + ele['client_id']);
                //     for (var intIIdx = 0; intIIdx < files.length; intIIdx++)
                //         fileNames = fileNames + files[intIIdx] + ",";
                //     newEle['fileNames'] = fileNames;
                //     return newEle;
                // })
                //queryResult = queryResult.map((ele) => {
                for (var intIdx = 0; intIdx < queryResult.length; intIdx++)
                {
                    var ele = queryResult[intIdx];
                    var newEle = {};
                    var curMoreClientDetails = moreClientDetails.filter(iEle => iEle['client_id'] == ele['client_id']);
                    if (req.body['dirName'] == 'incoming_initial_certification')
                    {
                        newEle['Approved'] = ele['Approved'];
                        newEle['Client Name'] = ele['Client Name'];
                        newEle['assignedToWhom'] = ele['assignedToWhom'];
                        newEle['date'] = ele['date'];
                        newEle['description'] = ele['description'];
                        newEle['email'] = ele['email'];
                        newEle['phone'] = ele['phone'];
                    }
                    else if (req.body['dirName'] == 'quotations')
                    {
                        newEle['Client Name'] = ele['Client Name'];
                        newEle['quotation_date'] = ele['quotation_date'];
                        if (curMoreClientDetails.length > 0)
                            newEle['description'] = curMoreClientDetails[0]['quotation_description'];
                        else newEle['description'] = "Not Specified";
                        newEle['status'] = ele['quotation_status'];
                    }
                    else if (req.body['dirName'] == 'stage1_audit_plan')
                    {
                        newEle['Client Name'] = ele['Client Name'];
                        newEle['stage1_plan_date'] = ele['stage1_plan_date'];
                        if (curMoreClientDetails.length > 0)
                            newEle['description'] = curMoreClientDetails[0]['stage1PlanDescription'];
                        else newEle['description'] = "Not Specified";
                        newEle['status'] = ele['stage1_plan_status'];
                    }
                    else if (req.body['dirName'] == 'stage2_audit_plan')
                    {
                        newEle['Client Name'] = ele['Client Name'];
                        newEle['stage1_plan_date'] = ele['stage2_plan_date'];
                        if (curMoreClientDetails.length > 0)
                            newEle['description'] = curMoreClientDetails[0]['stage2PlanDescription'];
                        else newEle['description'] = "Not Specified";
                        newEle['status'] = ele['stage2_plan_status'];
                    }
                    else if (req.body['dirName'] == 'ho_activities')
                    {
                        newEle['Client Name'] = ele['Client Name'];
                        newEle['date'] = ele['HO_activity_date'];
                        if (curMoreClientDetails.length > 0)
                            newEle['description'] = curMoreClientDetails[0]['HOActivityDescription'];
                        else newEle['description'] = "Not Specified";
                        newEle['status'] = ele['HO_activity_status'];
                    }
                    else if (req.body['dirName'] == 'initial_certification_conclusion')
                    {
                        newEle['Client Name'] = ele['Client Name'];
                        newEle['date'] = ele['initial_certification_conclusion_date'];
                        if (curMoreClientDetails.length > 0)
                            newEle['description'] = curMoreClientDetails[0]['conclusionDescription'];
                        else newEle['description'] = "Not Specified";
                        newEle['status'] = ele['initial_certification_conclusion'];
                    }
                    else if (req.body['dirName'] == 'surveillance_audit_clients')
                    {
                        newEle['Client Name'] = ele['Client Name'];
                        newEle['date'] = ele['surveillance_audit_date'];
                        newEle['description'] = ele['description'];
                        newEle['status'] = ele['Status'];
                    }
                    else if (req.body['dirName'] == 'surveillance_audit_plans')
                    {
                        newEle['Client Name'] = ele['Client Name'];
                        newEle['date'] = ele['surveillance_audit_plan_date'];
                        if (curMoreClientDetails.length > 0)
                            newEle['description'] = curMoreClientDetails[0]['surveillanceAuditPlanDescription'];
                        else newEle['description'] = "Not Specified";
                        newEle['status'] = ele['surveillance_plan_status'];
                    }
                    else if (req.body['dirName'] == 'surveillance_audit_conclusion')
                    {
                        newEle['Client Name'] = ele['Client Name'];
                        newEle['date'] = ele['surveillance_audit_conclusion_date'];
                        if (curMoreClientDetails.length > 0)
                            newEle['description'] = curMoreClientDetails[0]['conclusionDescription'];
                        else newEle['description'] = "Not Specified";
                        newEle['status'] = ele['surveillance_audit_conclusion'];
                    }
                    else if (req.body['dirName'] == 'recertification_audit_clients')
                    {
                        newEle['Client Name'] = ele['Client Name'];
                        newEle['date'] = ele['recertification_audit_date'];
                        newEle['description'] = ele['description'];
                        newEle['status'] = ele['Status'];
                    }
                    else if (req.body['dirName'] == 'recertification_audit_plans')
                    {
                        newEle['Client Name'] = ele['Client Name'];
                        newEle['date'] = ele['recertification_audit_plan_date'];
                        if (curMoreClientDetails.length > 0)
                            newEle['description'] = curMoreClientDetails[0]['recertificationAuditPlanDescription'];
                        else newEle['description'] = "Not Specified";
                        newEle['status'] = ele['recertification_plan_status'];
                    }
                    else if (req.body['dirName'] == 'recertification_audit_conclusion')
                    {
                        newEle['Client Name'] = ele['Client Name'];
                        newEle['date'] = ele['recertification_audit_conclusion_date'];
                        if (curMoreClientDetails.length > 0)
                            newEle['description'] = curMoreClientDetails[0]['conclusionDescription'];
                        else newEle['description'] = "Not Specified";
                        newEle['status'] = ele['recertification_audit_conclusion'];
                    }
                    else if (req.body['dirName'] == 'stage1_audit_team')
                    {
                        newEle['Team Member Name'] = ele['Member Name'];
                        if (curMoreClientDetails.length > 0)
                        {
                            newEle['Client Name'] = curMoreClientDetails[0]['Client Name'];
                            newEle['Stage 1 Team Assigned'] = curMoreClientDetails[0]['stage1_team_assigned'];
                        }
                    }
                    else if (req.body['dirName'] == 'stage2_audit_team')
                    {
                        newEle['Team Member Name'] = ele['Member Name'];
                        if (curMoreClientDetails.length > 0)
                        {
                            newEle['Client Name'] = curMoreClientDetails[0]['Client Name'];
                            newEle['Stage 2 Team Assigned'] = curMoreClientDetails[0]['stage2_team_assigned'];
                        }
                    }
                    else if (req.body['dirName'] == 'surveillance_audit_team')
                    {
                        newEle['Team Member Name'] = ele['Member Name'];
                        if (curMoreClientDetails.length > 0)
                        {
                            newEle['Client Name'] = curMoreClientDetails[0]['Client Name'];
                            newEle['Stage 2 Team Assigned'] = curMoreClientDetails[0]['surveillance_audit_team_assigned'];
                        }
                    }
                    else if (req.body['dirName'] == 'recertification_audit_team')
                    {
                        newEle['Team Member Name'] = ele['Member Name'];
                        if (curMoreClientDetails.length > 0)
                        {
                            newEle['Client Name'] = curMoreClientDetails[0]['Client Name'];
                            newEle['Stage 2 Team Assigned'] = curMoreClientDetails[0]['recertification_audit_team_assigned'];
                        }
                    }
                    else if (req.body['dirName'] == 'stage1_audit_team_master')
                    {
                        newEle['Member Name'] = ele['Member Name'];
                        newEle['Member Email'] = ele['Member Email'];
                        newEle['Member PhoneNumber'] = ele['Member PhoneNumber'];
                    }
                    else if (req.body['dirName'] == 'stage2_audit_team_master')
                    {
                        newEle['Member Name'] = ele['Member Name'];
                        newEle['Member Email'] = ele['Member Email'];
                        newEle['Member PhoneNumber'] = ele['Member PhoneNumber'];
                    }
                    else if (req.body['dirName'] == 'employee_master')
                    {
                        newEle['Member Name'] = ele['Member Name'];
                        newEle['Member Email'] = ele['Member Email'];
                        newEle['Member PhoneNumber'] = ele['Member PhoneNumber'];
                        newEle['Member Designation'] = ele['Member Designation'];
                    }
                    else if (req.body['dirName'] == 'stage1_audit_task_list')
                    {
                        newEle['Member Assigned'] = ele['Member Assigned'];
                        newEle['Task Name'] = ele['Task Name'];
                        newEle['Task Description'] = ele['Task Description'];
                        if (curMoreClientDetails.length > 0)
                        {
                            newEle['Client Name'] = curMoreClientDetails[0]['Client Name'];
                            newEle['stage1_plan_task_status'] = curMoreClientDetails[0]['stage1_plan_task_status'];
                        }
                    }
                    else if (req.body['dirName'] == 'stage2_audit_task_list')
                    {
                        newEle['Member Assigned'] = ele['Member Assigned'];
                        newEle['Task Name'] = ele['Task Name'];
                        newEle['Task Description'] = ele['Task Description'];
                        if (curMoreClientDetails.length > 0)
                        {
                            newEle['Client Name'] = curMoreClientDetails[0]['Client Name'];
                            newEle['stage2_plan_task_status'] = curMoreClientDetails[0]['stage2_plan_task_status'];
                        }
                    }
                    else if (req.body['dirName'] == 'surveillance_audit_task_list')
                    {
                        newEle['Member Assigned'] = ele['Member Assigned'];
                        newEle['Task Name'] = ele['Task Name'];
                        newEle['Task Description'] = ele['Task Description'];
                        if (curMoreClientDetails.length > 0)
                        {
                            newEle['Client Name'] = curMoreClientDetails[0]['Client Name'];
                            newEle['surveillance_plan_task_status'] = curMoreClientDetails[0]['surveillance_plan_task_status'];
                        }
                    }
                    else if (req.body['dirName'] == 'recertification_audit_task_list')
                    {
                        newEle['Member Assigned'] = ele['Member Assigned'];
                        newEle['Task Name'] = ele['Task Name'];
                        newEle['Task Description'] = ele['Task Description'];
                        if (curMoreClientDetails.length > 0)
                        {
                            newEle['Client Name'] = curMoreClientDetails[0]['Client Name'];
                            newEle['recertification_plan_task_status'] = curMoreClientDetails[0]['recertification_plan_task_status'];
                        }
                    }
                    else if (req.body['dirName'] == 'stage1_audit_attendance' || req.body['dirName'] == 'stage2_audit_attendance' || req.body['dirName'] == 'surveillance_audit_attendance' || req.body['dirName'] == 'recertification_audit_attendance')
                    {
                        newEle['Member Name'] = ele['Member Name'];
                        newEle['Work Description'] = ele['Work Description'];
                        newEle['session_name'] = ele['session_name'];
                        newEle['address'] = ele['address'];
                        newEle['audit_status'] = ele['audit_status'];
                        newEle['attendance_status'] = ele['attendance_status'];
                        newEle['attendance_latitude'] = ele['attendance_latitude'];
                        newEle['attendance_longitude'] = ele['attendance_longitude'];
                        newEle['attendance_date'] = ele['attendance_date'];
                        newEle['attendance_time'] = ele['attendance_time'];
                        if (curMoreClientDetails.length > 0)
                        {
                            newEle['Client Name'] = curMoreClientDetails[0]['Client Name'];
                        }
                    }
                    if (req.body['logs_template_name'] != "NA")
                        newEle['logs'] = req.body['userid'] + "-_-" + ele['client_id'] + "-_-Click here";
                    else 
                    {
                        if (req.body['logsTableName'] != 'NA')
                        newEle['logs'] = "-_-Not Uploaded";
                    }
                    var files = [];
                    var fileNames = "";
                    var curDirName = clientDirList.filter(iEle => iEle == ele['client_id']);
                    var logFilesAvailable = false;
                    if (curDirName.length != 0)
                    {
                        if (req.body['dirName'] == 'incoming_initial_certification')
                        {
                            files = await ListFiles('domains/cwac.in/public_html/init_certification_client_application/' + ele['client_id']);
                        }
                        else if (req.body['dirName'] == 'quotations')
                        {
                            files = await ListFiles('domains/cwac.in/public_html/quotation_files/' + ele['client_id']);
                        }
                        else if (req.body['dirName'] == 'stage1_audit_plan')
                        {
                            files = await ListFiles('domains/cwac.in/public_html/stage1_audit_plan/' + ele['client_id']);
                            var attendanceSheetFiles = files.filter(ele => ele == 'attendance_sheet');
                        }
                        else if (req.body['dirName'] == 'stage2_audit_plan')
                        {
                            files = await ListFiles('domains/cwac.in/public_html/stage2_audit_plan/' + ele['client_id']);
                        }
                        else if (req.body['dirName'] == 'ho_activities')
                        {
                            files = await ListFiles('domains/cwac.in/public_html/HOActivity_files/' + ele['client_id']);
                        }
                        else if (req.body['dirName'] == 'initial_certification_conclusion')
                        {
                            files = await ListFiles('domains/cwac.in/public_html/initial_certification_conclusion_files/' + ele['client_id']);
                        }
                        else if (req.body['dirName'] == 'surveillance_audit_clients')
                        {
                            files = await ListFiles('domains/cwac.in/public_html/surveillance_audit_files/' + ele['client_id']);
                        }
                        else if (req.body['dirName'] == 'surveillance_audit_plans')
                        {
                            files = await ListFiles('domains/cwac.in/public_html/surveillance_audit_plans/' + ele['client_id']);
                        }
                        else if (req.body['dirName'] == 'surveillance_audit_conclusion')
                        {
                            files = await ListFiles('domains/cwac.in/public_html/surveillance_audit_conclusion_files/' + ele['client_id']);
                        }
                        else if (req.body['dirName'] == 'recertification_audit_clients')
                        {
                            files = await ListFiles('domains/cwac.in/public_html/recertification_audit_files/' + ele['client_id']);
                        }
                        else if (req.body['dirName'] == 'recertification_audit_plans')
                        {
                            files = await ListFiles('domains/cwac.in/public_html/recertification_audit_plans/' + ele['client_id']);
                        }
                        else if (req.body['dirName'] == 'recertification_audit_conclusion')
                        {
                            files = await ListFiles('domains/cwac.in/public_html/recertification_audit_conclusion_files/' + ele['client_id']);
                        }
                    }
                    for (var intIIdx = 0; intIIdx < files.length; intIIdx++)
                    {
                        if (files[intIIdx].includes(".docx") || files[intIIdx].includes(".pdf") || files[intIIdx].includes(".xls"))
                            fileNames = fileNames + ele['client_id'] + "-_-" + files[intIIdx] + ",";
                        if (files[intIIdx] == 'logs') logFilesAvailable = true;
                        if (req.body['dirName'] == 'stage1_audit_plan' || req.body['dirName'] == 'stage2_audit_plan')
                        {
                            if (files[intIIdx] == 'attendance_sheet')
                            {
                                var mFilesList = [];
                                if (req.body['dirName'] == 'stage1_audit_plan')
                                    mFilesList = await ListFiles('domains/cwac.in/public_html/stage1_audit_plan/' + ele['client_id'] + "/attendance_sheet");
                                else if (req.body['dirName'] == 'stage2_audit_plan')
                                    mFilesList = await ListFiles('domains/cwac.in/public_html/stage2_audit_plan/' + ele['client_id'] + "/attendance_sheet");
                                for (var intIIIdx = 0; intIIIdx < mFilesList.length; intIIIdx++)
                                    fileNames = fileNames + ele['client_id'] + "-_-ESCESCattendance_sheetESCESC" + mFilesList[intIIIdx] + ",";
                            }
                            if (files[intIIdx] == 'audit_report')
                            {
                                var mFilesList = [];
                                if (req.body['dirName'] == 'stage1_audit_plan')
                                    mFilesList = await ListFiles('domains/cwac.in/public_html/stage1_audit_plan/' + ele['client_id'] + "/audit_report");
                                else if (req.body['dirName'] == 'stage2_audit_plan')
                                    mFilesList = await ListFiles('domains/cwac.in/public_html/stage2_audit_plan/' + ele['client_id'] + "/audit_report");
                                for (var intIIIdx = 0; intIIIdx < mFilesList.length; intIIIdx++)
                                    fileNames = fileNames + ele['client_id'] + "-_-ESCESCaudit_reportESCESC" + mFilesList[intIIIdx] + ",";
                            }
                            if (files[intIIdx] == 'auditor_appointment_form')
                            {
                                var mFilesList = [];
                                if (req.body['dirName'] == 'stage1_audit_plan')
                                    mFilesList = await ListFiles('domains/cwac.in/public_html/stage1_audit_plan/' + ele['client_id'] + "/auditor_appointment_form");
                                else if (req.body['dirName'] == 'stage2_audit_plan')
                                    mFilesList = await ListFiles('domains/cwac.in/public_html/stage2_audit_plan/' + ele['client_id'] + "/auditor_appointment_form");
                                for (var intIIIdx = 0; intIIIdx < mFilesList.length; intIIIdx++)
                                    fileNames = fileNames + ele['client_id'] + "-_-ESCESCauditor_appointment_formESCESC" + mFilesList[intIIIdx] + ",";
                            }
                            if (files[intIIdx] == 'confidentiality_statement')
                            {
                                var mFilesList = [];
                                if (req.body['dirName'] == 'stage1_audit_plan')
                                    mFilesList = await ListFiles('domains/cwac.in/public_html/stage1_audit_plan/' + ele['client_id'] + "/confidentiality_statement");
                                else if (req.body['dirName'] == 'stage2_audit_plan')
                                    mFilesList = await ListFiles('domains/cwac.in/public_html/stage2_audit_plan/' + ele['client_id'] + "/confidentiality_statement");
                                for (var intIIIdx = 0; intIIIdx < mFilesList.length; intIIIdx++)
                                    fileNames = fileNames + ele['client_id'] + "-_-ESCESCconfidentiality_statementESCESC" + mFilesList[intIIIdx] + ",";
                            }
                            if (files[intIIdx] == 'document_review_report')
                            {
                                var mFilesList = [];
                                if (req.body['dirName'] == 'stage1_audit_plan')
                                    mFilesList = await ListFiles('domains/cwac.in/public_html/stage1_audit_plan/' + ele['client_id'] + "/document_review_report");
                                else if (req.body['dirName'] == 'stage2_audit_plan')
                                    mFilesList = await ListFiles('domains/cwac.in/public_html/stage2_audit_plan/' + ele['client_id'] + "/document_review_report");
                                for (var intIIIdx = 0; intIIIdx < mFilesList.length; intIIIdx++)
                                    fileNames = fileNames + ele['client_id'] + "-_-ESCESCdocument_review_reportESCESC" + mFilesList[intIIIdx] + ",";
                            }
                            if (files[intIIdx] == 'nc_report')
                            {
                                var mFilesList = [];
                                if (req.body['dirName'] == 'stage1_audit_plan')
                                    mFilesList = await ListFiles('domains/cwac.in/public_html/stage1_audit_plan/' + ele['client_id'] + "/nc_report");
                                else if (req.body['dirName'] == 'stage2_audit_plan')
                                    mFilesList = await ListFiles('domains/cwac.in/public_html/stage2_audit_plan/' + ele['client_id'] + "/nc_report");
                                for (var intIIIdx = 0; intIIIdx < mFilesList.length; intIIIdx++)
                                    fileNames = fileNames + ele['client_id'] + "-_-ESCESCnc_reportESCESC" + mFilesList[intIIIdx] + ",";
                            }
                            if (files[intIIdx] == 'surveillance_audit_report')
                            {
                                var mFilesList = [];
                                if (req.body['dirName'] == 'stage1_audit_plan')
                                    mFilesList = await ListFiles('domains/cwac.in/public_html/stage1_audit_plan/' + ele['client_id'] + "/surveillance_audit_report");
                                else if (req.body['dirName'] == 'stage2_audit_plan')
                                    mFilesList = await ListFiles('domains/cwac.in/public_html/stage2_audit_plan/' + ele['client_id'] + "/surveillance_audit_report");
                                for (var intIIIdx = 0; intIIIdx < mFilesList.length; intIIIdx++)
                                    fileNames = fileNames + ele['client_id'] + "-_-ESCESCsurveillance_audit_reportESCESC" + mFilesList[intIIIdx] + ",";
                            }
                        }
                        else if (req.body['dirName'] == 'ho_activities')
                        {
                            if (files[intIIdx] == 'audit_document_checklist')
                            {
                                var mFilesList = [];
                                mFilesList = await ListFiles('domains/cwac.in/public_html/HOActivity_files/' + ele['client_id'] + "/audit_document_checklist");
                                for (var intIIIdx = 0; intIIIdx < mFilesList.length; intIIIdx++)
                                    fileNames = fileNames + ele['client_id'] + "-_-ESCESCaudit_document_checklistESCESC" + mFilesList[intIIIdx] + ",";
                            }
                            if (files[intIIdx] == 'certification_recommendation_report')
                            {
                                var mFilesList = [];
                                mFilesList = await ListFiles('domains/cwac.in/public_html/HOActivity_files/' + ele['client_id'] + "/certification_recommendation_report");
                                for (var intIIIdx = 0; intIIIdx < mFilesList.length; intIIIdx++)
                                    fileNames = fileNames + ele['client_id'] + "-_-ESCESCcertification_recommendation_reportESCESC" + mFilesList[intIIIdx] + ",";
                            }
                            if (files[intIIdx] == 'contract_review_form')
                            {
                                var mFilesList = [];
                                mFilesList = await ListFiles('domains/cwac.in/public_html/HOActivity_files/' + ele['client_id'] + "/contract_review_form");
                                for (var intIIIdx = 0; intIIIdx < mFilesList.length; intIIIdx++)
                                    fileNames = fileNames + ele['client_id'] + "-_-ESCESCcontract_review_formESCESC" + mFilesList[intIIIdx] + ",";
                            }
                        }
                    }
                    if (req.body['logsTableName'] != 'NA')
                        newEle['fileNames'] = "<<file_start>>" + fileNames;
                    queryResult[intIdx] = newEle;
                    if (req.body['logs_template_name'] != "NA")
                    {
                        var curLogsData = logsData.filter(iEle => iEle['client_id'] == ele['client_id']);
                        for (var intIIdx = 0; intIIdx < curLogsData.length; intIIdx++)
                        {
                            var iEle = curLogsData[intIIdx];
                            var newIEle = {};
                            newIEle['date'] = iEle['date'];
                            if (req.body['dirName'] == 'stage1_audit_plan')
                                newIEle['description'] = iEle['stage1PlanDescription'];
                            else if (req.body['dirName'] == 'stage2_audit_plan')
                                newIEle['description'] = iEle['stage2PlanDescription'];
                            else newIEle['description'] = iEle['description'];
                            newIEle['status'] = iEle['status'];
                            var iFiles = [];
                            var iFileNames = "";
                            //var curDirName = clientDirList.filter(iEle => iEle == ele['client_id']);
                            if (logFilesAvailable)
                            {
                                if (req.body['dirName'] == 'incoming_initial_certification')
                                {
                                    iFiles = await ListFiles('domains/cwac.in/public_html/init_certification_client_application/' + ele['client_id'] + "/logs/" + iEle['id']);
                                }
                                else if (req.body['dirName'] == 'quotations')
                                {
                                    iFiles = await ListFiles('domains/cwac.in/public_html/quotation_files/' + ele['client_id'] + "/logs/" + iEle['id']);
                                }
                                else if (req.body['dirName'] == 'stage1_audit_plan')
                                {
                                    iFiles = await ListFiles('domains/cwac.in/public_html/stage1_audit_plan/' + ele['client_id'] + "/logs/" + iEle['id']);
                                }
                                else if (req.body['dirName'] == 'stage2_audit_plan')
                                {
                                    iFiles = await ListFiles('domains/cwac.in/public_html/stage2_audit_plan/' + ele['client_id'] + "/logs/" + iEle['id']);
                                }
                                else if (req.body['dirName'] == 'ho_activities')
                                {
                                    iFiles = await ListFiles('domains/cwac.in/public_html/HOActivity_files/' + ele['client_id'] + "/logs/" + iEle['id']);
                                }
                                else if (req.body['dirName'] == 'initial_certification_conclusion')
                                {
                                    iFiles = await ListFiles('domains/cwac.in/public_html/initial_certification_conclusion_files/' + ele['client_id'] + "/logs/" + iEle['id']);
                                }
                                else if (req.body['dirName'] == 'surveillance_audit_clients')
                                {
                                    iFiles = await ListFiles('domains/cwac.in/public_html/surveillance_audit_files/' + ele['client_id'] + "/logs/" + iEle['id']);
                                }
                                else if (req.body['dirName'] == 'surveillance_audit_plans')
                                {
                                    iFiles = await ListFiles('domains/cwac.in/public_html/surveillance_audit_plans/' + ele['client_id'] + "/logs/" + iEle['id']);
                                }
                                else if (req.body['dirName'] == 'surveillance_audit_conclusion')
                                {
                                    iFiles = await ListFiles('domains/cwac.in/public_html/surveillance_audit_conclusion_files/' + ele['client_id'] + "/logs/" + iEle['id']);
                                }
                                else if (req.body['dirName'] == 'recertification_audit_clients')
                                {
                                    iFiles = await ListFiles('domains/cwac.in/public_html/recertification_audit_files/' + ele['client_id'] + "/logs/" + iEle['id']);
                                }
                                else if (req.body['dirName'] == 'recertification_audit_plans')
                                {
                                    iFiles = await ListFiles('domains/cwac.in/public_html/recertification_audit_plans/' + ele['client_id'] + "/logs/" + iEle['id']);
                                }
                                else if (req.body['dirName'] == 'recertification_audit_conclusion')
                                {
                                    iFiles = await ListFiles('domains/cwac.in/public_html/recertification_audit_conclusion_files/' + ele['client_id'] + "/logs/" + iEle['id']);
                                }
                            }
                            for (var intIIIdx = 0; intIIIdx < iFiles.length; intIIIdx++)
                            {
                                if (iFiles[intIIIdx].includes(".docx") || iFiles[intIIIdx].includes(".pdf") || iFiles[intIIIdx].includes(".xls"))
                                    iFileNames = iFileNames + ele['client_id'] + "-_-" + iEle['id'] + "-_-" + iFiles[intIIIdx] + ",";
                            }
                            newIEle['fileNames'] = "<<file_start>>" + iFileNames;
                            curLogsData[intIIdx] = newIEle;
                        }
                        var newQueryResult = "";
                        curLogsData.forEach(queryResultEle => {
                            var strEle = [];
                            for (const [key, value] of Object.entries(queryResultEle)) {
                                //console.log(value + "-->");
                                //strEle.push(value.replaceAll(" ", "<<SPC>>").replaceAll("_", "<<UNDS>>").replaceAll('"', "<<DBLQT>>"));
                                strEle.push(value.replaceAll(" ", "<<SPC>>").replaceAll("_", "<<UNDS>>").replaceAll('"', "<<DBLQT>>"));
                            }
                            strEle = strEle.join("<<->>");
                            strEle = strEle + ">>--<<";
                            newQueryResult = newQueryResult + strEle;
                            //console.log(strEle);
                            //console.log("************");
                        })
                        const { status, stdout, stderr } = await java.run([req.body['userid'] + ";;;" + req.body['intIdx'] + ";;;true;;;" + req.body['userid'] + "__mis_report_template_logs.xlsx" + ";;;" + ele['client_id'] + "__mis_report_template_avail.xlsx;;;" + req.body['dirName'], newQueryResult]);
                        if (curLogsData.length > 0)
                        {
                            var buffer = await fs.readFileSync('./' + ele['client_id'] + "__mis_report_template_avail.xlsx");
                            //await UploadFile(buffer, 'domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_software/individual_reports/incoming_initial_certification/' + req.body['userid'] + '/' + ele['client_id'] + "__mis_report_template_avail.xlsx");
                            await UploadFile(buffer, 'domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_software/individual_reports/' + req.body['dirName'] + '/' + req.body['userid'] + '/' + ele['client_id'] + "__mis_report_template_avail.xlsx");
                            await fs.unlinkSync('./' + ele['client_id'] + "__mis_report_template_avail.xlsx");
                        }
                    }
                    //console.log(stdout);
                }
            //}
            var newQueryResult = "";
            // for (var intIIdx = 0; intIIdx < queryResult.length; intIIdx++)
            // {
            //     newQueryResult = newQueryResult + queryResult[intIIdx]['user_id'] + "<<->>";
            //     newQueryResult = newQueryResult + queryResult[intIIdx]['table_name'].replaceAll(" ", "_") + "<<->>";
            //     newQueryResult = newQueryResult + queryResult[intIIdx]['to_be_shown'] + "<<->>";
            //     newQueryResult = newQueryResult + queryResult[intIIdx]['table_type'].replaceAll(" ", "_") + "<<->>";
            //     newQueryResult = newQueryResult + queryResult[intIIdx]['filter_value'].replaceAll(" ", "_") + ">>--<<";
            // }
            queryResult.forEach(queryResultEle => {
                var strEle = [];
                for (const [key, value] of Object.entries(queryResultEle)) {
                    //console.log(value + "-->");
                    //strEle.push(value.replaceAll(" ", "<<SPC>>").replaceAll("_", "<<UNDS>>").replaceAll('"', "<<DBLQT>>"));
                    strEle.push(value.replaceAll(" ", "<<SPC>>").replaceAll("_", "<<UNDS>>").replaceAll('"', "<<DBLQT>>"));
                }
                strEle = strEle.join("<<->>");
                strEle = strEle + ">>--<<";
                newQueryResult = newQueryResult + strEle;
                //console.log(strEle);
                //console.log("************");
            })
            //const { status, stdout, stderr } = await java.run([req.body['userid'] + ";;;" + req.body['intIdx'] + ";;;true", newQueryResult]);
            const { status, stdout, stderr } = await java.run([req.body['userid'] + ";;;" + req.body['intIdx'] + ";;;true;;;" + req.body['userid'] + "__mis_report_template.xlsx" + ";;;" + req.body['userid'] + "__mis_report_template_avail.xlsx;;;" + req.body['dirName'], newQueryResult]);
            //console.log(stdout);
        //}
        //console.log(req.body['intIdx']);
        sql.end();
        var buffer = fs.readFileSync('./' + req.body['userid'] + '__mis_report_template_avail.xlsx');

        //ftpClient.put( buffer, 'domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_software/individual_reports/incoming_initial_certification/' + req.body['userid'] + '/data.xlsx', async function( err, list ) {
        ftpClient.put( buffer, 'domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_software/individual_reports/' + req.body['dirName'] + '/' + req.body['userid'] + '/data.xlsx', async function( err, list ) {
            if ( err ) throw err;
            ftpClient.end();
            await fs.unlinkSync('./' + req.body['userid'] + '__mis_report_template_avail.xlsx');
            await fs.unlinkSync('./' + req.body['userid'] + '__mis_report_template.xlsx');
            if (req.body['logs_template_name'] != "NA")
            await fs.unlinkSync('./' + req.body['userid'] + '__mis_report_template_logs.xlsx');
            res.send("Exported to excel successfully");
        });
        });
        }
        });
    });
    ftpClient.connect( {
        'host': 'ftp.cwac.in',
        'user': 'cwacin',
        'password': '$Rv01111996'
    } );
});
app.post('/generate_mis_reports_v1', async (req, res) => {
    var request = require('request');
    const { JavaCaller } = require('java-caller');
    const mainDirPath = path.join(__dirname, '/');
    var timestamp = "" + Date.now();
    var download = function (url, dest, callback) {
        request
          .get(url)
          .on('error', function (err) {
            console.log(err);
          })
          .pipe(fs.createWriteStream(dest))
          .on('close', callback);
    };
    const downloadFile = () =>{
        return new Promise((resolve, reject)=>{
            download("https://cwac.in/softwares_apps/quest_global_mcs/audit_software/mis_report_template.xlsx", mainDirPath + timestamp + "__mis_report_template.xlsx", async function () {
                return resolve(true);
            });
        });
    };
    await downloadFile();


    var mysql = require("mysql");
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });

    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');

        const QueryData = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query,  (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        const java = new JavaCaller({
            classPath: 'AuditPlatformProject.jar', // CLASSPATH referencing the package embedded jar files
            mainClass: 'auditplatformproject.GenerateMISReport',// Main class to call, must be available from CLASSPATH,
            rootPath: __dirname,
        });
        var tables = [
            "accreditation_board_credentials",
            "assigned_recertification_audit_teams",
            "assigned_stage1_audit_teams",
            "assigned_stage2_audit_teams",
            "assigned_surveillance_audit_teams",
            "attendance_list",
            "columns_to_filter_for_ab",
            "employees",
            "existing_checklist_inspections",
            "Form_Data",
            "ho_activities",
            "ho_activity_logs",
            "initial_certification_conclusion",
            "initial_certification_conclusion_logs",
            "initial_certification_logs",
            "inspection_checklist_templates",
            "quotation_logs",
            "quotations",
            "recertification_audit_client_logs",
            "recertification_audit_clients",
            "recertification_audit_conclusion",
            "recertification_audit_conclusion_logs",
            "recertification_audit_plan_attendance_list",
            "recertification_audit_plan_logs",
            "recertification_audit_plan_task_list",
            "recertification_audit_plans",
            "registered_users",
            "stage1_audit_plan_attendance_list",
            "stage1_audit_plan_logs",
            "stage1_audit_plan_task_list",
            "stage1_audit_plans",
            "stage1_audit_teams",
            "stage2_audit_plan_attendance_list",
            "stage2_audit_plan_logs",
            "stage2_audit_plan_task_list",
            "stage2_audit_plans",
            "stage2_audit_teams",
            "surveillance_audit_client_logs",
            "surveillance_audit_clients",
            "surveillance_audit_conclusion",
            "surveillance_audit_conclusion_logs",
            "surveillance_audit_plan_attendance_list",
            "surveillance_audit_plan_logs",
            "surveillance_audit_plan_task_list",
            "surveillance_audit_plans",
            "surveillance_audit_reminder_fixed",
            "surveillance_audit_reminder_intervals"
        ]
        for (var intIdx = 0; intIdx < tables.length; intIdx++)
        {
            if (intIdx != 6)
            {
                //var queryResult = await QueryData("SELECT * FROM Form_Data WHERE user_id = '213234234231'")
                var queryResult = [];
                if (intIdx != 26)
                    queryResult = await QueryData("SELECT * FROM " + tables[intIdx] + " WHERE user_id = '" + req.body['userid'] + "'");
                else queryResult = await QueryData("SELECT * FROM " + tables[intIdx]);
                //const { status, stdout, stderr } = await java.run([JSON.stringify(oFiles) + ";;;" + JSON.stringify(questions) + ";;;" + JSON.stringify(responses) + ";;;" + JSON.stringify(scores) + ";;;" + JSON.stringify(statuses) + ";;;" + JSON.stringify(lstNameVideos) + ";;;" + JSON.stringify(lstNameFiles), JSON.stringify(clientid) + ";;;iso_14001;;;" + req.body['checklistid'] + ";;;" + req.body['timestamp']]);
                const { status, stdout, stderr } = await java.run([timestamp + ";;;" + intIdx + ";;;false", JSON.stringify(queryResult)]);
            }
            else
            {
                queryResult = await QueryData("SELECT * FROM " + tables[intIdx] + " WHERE user_id = '" + req.body['userid'] + "'");
                var newQueryResult = "";
                for (var intIIdx = 0; intIIdx < queryResult.length; intIIdx++)
                {
                    newQueryResult = newQueryResult + queryResult[intIIdx]['user_id'] + "<<->>";
                    newQueryResult = newQueryResult + queryResult[intIIdx]['table_name'].replaceAll(" ", "_") + "<<->>";
                    newQueryResult = newQueryResult + queryResult[intIIdx]['to_be_shown'] + "<<->>";
                    newQueryResult = newQueryResult + queryResult[intIIdx]['table_type'].replaceAll(" ", "_") + "<<->>";
                    newQueryResult = newQueryResult + queryResult[intIIdx]['filter_value'].replaceAll(" ", "_") + ">>--<<";
                }
                const { status, stdout, stderr } = await java.run([timestamp + ";;;" + intIdx + ";;;true", newQueryResult]);
            }
            console.log(intIdx);
        }
        sql.end();
        res.send("done");
    });
});
app.get('/generate_mis_reports_ref', (req, res) => {
    var xl = require('excel4node');
    var wb = new xl.Workbook();
   
    // Add Worksheets to the workbook
    var ws = wb.addWorksheet('Sheet 1');
    var ws2 = wb.addWorksheet('Sheet 2');
   
    // Create a reusable style
    var style = wb.createStyle({
      font: {
        color: '#FF0800',
        size: 12,
      },
      numberFormat: '$#,##0.00; ($#,##0.00); -',
    });
   
   // Set value of cell A1 to 100 as a number type styled with 
   ws.cell(1, 1)
      .number(100)
      .style(style);
   
   // Set value of cell B1 to 200 as a number type styled with 
  
  //paramaters of style
  ws.cell(1, 2)
    .number(200)
    .style(style);
   
  // Set value of cell C1 to a formula styled with paramaters of style
  ws.cell(1, 3)
    .formula('A1 + B1')
    .style(style);
   
  // Set value of cell A2 to 'string' styled with paramaters of style
  ws.cell(2, 1)
    .string('Rohan Vishwakarma')
    .style(style);
   
  // Set value of cell A3 to true as a boolean type styled with paramaters of style but with an adjustment to the font size.
  ws.cell(3, 1)
    .bool(true)
    .style(style)
    .style({font: {size: 14}});
  //console.log('reached here');
  wb.write('Excel.xlsx', res);
});
app.get('/generate_mis_reports', async (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    } else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("client_application_form_data");
    var keys = [];
    var intAppointedAuditorIdx = 2;
    var intTaskRegisterIdx = 2;
    var xl = require('excel4node');
    var wb = new xl.Workbook();
    await userRef.once('value').then(async (snapshot) => {
        if (snapshot.numChildren() == 0) {
            //res.send(keys);
        }
        var index = 0;
        snapshot.forEach(function(item) {
            var itemVal = item.val();
            itemVal.timestamp = Object.keys(snapshot.val())[index];
            index++;
            keys.push(itemVal);
        });
        //console.log('completed');
        var ws = wb.addWorksheet('Ongoing Projects with Status');
        var ws2 = wb.addWorksheet('Client wise Appointed Auditors');
        var ws3 = wb.addWorksheet('Task Register');
        var style = wb.createStyle({
          font: {
            color: '#FF0800',
            size: 12,
          },
          numberFormat: '$#,##0.00; ($#,##0.00); -',
        });
        ws.cell(1, 1).string('Client Name');
        ws.cell(1, 2).string('Application Approved?');
        ws.cell(1, 3).string('Quotation Status?');
        ws.cell(1, 4).string('Stage 1 Team Assigned?');
        ws.cell(1, 5).string('Stage 1 Plan Status');
        ws.cell(1, 6).string('Stage 1 Task Status');
        ws.cell(1, 7).string('Stage 2 Team Assigned?');
        ws.cell(1, 8).string('Stage 2 Plan Status');
        ws.cell(1, 9).string('Stage 2 Task Status');
        ws.cell(1, 10).string('HO Activity Status');
        ws2.cell(1, 1).string("Client Name");
        ws2.cell(1, 2).string("Audit Type");
        ws2.cell(1, 3).string("Member Name");
        ws2.cell(1, 4).string("Member Email");
        ws2.cell(1, 5).string("Member Phone Number");
        ws3.cell(1, 1).string("Client Name");
        ws3.cell(1, 2).string("Audit Type");
        ws3.cell(1, 3).string("Member Name");
        ws3.cell(1, 4).string("Task Name");
        ws3.cell(1, 5).string("Task Description");
        for (var intIdx = 0; intIdx < keys.length; intIdx++) {
            ws.cell(intIdx + 2, 1).string(keys[intIdx]['Client Name']);
            ws.cell(intIdx + 2, 2).string(keys[intIdx].Approved);
            ws.cell(intIdx + 2, 3).string(keys[intIdx].quotation_status);
            ws.cell(intIdx + 2, 4).string(keys[intIdx].stage1_team_assigned);
            ws.cell(intIdx + 2, 5).string(keys[intIdx].stage1_plan_status);
            ws.cell(intIdx + 2, 6).string(keys[intIdx].stage1_plan_task_status);
            ws.cell(intIdx + 2, 7).string(keys[intIdx].stage2_team_assigned);
            ws.cell(intIdx + 2, 8).string(keys[intIdx].stage2_plan_status);
            ws.cell(intIdx + 2, 9).string(keys[intIdx].stage2_plan_task_status);
            ws.cell(intIdx + 2, 10).string(keys[intIdx].HO_activity_status); 
            // Stage 1 Audit Printing
            //ws2.cell(intAppointedAuditorIdx, 1).string("Stage 1 Audit");
            var refStage1AssignedTeams=db.ref("assigned_stage1_audit_teams/" + keys[intIdx].timestamp + "/stage1_audit_teams/");
            await refStage1AssignedTeams.once('value').then(async (snapshot) => {
                var keysStage1AssignedTeams = [];
                await snapshot.forEach(function(item) {
                    var itemVal = item.val();
                    keysStage1AssignedTeams.push(itemVal);
                });
                if (keysStage1AssignedTeams.length != 0)  {
                    ws2.cell(intAppointedAuditorIdx, 1).string(keys[intIdx]['Client Name']);
                    //ws3.cell(intTaskRegisterIdx, 1).string(keys[intIdx]['Client Name']);
                    ws2.cell(intAppointedAuditorIdx, 2).string('Stage 1 audit');
                    //ws3.cell(intTaskRegisterIdx, 2).string('Stage 1 audit');
                }
                for (var intInnerIdx = 0; intInnerIdx < keysStage1AssignedTeams.length; intInnerIdx++) 
                {
                    var ref=db.ref("stage1_audit_teams");
                    var email = "";
                    var phoneNo = "";
                    await ref.once('value').then(async function(dataSnapshot) {
                        dataSnapshot.forEach(function(item) {
                            var itemVar = item.val();
                            if (itemVar['Member Name'] == keysStage1AssignedTeams[intInnerIdx]) {
                                email = itemVar['Member Email'];
                                phoneNo = itemVar['Member PhoneNumber'];
                                return;
                            }
                        })
                    });
                    ws2.cell(intAppointedAuditorIdx, 3).string(keysStage1AssignedTeams[intInnerIdx]);
                    //ws3.cell(intTaskRegisterIdx, 3).string(keysStage1AssignedTeams[intInnerIdx]);
                    ws2.cell(intAppointedAuditorIdx, 4).string(email);
                    ws2.cell(intAppointedAuditorIdx, 5).string(phoneNo);
                    intAppointedAuditorIdx++;
                    //intTaskRegisterIdx++;
                }
              }, (errorObject) => {
                console.log('The read failed: ' + errorObject.name);
            });
            var refStage1TaskList=db.ref("stage1_audit_plans/" + keys[intIdx].timestamp + "/taskList/");
            await refStage1TaskList.once('value').then(async (snapshot) => {
                var keysTaskList = [];
                await snapshot.forEach(function(item) {
                    var itemVal = item.val();
                    keysTaskList.push(itemVal);
                });
                if (keysTaskList.length != 0)  {
                    ws3.cell(intTaskRegisterIdx, 1).string(keys[intIdx]['Client Name']);
                    ws3.cell(intTaskRegisterIdx, 2).string('Stage 1 audit');
                }
                for (var intInnerIdx = 0; intInnerIdx < keysTaskList.length; intInnerIdx++) {
                    ws3.cell(intTaskRegisterIdx, 3).string(keysTaskList[intInnerIdx]['Member Assigned']);
                    ws3.cell(intTaskRegisterIdx, 4).string(keysTaskList[intInnerIdx]['Task Name']);
                    ws3.cell(intTaskRegisterIdx, 5).string(keysTaskList[intInnerIdx]['Task Description']);
                    intTaskRegisterIdx++;
                }
              }, (errorObject) => {
                console.log('The read failed: ' + errorObject.name);
            });
            // End of Stage 1 Audit Printing
            // Stage 2 Audit Printing
            //ws2.cell(intAppointedAuditorIdx, 1).string("Stage 2 Audit");
            var refStage1AssignedTeams=db.ref("assigned_stage2_audit_teams/" + keys[intIdx].timestamp + "/stage2_audit_teams/");
            await refStage1AssignedTeams.once('value').then(async (snapshot) => {
                var keysStage1AssignedTeams = [];
                await snapshot.forEach(function(item) {
                    var itemVal = item.val();
                    keysStage1AssignedTeams.push(itemVal);
                });
                if (keysStage1AssignedTeams.length != 0)  {
                    ws2.cell(intAppointedAuditorIdx, 2).string('Stage 2 Audit');
                    //ws3.cell(intTaskRegisterIdx, 2).string('Stage 2 Audit');
                }
                for (var intInnerIdx = 0; intInnerIdx < keysStage1AssignedTeams.length; intInnerIdx++) 
                {    
                    var ref=db.ref("stage2_audit_teams");
                    var email = "";
                    var phoneNo = "";
                    await ref.once('value').then(async function(dataSnapshot) {
                        dataSnapshot.forEach(function(item) {
                            var itemVar = item.val();
                            if (itemVar['Member Name'] == keysStage1AssignedTeams[intInnerIdx]) {
                                email = itemVar['Member Email'];
                                phoneNo = itemVar['Member PhoneNumber'];
                                return;
                            }
                        })
                    });
                    ws2.cell(intAppointedAuditorIdx, 3).string(keysStage1AssignedTeams[intInnerIdx]);
                    //ws3.cell(intTaskRegisterIdx, 3).string(keysStage1AssignedTeams[intInnerIdx]);
                    ws2.cell(intAppointedAuditorIdx, 4).string(email);
                    ws2.cell(intAppointedAuditorIdx, 5).string(phoneNo);
                    intAppointedAuditorIdx++;
                    //intTaskRegisterIdx++;
                }
              }, (errorObject) => {
                console.log('The read failed: ' + errorObject.name);
            });
            refStage1TaskList=db.ref("stage2_audit_plans/" + keys[intIdx].timestamp + "/taskList/");
            await refStage1TaskList.once('value').then(async (snapshot) => {
                var keysTaskList = [];
                await snapshot.forEach(function(item) {
                    var itemVal = item.val();
                    keysTaskList.push(itemVal);
                });
                if (keysTaskList.length != 0)  {
                    //ws3.cell(intTaskRegisterIdx, 1).string(keys[intIdx]['Client Name']);
                    ws3.cell(intTaskRegisterIdx, 2).string('Stage 2 audit');
                }
                for (var intInnerIdx = 0; intInnerIdx < keysTaskList.length; intInnerIdx++) {
                    ws3.cell(intTaskRegisterIdx, 3).string(keysTaskList[intInnerIdx]['Member Assigned']);
                    ws3.cell(intTaskRegisterIdx, 4).string(keysTaskList[intInnerIdx]['Task Name']);
                    ws3.cell(intTaskRegisterIdx, 5).string(keysTaskList[intInnerIdx]['Task Description']);
                    intTaskRegisterIdx++;
                }
              }, (errorObject) => {
                console.log('The read failed: ' + errorObject.name);
            });
            // End of Stage 2 Audit Printing
        }
      }, (errorObject) => {
        console.log('The read failed: ' + errorObject.name);
      }); 
      wb.write('Excel.xlsx', res);
      client.delete();
});
app.get('/sample_on_async', async (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("client_application_form_data");
    //var done = false;
    await getData1();
    async function getData1() {
        await userRef.once('value')
        .then(async function(dataSnapshot) {
            console.log('completed inside stage 1')
        });
    }
    //while (!done);
    console.log('completed stage 1')


    userRef=db.ref("stage1_audit_teams");
    await getData2();
    async function getData2() {
        await userRef.once('value')
            .then(async function(dataSnapshot) {
                console.log('completed inside stage 2')
        });
    }   
    console.log('completed stage 2')


    res.send('done');
});
app.post('/register_user', (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("registered_users");
    addUser({
        'timestamp': req.body.timestamp,
        'username': req.body.username,
        'password': req.body.password,
        'email': req.body.email
    })
    function addUser(obj) {
        var oneUser=userRef.child(req.body['timestamp']);
        oneUser.update(obj,(err)=>{
            if(err){
                res.send('Something went wrong. Please submit again.');
            }
            else res.send('User Registered Successfully');
            client.delete();
        })
    }
});
app.post('/logging_in', async (req, res) => {
    var serviceAccount = require('./admin.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://auditsoftware-53237-default-rtdb.firebaseio.com/",
            authDomain: "auditsoftware-53237-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("registered_users");
    var status = "Invalid username or password";
    await userRef.once('value').then((snapshot) => {
        snapshot.forEach(function(item) {
            var user = item.val();
            if (user.username == req.body.username && user.password == req.body.password) {
                //status = "Logged in Successfully";
                status = AUTH_TOKEN;
                return;
            }
        });
        res.send(status);
    }, (errorObject) => {

    }); 
});
app.post('/fetch_profile_details', async (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        const QueryExistingCredentials = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query,  (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        var result = await QueryExistingCredentials("SELECT * FROM registered_users WHERE id = '" + req.body['userid'] + "'");
        res.send({
            "username": result[0]['new_username'],
            "name": result[0]['name'],
            "company_name": result[0]['company_name'],
            "email": result[0]['email'],
            "phone_no": result[0]['phone_no']
        })
    });
});
app.post('/aws_rds__logging_in_v1', async (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    const QueryExistingCredentials = (query) => {
        return new Promise((resolve, reject)=>{
            sql.query(query,  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    const QueryCompanyName = (id) => {
        return new Promise((resolve, reject)=>{
            sql.query("SELECT * FROM registered_users WHERE id = '" + id + "'",  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    const QuerySQL = (queryForFilter) => {
        return new Promise((resolve, reject)=>{
            sql.query(queryForFilter,  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        var result = await QueryExistingCredentials("SELECT * FROM registered_users WHERE new_username = '" + req.body['username'] + "' AND new_password = '" + req.body['password'] + "'");
        if (result.length != 0) 
        {
            var expirationDateObj = new Date(result[0]['subs_expiry_date'].split("-")[2] + "-" + result[0]['subs_expiry_date'].split("-")[1] + "-" + result[0]['subs_expiry_date'].split("-")[0])
            var todayDateObj = new Date();
            var daysDiff = expirationDateObj.getTime() - todayDateObj.getTime();
            daysDiff = Math.ceil(daysDiff / (1000 * 3600 * 24));
            await QuerySQL("UPDATE incomplete_file_upload_cleanup SET delete_or_not = 'Yes' WHERE user_id = '" + result[0]['id'] + "'");
            sql.end();
            res.send({
                "status": "true", 
                "id": result[0]['id'], 
                "name": result[0]['name'], 
                "company_name": result[0]['company_name'], 
                "role": "Audit Company Owner",
                "filter_workflow": result[0]['filter_workflow'],
                "subs_expiry_date": result[0]['subs_expiry_date'],
                "daysDiff": daysDiff,
            });
            return;
        }
        result = await QueryExistingCredentials("SELECT * FROM accreditation_board_credentials WHERE username = '" + req.body['username'] + "' AND password = '" + req.body['password'] + "'");
        if (result.length != 0) 
        {
            var resultId = await QueryCompanyName(result[0]['user_id']);
            var expirationDateObj = new Date(resultId[0]['subs_expiry_date'].split("-")[2] + "-" + resultId[0]['subs_expiry_date'].split("-")[1] + "-" + resultId[0]['subs_expiry_date'].split("-")[0])
            var todayDateObj = new Date();
            var daysDiff = expirationDateObj.getTime() - todayDateObj.getTime();
            daysDiff = Math.ceil(daysDiff / (1000 * 3600 * 24));
            await QuerySQL("UPDATE incomplete_file_upload_cleanup SET delete_or_not = 'Yes' WHERE user_id = '" + result[0]['user_id'] + "'");
            sql.end();
            res.send({
                "status": "true", 
                "id": result[0]['user_id'], 
                "name": result[0]['username'], 
                "company_name": resultId[0]['company_name'],
                "role": "Accreditation Board",
                "filter_workflow": resultId[0]['filter_workflow'],
                "subs_expiry_date": resultId[0]['subs_expiry_date'],
                "daysDiff": daysDiff
            });
            return;
        }
        result = await QueryExistingCredentials("SELECT * FROM stage1_audit_teams WHERE `Member Email` = '" + req.body['username'] + "' AND password = '" + req.body['password'] + "'");
        if (result.length != 0) 
        {
            var resultId = await QueryCompanyName(result[0]['user_id']);
            var expirationDateObj = new Date(resultId[0]['subs_expiry_date'].split("-")[2] + "-" + resultId[0]['subs_expiry_date'].split("-")[1] + "-" + resultId[0]['subs_expiry_date'].split("-")[0])
            var todayDateObj = new Date();
            var daysDiff = expirationDateObj.getTime() - todayDateObj.getTime();
            daysDiff = Math.ceil(daysDiff / (1000 * 3600 * 24));
            await QuerySQL("UPDATE incomplete_file_upload_cleanup SET delete_or_not = 'Yes' WHERE user_id = '" + result[0]['user_id'] + "'");
            sql.end();
            res.send({
                "status": "true", 
                "id": result[0]['user_id'], 
                "name": result[0]['Member Name'], 
                "company_name": resultId[0]['company_name'],
                "role": "Stage 1 Auditor",
                "memberId": result[0]['id'],
                "filter_workflow": resultId[0]['filter_workflow'],
                "subs_expiry_date": resultId[0]['subs_expiry_date'],
                "daysDiff": daysDiff
            });
            return;
        }
        result = await QueryExistingCredentials("SELECT * FROM stage2_audit_teams WHERE `Member Email` = '" + req.body['username'] + "' AND password = '" + req.body['password'] + "'");
        if (result.length != 0)
        {
            var resultId = await QueryCompanyName(result[0]['user_id']);
            var expirationDateObj = new Date(resultId[0]['subs_expiry_date'].split("-")[2] + "-" + resultId[0]['subs_expiry_date'].split("-")[1] + "-" + resultId[0]['subs_expiry_date'].split("-")[0])
            var todayDateObj = new Date();
            var daysDiff = expirationDateObj.getTime() - todayDateObj.getTime();
            daysDiff = Math.ceil(daysDiff / (1000 * 3600 * 24));
            await QuerySQL("UPDATE incomplete_file_upload_cleanup SET delete_or_not = 'Yes' WHERE user_id = '" + result[0]['user_id'] + "'");
            sql.end();
            res.send({
                "status": "true", 
                "id": result[0]['user_id'], 
                "name": result[0]['Member Name'], 
                "company_name": resultId[0]['company_name'],
                "role": "Stage 2 Auditor",
                "memberId": result[0]['id'],
                "filter_workflow": resultId[0]['filter_workflow'],
                "subs_expiry_date": resultId[0]['subs_expiry_date'],
                "daysDiff": daysDiff
            });
            return;
        }
        result = await QueryExistingCredentials("SELECT * FROM employees WHERE `Member Email` = '" + req.body['username'] + "' AND password = '" + req.body['password'] + "'");
        if (result.length != 0) 
        {
            var resultId = await QueryCompanyName(result[0]['user_id']);
            var expirationDateObj = new Date(resultId[0]['subs_expiry_date'].split("-")[2] + "-" + resultId[0]['subs_expiry_date'].split("-")[1] + "-" + resultId[0]['subs_expiry_date'].split("-")[0])
            var todayDateObj = new Date();
            var daysDiff = expirationDateObj.getTime() - todayDateObj.getTime();
            daysDiff = Math.ceil(daysDiff / (1000 * 3600 * 24));
            await QuerySQL("UPDATE incomplete_file_upload_cleanup SET delete_or_not = 'Yes' WHERE user_id = '" + result[0]['user_id'] + "'");
            sql.end();
            res.send({
                "status": "true", 
                "id": result[0]['user_id'], 
                "name": result[0]['Member Name'], 
                "company_name": resultId[0]['company_name'],
                "role": result[0]['Member Designation'],
                "memberId": result[0]['employee_id'],
                "filter_workflow": resultId[0]['filter_workflow'],
                "subs_expiry_date": resultId[0]['subs_expiry_date'],
                "daysDiff": daysDiff
            });
            return;
        }
        if (req.body['username'] == 'rohan' && req.body['password'] == 'rohanauditsoft')
        {
            await QuerySQL("UPDATE incomplete_file_upload_cleanup SET delete_or_not = 'Yes' WHERE user_id = 'rvas01202201'");
            sql.end();
            res.send({
                "status": "true", 
                "id": "rvas01202201", 
                "name": "Rohan Vishwakarma", 
                "company_name": "CWAC Technologies Private Limited",
                "role": "Platform Owner",
                "filter_workflow": "No",
                "subs_expiry_date": "NA",
                "daysDiff": "NA"
            });
            return;
        }
        sql.end();
        res.send({"status": "false"});
        // sql.query("SELECT * FROM registered_users WHERE username = '" + req.body['username'] + "' AND password = '" + req.body['password'] + "'", function (err, recordset) {
        //     if (err) console.log(err)
        //     sql.end();
        //     if (!recordset) 
        //     {
        //         res.send({"status": "false"});
        //         return;
        //     }
        //     else
        //     {
        //         if (recordset.length != 0) res.send({"status": "true", "id": recordset[0]['id']});
        //         else res.send({"status": "false"});
        //     }
        // });
    }); 
});
app.post('/offline__logging_in_v1', async (req, res) => {
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM registered_users WHERE username = '" + req.body['username'] + "' AND password = '" + req.body['password'] + "'", function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send({"status": "false"});
                return;
            }
            else
            {
                if (recordset['recordsets'][0].length != 0) res.send({"status": "true", "id": recordset['recordsets'][0][0]['id']});
                else res.send({"status": "false"});
            }
        });
    }); 
});
app.post('/verify_token', async (req, res) => {
    if (req.body['audit_software_token'] == AUTH_TOKEN) 
        res.send("Token Verified");
    else res.send("Token Invalid");
});
app.post('/verify_id', async (req, res) => {
    // if (req.body['userid'] == AUTH_TOKEN) 
    //     res.send("Token Verified");
    // else res.send("Token Invalid");
    var sql = require("mssql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var config = {
        user: "sa",
        password: "12345",
        server: "localhost", 
        database: "AuditSoftware",
        trustServerCertificate: true
    };
    sql.connect(config, function (err) {
        if (err) console.log(err);
        else console.log('connected');
        var request = new sql.Request();
        request.query("SELECT * FROM registered_users WHERE id = '" + req.body['userid'] + "'", function (err, recordset) {
            if (err) console.log(err)
            if (!recordset) 
            {
                res.send("Token Not Verified");
                return;
            }
            else
            {
                if (recordset['recordsets'][0].length != 0) res.send("Token Verified");
                else res.send("Token Not Verified");
            }
        });
    }); 
});
app.post('/aws_rds__verify_id', async (req, res) => {
    // if (req.body['userid'] == AUTH_TOKEN) 
    //     res.send("Token Verified");
    // else res.send("Token Invalid");
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("SELECT * FROM registered_users WHERE id = '" + req.body['userid'] + "'", function (err, recordset) {
            if (err) console.log(err)
            sql.end();
            if (!recordset) 
            {
                res.send("Token Not Verified");
                return;
            }
            else
            {
                if (recordset.length != 0 || req.body['userid'] == 'rvas01202201') res.send("Token Verified");
                else res.send("Token Not Verified");
            }
        });
    }); 
});
// added on 5-Apr-2022
app.get('/testurl_1', (req, res) => {
    var xl = require('excel4node');
    var wb = new xl.Workbook();
    var ws = wb.addWorksheet('Ongoing Projects with Status');
    ws.cell(1, 1).string('Entry 1');
    ws.cell(2, 1).string('Entry 2');
    ws.cell(3, 1).string('Entry 3');
    wb.write('Excel.xlsx', res);
    
});
app.post('/testurl_2', (req, res) => {
    var xl = require('excel4node');
    var wb = new xl.Workbook();
    var ws = wb.addWorksheet('Ongoing Projects with Status');
    ws.cell(1, 1).string(req.body['entry1']);
    ws.cell(2, 1).string(req.body['entry2']);
    ws.cell(3, 1).string(req.body['entry3']);
    var bf = null;
    wb.writeToBuffer().then(function(buffer) {
        // Do something with buffer
        console.log('buffer')
        bf = buffer
        const ftpClient = new Ftp();
        ftpClient.on( 'ready', function() {
            ftpClient.mkdir('domains/cwac.in/public_html/temp_files/', true, (err) => {
                if (!err) {
                    ftpClient.put( buffer, 'domains/cwac.in/public_html/temp_files/Excel.xlsx', function( err, list ) {
                        if ( err ) throw err;
                        ftpClient.end();     
                        res.send(JSON.stringify({"OK": "File Uploaded", "Param1": req.body['entry1'], "Param2": req.body['entry2'], "Param3": req.body['entry3']}));
                        //res.send(JSON.stringify({"OK": "File Uploaded", "Param1": 'entry1', "Param2": 'entry2', "Param3": 'entry3'}));
                    });  
                }
            });
        });
        
        ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        } );
    });
});
app.post('/testurl_3', (req, res) => {
    var Excel = require('exceljs');
    var workbook = new Excel.Workbook();
    //workbook.xlsx.readFile('old.xlsx')
    workbook.xlsx.readFile('dummy_template.xlsx')
        .then(async function() {
            var worksheet = workbook.getWorksheet(1);
            var row = worksheet.getRow(1);
            row.getCell(10).value = req.body['entry1']; // A5's value set to 5
            row.getCell(11).value = req.body['entry2']; // A5's value set to 5
            row.getCell(12).value = req.body['entry3']; // A5's value set to 5
            row.commit();
            //return workbook.xlsx.writeFile('new.xlsx');
            //const buffer = await workbook.xlsx.writeBuffer();
            const buffer = await workbook.xlsx.writeBuffer();
            const ftpClient = new Ftp();
            ftpClient.on( 'ready', function() {
                //ftpClient.cwd
                //res.send(JSON.stringify({"aaz":"aaz"})) //error not coming here
                ftpClient.mkdir('domains/cwac.in/public_html/temp_files/', true, (err) => {
                    //res.send(JSON.stringify({"aaz":"aaz"})) // error coming here
                    if (!err) {
                        ftpClient.put( buffer, 'domains/cwac.in/public_html/temp_files/Excel.xlsx', function( err, list ) {
                            if ( err ) throw err;
                            ftpClient.end();     
                            res.send(JSON.stringify({"OK": "File Uploaded", "Param1": req.body['entry1'], "Param2": req.body['entry2'], "Param3": req.body['entry3']}));
                            //res.send(JSON.stringify({"OK": "File Uploaded", "Param1": 'entry1', "Param2": 'entry2', "Param3": 'entry3'}));
                        });
                    }
                });
                //res.send(JSON.stringify({"aaz":"aaz"})) //error coming here
            });

            ftpClient.connect( {
                'host': 'ftp.cwac.in',
                'user': 'cwacin',
                'password': '$Rv01111996'
            } );
        })
});
app.post('/testurl_4', async (req, res) => {
    const templateFile = fs.readFileSync(path.resolve(__dirname, 'old_doc2.docx'), 'binary');
    const zip = new PizZip(templateFile);
    
    try {
        // Attempt to read all the templated tags
        let outputDocument = new Docxtemplater(zip);
    
        const dataToAdd = {
            employeeList: [
            { id: 28521, name: 'Frank', age: 34, city: 'Melbourne' },
            { id: 84973, name: 'Chloe', age: 28, city: 'Perth' },
            { id: 10349, name: 'Hank', age: 68, city: 'Hobart' },
            { id: 44586, name: 'Gordon', age: 47, city: 'Melbourne' },
            ],
            'title': req.body['entry1'],
            'description': req.body['entry2'],
            'body': req.body['entry3'],
            'Age': "19",
            'Address': "Flat 305, ABC",
            'Employees': "50"
        };
        // Set the data we wish to add to the document
        outputDocument.setData(dataToAdd);
    
        try {
            // Attempt to render the document (Add data to the template)
            outputDocument.render()
    
            // Create a buffer to store the output data
            let outputDocumentBuffer = outputDocument.getZip().generate({ type: 'nodebuffer' });
    
            // Save the buffer to a file
            fs.writeFileSync(path.resolve(__dirname, 'OUTPUT.docx'), outputDocumentBuffer);
            const ftpClient = new Ftp();
            ftpClient.on( 'ready', function() {
                //ftpClient.cwd
                //res.send(JSON.stringify({"aaz":"aaz"})) //error not coming here
                ftpClient.mkdir('domains/cwac.in/public_html/temp_files/', true, (err) => {
                    //res.send(JSON.stringify({"aaz":"aaz"})) // error coming here
                    if (!err) {
                        ftpClient.put( outputDocumentBuffer, 'domains/cwac.in/public_html/temp_files/output.docx', function( err, list ) {
                            if ( err ) throw err;
                            ftpClient.end();     
                            console.log('done')
                            res.send(JSON.stringify({"OK": "OK"}))
                            //res.send(JSON.stringify({"OK": "File Uploaded", "Param1": req.body['entry1'], "Param2": req.body['entry2'], "Param3": req.body['entry3']}));
                            //res.send(JSON.stringify({"OK": "File Uploaded", "Param1": 'entry1', "Param2": 'entry2', "Param3": 'entry3'}));
                        });
                    }
                });
                //res.send(JSON.stringify({"aaz":"aaz"})) //error coming here
            });
    
            ftpClient.connect( {
                'host': 'ftp.cwac.in',
                'user': 'cwacin',
                'password': '$Rv01111996'
            } );
        }
        catch (error) {
            console.error(`ERROR Filling out Template:`);
            console.error(error)
        }
    } catch(error) {
        console.error(`ERROR Loading Template:`);
        console.error(error);
    }
});
app.post('/url_exists', (req, res) => {
    const { JavaCaller } = require("java-caller");
    var urlExists = require('url-exists');
    var prevDate = "";
    urlExists(req.body['url'], function(err, exists) {
        if (!exists)
        {
            console.log(exists)
            //res.send(exists); // false
            if (req.body['file_type'] == 'contract_review_form')
            {
                urlExists(req.body['prev_url'], function(err, oExists) {
                    if (oExists)
                    {
                        const oHttp = require('https'); // or 'https' for https:// URLs
                        const oFs = require('fs');
                        const oFile = oFs.createWriteStream("application_form11.docx");
                        //const request = http.get('https://cwac.in/init_certification_client_application/1645433053973/forms/application_form.docx', function(response) {
                        const request = oHttp.get(req.body['prev_url'], function(response) {
                            response.pipe(oFile);
                            // after download completed close filestream
                            oFile.on("finish", async () => {
                                oFile.close();
                                const oJava = new JavaCaller({
                                    classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                                    mainClass: 'wordfilemgtnodejs.WordFileMgtNodeJS',// Main class to call, must be available from CLASSPATH,
                                    rootPath: __dirname,
                                });
                                const { status, stdout, stderr } = await oJava.run();
                                var oDataString = String(stdout)
                                oDataString = oDataString.replaceAll('\n', '')
                                oDataString = oDataString.replaceAll('\r', '')
                                oDataString = oDataString.replaceAll('\t\t', '-->')
                                var oDataString = oDataString.split("**************************")
                                for (var oIntIdx = 0; oIntIdx < oDataString.length; oIntIdx++) {
                                    var keyValuePair = oDataString[oIntIdx];
                                    if (keyValuePair.split("-->")[0].includes("Date: "))
                                    {
                                        prevDate = keyValuePair.split("-->")[0].split(": ")[1].trim();
                                        console.log({"contract_review_form_field_values": false, "app_date": prevDate});
                                        res.send({"contract_review_form_field_values": false, "app_date": prevDate})
                                    }
                                }
                            });
                        });
                    }
                    else 
                    {
                        res.send({"contract_review_form_field_values": false, "app_date": prevDate});
                    }
                });
            }
            else if (req.body['file_type'] == 'stage1_audit_report')
            {
                urlExists(req.body['prev_url'], function(err, oExists) {
                    if (oExists)
                    {
                        const oHttp = require('https'); // or 'https' for https:// URLs
                        const oFs = require('fs');
                        const oFile = oFs.createWriteStream("application_form11.docx");
                        //const request = http.get('https://cwac.in/init_certification_client_application/1645433053973/forms/application_form.docx', function(response) {
                        const request = oHttp.get(req.body['prev_url'], function(response) {
                            response.pipe(oFile);
                            // after download completed close filestream
                            oFile.on("finish", async () => {
                                oFile.close();
                                const oJava = new JavaCaller({
                                    classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                                    mainClass: 'wordfilemgtnodejs.WordFileMgtNodeJS',// Main class to call, must be available from CLASSPATH,
                                    rootPath: __dirname,
                                });
                                const { status, stdout, stderr } = await oJava.run();
                                var oDataString = String(stdout)
                                oDataString = oDataString.replaceAll('\n', '')
                                oDataString = oDataString.replaceAll('\r', '')
                                oDataString = oDataString.replaceAll('\t\t', '-->')
                                var oDataString = oDataString.split("**************************")
                                for (var oIntIdx = 0; oIntIdx < oDataString.length; oIntIdx++) {
                                    var keyValuePair = oDataString[oIntIdx];
                                    if (keyValuePair.split("-->")[0] == 'Reviewer sign:')
                                    {
                                        prevDate = keyValuePair.split("-->")[1].split(":")[1].trim()
                                        console.log({"stage1_audit_report_field_values": false, "app_date": prevDate})
                                        res.send({"stage1_audit_report_field_values": false, "app_date": prevDate})
                                    }
                                }
                            });
                        });
                    }
                    else 
                    {
                        res.send({"stage1_audit_report_field_values": false, "app_date": prevDate})
                    }
                });
            }
            else if (req.body['file_type'] == 'certification_audit_report')
            {
                urlExists(req.body['prev_url'], function(err, oExists) {
                    if (oExists)
                    {
                        const oHttp = require('https'); // or 'https' for https:// URLs
                        const oFs = require('fs');
                        const oFile = oFs.createWriteStream("application_form11.docx");
                        //const request = http.get('https://cwac.in/init_certification_client_application/1645433053973/forms/application_form.docx', function(response) {
                        const request = oHttp.get(req.body['prev_url'], function(response) {
                            response.pipe(oFile);
                            // after download completed close filestream
                            oFile.on("finish", async () => {
                                oFile.close();
                                const oJava = new JavaCaller({
                                    classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                                    mainClass: 'wordfilemgtnodejs.WordFileMgtNodeJS',// Main class to call, must be available from CLASSPATH,
                                    rootPath: __dirname,
                                });
                                const { status, stdout, stderr } = await oJava.run();
                                var oDataString = String(stdout)
                                oDataString = oDataString.replaceAll('\n', '')
                                oDataString = oDataString.replaceAll('\r', '')
                                oDataString = oDataString.replaceAll('\t\t', '-->')
                                var oDataString = oDataString.split("**************************")
                                for (var oIntIdx = 0; oIntIdx < oDataString.length; oIntIdx++) {
                                    var keyValuePair = oDataString[oIntIdx];
                                    if (keyValuePair.split("-->").length == 4 && keyValuePair.split("-->")[0] == "Auditor")
                                    {
                                        prevDate = keyValuePair.split("-->")[3].trim();
                                        console.log({"certification_audit_report_field_values": false, "app_date": prevDate})
                                        res.send({"certification_audit_report_field_values": false, "app_date": prevDate})
                                    }
                                }
                            });
                        });
                    }
                    else 
                    {
                        res.send({"certification_audit_report_field_values": false, "app_date": prevDate})
                    }
                });
            }
            else if (req.body['file_type'] == 'nc_report')
            {
                urlExists(req.body['prev_url'], function(err, oExists) {
                    if (oExists)
                    {
                        const oHttp = require('https'); // or 'https' for https:// URLs
                        const oFs = require('fs');
                        const oFile = oFs.createWriteStream("application_form11.docx");
                        //const request = http.get('https://cwac.in/init_certification_client_application/1645433053973/forms/application_form.docx', function(response) {
                        const request = oHttp.get(req.body['prev_url'], function(response) {
                            response.pipe(oFile);
                            // after download completed close filestream
                            oFile.on("finish", async () => {
                                oFile.close();
                                const oJava = new JavaCaller({
                                    classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                                    mainClass: 'wordfilemgtnodejs.WordFileMgtNodeJS',// Main class to call, must be available from CLASSPATH,
                                    rootPath: __dirname,
                                });
                                const { status, stdout, stderr } = await oJava.run();
                                var oDataString = String(stdout)
                                oDataString = oDataString.replaceAll('\n', '')
                                oDataString = oDataString.replaceAll('\r', '')
                                oDataString = oDataString.replaceAll('\t\t', '-->')
                                var oDataString = oDataString.split("**************************")
                                for (var oIntIdx = 0; oIntIdx < oDataString.length; oIntIdx++) {
                                    var keyValuePair = oDataString[oIntIdx];
                                    if (keyValuePair.split("-->")[0].includes("(Signature)/ date:"))
                                    {
                                        prevDate = keyValuePair.split("-->")[0].split("(Signature)/ date: ")[1].split(", Lead Auditor")[0].trim();
                                        console.log({"nc_report_field_values": false, "app_date": prevDate})
                                        res.send({"nc_report_field_values": false, "app_date": prevDate})
                                    }
                                }
                            });
                        });
                    }
                    else 
                    {
                        res.send({"nc_report_field_values": false, "app_date": prevDate})
                    }
                });
            }
            else if (req.body['file_type'] == 'customer_feedback_form')
            {
                urlExists(req.body['prev_url'], function(err, oExists) {
                    if (oExists)
                    {
                        const oHttp = require('https'); // or 'https' for https:// URLs
                        const oFs = require('fs');
                        const oFile = oFs.createWriteStream("application_form11.docx");
                        //const request = http.get('https://cwac.in/init_certification_client_application/1645433053973/forms/application_form.docx', function(response) {
                        const request = oHttp.get(req.body['prev_url'], function(response) {
                            response.pipe(oFile);
                            // after download completed close filestream
                            oFile.on("finish", async () => {
                                oFile.close();
                                const oJava = new JavaCaller({
                                    classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                                    mainClass: 'wordfilemgtnodejs.WordFileMgtNodeJS',// Main class to call, must be available from CLASSPATH,
                                    rootPath: __dirname,
                                });
                                const { status, stdout, stderr } = await oJava.run();
                                var oDataString = String(stdout)
                                oDataString = oDataString.replaceAll('\n', '')
                                oDataString = oDataString.replaceAll('\r', '')
                                oDataString = oDataString.replaceAll('\t\t', '-->')
                                var oDataString = oDataString.split("**************************")
                                for (var oIntIdx = 0; oIntIdx < oDataString.length; oIntIdx++) {
                                    var keyValuePair = oDataString[oIntIdx];
                                    if (keyValuePair.split("-->")[0].includes("Verified by"))
                                    {
                                        prevDate = keyValuePair.split("Date : ")[1].split("Note: ")[0].trim();
                                        console.log({"customer_feedback_form_field_values": false, "app_date": prevDate})
                                        res.send({"customer_feedback_form_field_values": false, "app_date": prevDate})
                                    }
                                }
                            });
                        });
                    }
                    else 
                    {
                        res.send({"customer_feedback_form_field_values": false, "app_date": prevDate})
                    }
                });
            }
            else res.send(exists);
        }
        else {
            var noOfFilledEntries = 0;
            if (req.body['file_type'] == 'application_form')
            {
            var application_form_field_values = [
                {"word_file_field_name": "Form No.", "field_name": "Form No.", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Issue No.", "field_name": "Issue No.", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Rev No.", "field_name": "Revision No.", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Rev date", "field_name": "Revision Date", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Certification Type", "field_name": "Certification Type", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Organization Name", "field_name": "Organization Name", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Organisation Type", "field_name": "Organization Type", "field_value": "", "optional": "no"}, //radio
                {"word_file_field_name": "Organisation Type: Others", "field_name": "Organization Type: Others", "field_value": "", "optional": "yes"},
                {"word_file_field_name": "Name/ Designation of Top Management", "field_name": "Name/ Designation of Top Management", "field_value": "", "optional": "no"},
                {"word_file_field_name": " Mobile no.", "field_name": "Mobile Number", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Head Office", "field_name": "Head Office", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Main Operative Site (for additional sites see next page)", "field_name": "Main Operative Site", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Name ", "field_name": "Contact Person Name", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Mobile", "field_name": "Contact Person Mobile", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Tel.", "field_name": "Contact Person Telephone 1", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Tel.", "field_name": "Contact Person Telephone 2", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Position", "field_name": "Contact Person Position", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Fax", "field_name": "Contact Person Fax", "field_value": "", "optional": "no"},
                {"word_file_field_name": "e-mail", "field_name": "Contact Person Email", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Website", "field_name": "Contact Person Website", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Products/ Services", "field_name": "Products/ Services", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Desired Scope of Certification", "field_name": "Desired Scope of Certification", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Certification Scheme Applied", "field_name": "Certification Scheme Applied", "field_value": "", "optional": "no"}, //radio
                {"word_file_field_name": "Certification Scheme Applied: Accreditation", "field_name": "Certification Scheme Applied: Accreditation", "field_value": "", "optional": "no"}, //radio
                {"word_file_field_name": "Certified in any other management systems", "field_name": "Certified in any other management systems", "field_value": "", "optional": "no"}, //radio
                {"word_file_field_name": "Certified in any other management systems Details", "field_name": "Certified in any other management systems Details", "field_value": "", "optional": "yes"}, //radio
                {"word_file_field_name": "Applicable legal and statutory requirements ", "field_name": "Applicable legal and statutory requirements", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Compliance", "field_name": "Compliance", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Language ", "field_name": "Language", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Safety conditions, if applicable ", "field_name": "Safety conditions, if applicable", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Outsourced processes", "field_name": "Outsourced processes", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Description of Technical resources e.g machinery", "field_name": "Description of Technical resources e.g machinery", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Consultancy  Organization/ consultant ", "field_name": "Consultancy Organization/ consultant", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Consultancy  Organization/ consultant: Self Prepared", "field_name": "Consultancy Organization/ consultant: Self Prepared?", "field_value": "", "optional": "no"},
                {"word_file_field_name": "#Desired date of audit", "field_name": "Desired Date of Audit", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Total including contracted (give break-up as below): Main Site (above)", "field_name": "No. of Employees: Total including contracted (give breakup-as below): Main Site (above)", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Total including contracted (give break-up as below): Site 1", "field_name": "No. of Employees: Total including contracted (give breakup-as below): Site 1", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Total including contracted (give break-up as below): Site 2", "field_name": "No. of Employees: Total including contracted (give breakup-as below): Site 2", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Total including contracted (give break-up as below): Remarks", "field_name": "No. of Employees: Total including contracted (give breakup-as below): Remarks", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Part time: Main Site (above)", "field_name": "No. of Employees: Part time: Main Site (above)", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Part time: Site 1", "field_name": "No. of Employees: Part time: Site 1", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Part time: Site 2", "field_name": "No. of Employees: Part time: Site 2", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Part time: Remarks", "field_name": "No. of Employees: Part time: Remarks", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Production(Process wise break up is required): Main Site (above)", "field_name": "No. of Employees: Production (Process wise break up is required): Main Site (above)", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Production(Process wise break up is required): Site 1", "field_name": "No. of Employees: Production (Process wise break up is required): Site 1", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Production(Process wise break up is required): Site 2", "field_name": "No. of Employees: Production (Process wise break up is required): Site 2", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Production(Process wise break up is required): Remarks", "field_name": "No. of Employees: Production (Process wise break up is required): Remarks", "field_value": "", "optional": "no"},
                {"word_file_field_name": "QC+Purchase+Store : Main Site (above)", "field_name": "No. of Employees: QC + Purchase + Store: Main Site (above)", "field_value": "", "optional": "no"},
                {"word_file_field_name": "QC+Purchase+Store : Site 1", "field_name": "No. of Employees: QC + Purchase + Store: Site 1", "field_value": "", "optional": "no"},
                {"word_file_field_name": "QC+Purchase+Store : Site 2", "field_name": "No. of Employees: QC + Purchase + Store: Site 2", "field_value": "", "optional": "no"},
                {"word_file_field_name": "QC+Purchase+Store : Remarks", "field_name": "No. of Employees: QC + Purchase + Store: Remarks", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Marketing : Main Site (above)", "field_name": "No. of Employees: Marketing: Main Site (above)", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Marketing : Site 1", "field_name": "No. of Employees: Marketing: Site 1", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Marketing : Site 2", "field_name": "No. of Employees: Marketing: Site 2", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Marketing : Remarks", "field_name": "No. of Employees: Marketing: Remarks", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Others: Main Site (above)", "field_name": "No. of Employees: Others: Main Site (above)", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Others: Site 1", "field_name": "No. of Employees: Others: Site 1", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Others: Site 2", "field_name": "No. of Employees: Others: Site 2", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Others: Remarks", "field_name": "No. of Employees: Others: Remarks", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Number of persons in repetitive/identical process: Main Site (above)", "field_name": "No. of Employees: Number of persons in repetitive/identical process: Main Site (above)", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Number of persons in repetitive/identical process: Site 1", "field_name": "No. of Employees: Number of persons in repetitive/identical process: Site 1", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Number of persons in repetitive/identical process: Site 2", "field_name": "No. of Employees: Number of persons in repetitive/identical process: Site 2", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Number of persons in repetitive/identical process: Remarks", "field_name": "No. of Employees: Number of persons in repetitive/identical process: Remarks", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Number of Shifts (Details of employees working in each shift) ", "field_name": "No. of Employees: Number of Shifts (Details of employees working in each shift)", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Name of CB                (attach certificate)", "field_name": "Name of CB", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Latest Audit         (attach report)", "field_name": "Latest Audit", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Reason for Transfer", "field_name": "Reason for Transfer", "field_value": "", "optional": "no"},
                {"word_file_field_name": "certificate under suspension or under threat of suspension", "field_name": "Certificate under suspension or under threat of suspension", "field_value": "", "optional": "no"},
                {"word_file_field_name": "certificate under suspension or under threat of suspension Reason", "field_name": "Certificate under suspension or under threat of suspension: Reason if yes", "field_value": "", "optional": "yes"},
                {"word_file_field_name": "1 Site address:", "field_name": "Site 1 address", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Activity(ies):", "field_name": "Site 1 Activity (ies)", "field_value": "", "optional": "no"},
                {"word_file_field_name": "2 Site address:", "field_name": "Site 2 address", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Activity(ies):", "field_name": "Site 2 Activity (ies)", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Number of process lines", "field_name": "ISO 22000/ HACCP specific: Number of process lines", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Number of HACCP Studies", "field_name": "ISO 22000/ HACCP specific: Number of HACCP Studies", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Any statutory/ regulatory requirements related to the operations", "field_name": "ISO 14001 specific: Any statutory/ regulatory requirements related to the operations", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Any license/ approvals received related to environmental issues", "field_name": "ISO 14001 specific: Any license/ approvals received related to environmental issues", "field_value": "", "optional": "no"},
                {"word_file_field_name": "What type of emissions your organisation does", "field_name": "ISO 14001 specific: What type of emissions your organisation does", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Do you measure any emissions, if yes define", "field_name": "ISO 14001 specific: Do you measure any emissions, if yes define", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Did you had any environmental incident in the past, if yes detail ", "field_name": "ISO 14001 specific: Did you had any environmental incident in the past, if yes detail", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Other information", "field_name": "ISO 14001 specific: Other information", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Please detail the identification of key hazards  and OH &SMS risks associated with processes.", "field_name": "ISO 45001 specific: Please detail the identification of key hazards and OH &SMS risks associated with processes", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Detail the main hazardous materials used in the processes", "field_name": "ISO 45001 specific: Detail the main hazardous materials used in the processes", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Relevant applicable OH&SMS legal obligations ", "field_name": "ISO 45001 specific: Relevant applicable OH&SMS legal obligations", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Give the details on the annual energy Consumption in KW/Terra Joules (Eg:Electrical, Thermal, Fuel etc)", "field_name": "ISO 50001 specific: Give the details on the annual energy Consumption in KW/Terra Joules (Eg:Electrical, Thermal, Fuel etc)", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Give the details of the number of energy sources and name them(Eg: Electicity, Natural gas etc)", "field_name": "ISO 50001 specific: Give the details of the number of energy sources and name them(Eg: Electicity, Natural gas etc)", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Details on the significant energy uses", "field_name": "ISO 50001 specific: Details on the significant energy uses", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Give the details on the number of EnMs effective Personnel (Top Managemen/MR/Energy management Team, Person responsible for major changes affecting energy performance, effectiveness of the Enms, developing, implementing or maintaining energy performance improvements  significant energy uses). ", "field_name": "ISO 50001 specific: Give the details on the number of EnMs effective Personnel (Top Managemen/MR/Energy management Team, Person responsible for major changes affecting energy performance, effectiveness of the Enms, developing, implementing or maintaining energy performance improvements  significant energy uses)", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Have you prepared your Statement of Applicability?", "field_name": "ISO 27001 specific: Have you prepared your Statement of Applicability?", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Please identify the level and type of risk associated with your information systems", "field_name": "ISO 27001 specific: Please identify the level and type of risk associated with your information systems", "field_value": "", "optional": "no"},
                {"word_file_field_name": "LEVEL OF INTEGRATION FOR COMBINED AUDITS:", "field_name": "ANNEXURE: LEVEL OF INTEGRATION FOR COMBINED AUDITS", "field_value": "", "optional": "no"},
                {"word_file_field_name": "1.Integrated documentation set, including work instructions", "field_name": "ANNEXURE: 1. Integrated documentation set, including work instructions", "field_value": "", "optional": "no"},
                {"word_file_field_name": "2.Management Reviews that consider the overall business strategy and plan", "field_name": "ANNEXURE: 2. Management Reviews that consider the overall business strategy and plan", "field_value": "", "optional": "no"},
                {"word_file_field_name": "3.Integrated approach to internal audits", "field_name": "ANNEXURE: 3. Integrated approach to internal audits", "field_value": "", "optional": "no"},
                {"word_file_field_name": "4.Integrated approach to policy and objectives", "field_name": "ANNEXURE: 4. Integrated approach to policy and objectives", "field_value": "", "optional": "no"},
                {"word_file_field_name": "5.Integrated approach to systems processes", "field_name": "ANNEXURE: 5. Integrated approach to systems processes", "field_value": "", "optional": "no"},
                {"word_file_field_name": "6.Integrated approach to improvement mechanisms", "field_name": "ANNEXURE: 6. Integrated approach to improvement mechanisms", "field_value": "", "optional": "no"},
                {"word_file_field_name": "7.Integrated management support and responsibilities", "field_name": "ANNEXURE: 7. Integrated management support and responsibilities", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Attachments", "field_name": "Attachments", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Name of the Authorized Representative", "field_name": "Name of the Authorized Representative", "field_value": "", "optional": "no"},
                {"word_file_field_name": "Date", "field_name": "Date", "field_value": "", "optional": "no"},
                {"no_of_filled_entries": 0}
            ];
            const http = require('https'); // or 'https' for https:// URLs
            const fs = require('fs');
            const file = fs.createWriteStream("application_form11.docx");
            //const request = http.get('https://cwac.in/init_certification_client_application/1645433053973/forms/application_form.docx', function(response) {
            const request = http.get(req.body['url'], function(response) {
                response.pipe(file);
                // after download completed close filestream
                file.on("finish", () => {
                    file.close();
                    //res.send('ok')
                    (async () => {
                        try {
                            //await runExample();
                        const java = new JavaCaller({
                            classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                            mainClass: 'wordfilemgtnodejs.WordFileMgtNodeJS',// Main class to call, must be available from CLASSPATH,
                            rootPath: __dirname,
                        });
                        const { status, stdout, stderr } = await java.run();
                        var dataString = String(stdout)
                        //dataString = dataString.replaceAll('\n', '')
                        dataString = dataString.replaceAll('\r\n', '')
                        //dataString = dataString.replaceAll('\r', '')
                        dataString = dataString.replaceAll('\t\t', '-->')
                        var dataString = dataString.split("**************************")
                        //console.log(dataString);
                        for (var intIdx = 0; intIdx < dataString.length; intIdx++) {
                            var keyValuePair = dataString[intIdx];
                            console.log(dataString[intIdx])
                            var blnFillingTableRow = false;
                            //console.log('------------------------------')
                            var key = keyValuePair.split("-->")[0]
                            var value = keyValuePair.split("-->")[1]
                            if (key == 'Name/ Designation of Top Management') 
                            {
                                for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                    if (application_form_field_values[intIIdx]['word_file_field_name'] == ' Mobile no.') 
                                    {
                                        application_form_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[3];
                                        if (keyValuePair.split("-->")[3].trim() != "") noOfFilledEntries++;
                                    }
                            }
                            if (key == 'Name of CB                (attach certificate)') 
                            {
                                for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                    if (application_form_field_values[intIIdx]['word_file_field_name'] == 'Latest Audit         (attach report)')
                                    {
                                        application_form_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[3];
                                        if (keyValuePair.split("-->")[3].trim() != "") noOfFilledEntries++;
                                    }
                            }
                            if (key == 'Applicable legal and statutory requirements ') 
                            {
                                for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                    if (application_form_field_values[intIIdx]['word_file_field_name'] == 'Compliance') 
                                    {
                                        application_form_field_values[intIIdx]['field_value'] = dataString[intIdx + 1].split("-->")[2];
                                        if (dataString[intIdx + 1].split("-->")[2].trim() != "") noOfFilledEntries++;
                                    }
                            }
                            if (key == '') {
                                if (value == 'Name ') key = 'Name '
                                else if (value == 'Mobile') 
                                {
                                    key = 'Mobile'
                                    for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                        if (application_form_field_values[intIIdx]['word_file_field_name'] == 'Fax') 
                                        {
                                            application_form_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[4];
                                            if (keyValuePair.split("-->")[4].trim() != "") noOfFilledEntries++;
                                        }
                                }
                                else if (value == 'Tel.') 
                                {
                                    key = 'Tel.'
                                    if (dataString[intIdx - 2].split("-->")[0] == 'Contact Person')
                                    {
                                        for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                            if (application_form_field_values[intIIdx]['word_file_field_name'] == 'e-mail') 
                                            {
                                                application_form_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[4];
                                                if (keyValuePair.split("-->")[4].trim() != "") noOfFilledEntries++;
                                            }
                                        for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                            if (application_form_field_values[intIIdx]['word_file_field_name'] == key) 
                                            {
                                                application_form_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[2];
                                                if (keyValuePair.split("-->")[2].trim() != "") noOfFilledEntries++;
                                            }
                                    }
                                    else if (dataString[intIdx - 3].split("-->")[0] == 'Contact Person')
                                    {
                                        for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                            if (application_form_field_values[intIIdx]['word_file_field_name'] == 'Website') 
                                            {
                                                application_form_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[4];
                                                if (keyValuePair.split("-->")[4].trim() != "") noOfFilledEntries++;
                                            }
                                        for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                            if (application_form_field_values[intIIdx]['field_name'] == "Contact Person Telephone 2") 
                                            {
                                                application_form_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[2];
                                                if (keyValuePair.split("-->")[2].trim() != "") noOfFilledEntries++;
                                            }
                                    }
                                }
                                if (value)
                                {
                                    if (value.includes("Accreditation: "))
                                    {
                                        key = "Certification Scheme Applied: Accreditation";
                                        value = value.replace("Accreditation: ", "");
                                    }
                                    else value = keyValuePair.split("-->")[2]
                                }
                                else value = keyValuePair.split("-->")[2]
                            }
                            //else if (key == 'Contact Person') {
                            if (key == 'Contact Person') 
                            {
                                key = 'Name '
                                value = keyValuePair.split("-->")[2]
                                for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                    if (application_form_field_values[intIIdx]['word_file_field_name'] == 'Position') 
                                    {
                                        application_form_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[4];
                                        if (keyValuePair.split("-->")[4].trim() != "") noOfFilledEntries++;
                                    }
                            }
                            if (key == 'Activity(ies):' || key == 'Activity (ies):')
                            {
                                if (dataString[intIdx - 1].split("-->")[0] == '1 Site address:')
                                {
                                    for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                        if (application_form_field_values[intIIdx]['field_name'] == "Site 1 Activity (ies)") 
                                        {
                                            application_form_field_values[intIIdx]['field_value'] = value;
                                            if (value.trim() != "") noOfFilledEntries++;
                                        }
                                }
                                if (dataString[intIdx - 1].split("-->")[0] == '2 Site address:')
                                {
                                    for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                        if (application_form_field_values[intIIdx]['field_name'] == "Site 2 Activity (ies)") 
                                        {
                                            application_form_field_values[intIIdx]['field_value'] = value;
                                            if (value.trim() != "") noOfFilledEntries++;
                                        }
                                }
                            }
                            if (keyValuePair.split("-->").length == 1 && (keyValuePair.includes("[_yes_]") || keyValuePair.includes("[_no_]"))) {
                                var optionsArray = keyValuePair.split("[_");
                                //console.log("optionsArray___", optionsArray);
                                for (var intIIdx = 0; intIIdx < optionsArray.length; intIIdx++)
                                {
                                    if (optionsArray[intIIdx].split("_]")[0] == 'yes')
                                    {
                                        key = "Certification Type"
                                        value = "[[Radio]]" + optionsArray[intIIdx].split("_]")[1].trim() + ";;"
                                        break;
                                    }
                                }
                            }
                            if (value)
                            {
                                if (value.includes("[_yes_]") || value.includes("[_no_]"))
                                {
                                    var optionsArray = value.split("[_");
                                    var newValue = "";
                                    var intYesCount = 0;
                                    if (key != 'Attachments')
                                    {
                                        if (key == "Organisation Type")
                                        {
                                            if (value.split("[_yes_] ")[1].split(" ")[0] == "Other")
                                            {
                                                for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                                    if (application_form_field_values[intIIdx]['word_file_field_name'] == "Organisation Type: Others") 
                                                    {
                                                        application_form_field_values[intIIdx]['field_value'] = value.split("[_yes_] Other")[1].trim();
                                                        if (value.split("[_yes_] Other")[1].trim() != "") noOfFilledEntries++;
                                                    }
                                            }
                                        }
                                        if (key == "certificate under suspension or under threat of suspension")
                                        {
                                            if (value.includes("[_yes_] Yes"))
                                            {
                                                for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                                    if (application_form_field_values[intIIdx]['word_file_field_name'] == "certificate under suspension or under threat of suspension Reason") 
                                                    {
                                                        application_form_field_values[intIIdx]['field_value'] = value.split("state reason: ")[1].split("[_no_]")[0].trim();
                                                        if (value.split("state reason: ")[1].split("[_no_]")[0].trim() != "") noOfFilledEntries++;
                                                    }
                                            }
                                        }
                                        if (key == "Certified in any other management systems")
                                        {
                                            if (value.includes("[_yes_] Yes"))
                                            {
                                                for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                                    if (application_form_field_values[intIIdx]['word_file_field_name'] == "Certified in any other management systems Details") 
                                                    {
                                                        application_form_field_values[intIIdx]['field_value'] = value.split("[_yes_] Yes: ")[1].split("[_no_]")[0].trim();
                                                        if (value.split("[_yes_] Yes: ")[1].split("[_no_]")[0].trim() != "") noOfFilledEntries++;
                                                    }
                                            }
                                        }
                                        //console.log("__key__" + key + ", ___value___", value)
                                        for (var intIIdx = 0; intIIdx < optionsArray.length; intIIdx++)
                                        {
                                            if (optionsArray[intIIdx].split("_]")[0] == 'yes')
                                            {
                                                intYesCount++;
                                                newValue = newValue + optionsArray[intIIdx].split("_]")[1].replace("__________", "")
                                                newValue = newValue.replace("____________________________________", "")
                                                newValue = newValue.replace("__________________________", "")
                                                newValue = newValue.replace(",  state reason______________________", "").trim() + ";;"
                                            }
                                        }
                                        if (intYesCount == 1) value = "[[Radio]]" + newValue;
                                        else value = "[[Check]]" + newValue;
                                    }

                                    else
                                    {
                                        newValue = "";
                                        for (var intIIdx = 0; intIIdx < optionsArray.length; intIIdx++)
                                        {
                                            if (optionsArray[intIIdx].split("_]")[0].trim() == 'yes')
                                            {
                                                intYesCount++;
                                                newValue = newValue + optionsArray[intIIdx].split("_]")[1].trim() + ";;"
                                                break;
                                            }
                                        }
                                        for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                        {
                                            if (application_form_field_values[intIIdx]['word_file_field_name'] == "Attachments") 
                                            {
                                                application_form_field_values[intIIdx]['field_value'] = newValue;
                                                if (newValue.trim() != "") noOfFilledEntries++;
                                                optionsArray = dataString[intIdx + 1].split("-->")[1].split("[_");
                                                for (var intIIIdx = 0; intIIIdx < optionsArray.length; intIIIdx++)
                                                {
                                                    if (optionsArray[intIIIdx].split("_]")[0].trim() == 'yes')
                                                    {
                                                        intYesCount++;
                                                        newValue = newValue + optionsArray[intIIIdx].split("_]")[1].trim() + ";;"
                                                        break;
                                                    }
                                                }
                                                optionsArray = dataString[intIdx + 2].split("-->")[1].split("[_");
                                                for (var intIIIdx = 0; intIIIdx < optionsArray.length; intIIIdx++)
                                                {
                                                    if (optionsArray[intIIIdx].split("_]")[0].trim() == 'yes')
                                                    {
                                                        //console.log('optionsArray[intIIIdx].split("_]")[1].trim();', optionsArray[intIIIdx].split("_]")[1].trim());
                                                        intYesCount++;
                                                        newValue = newValue + optionsArray[intIIIdx].split("_]")[1].trim() + ";;"
                                                        break;
                                                    }
                                                }
                                                optionsArray = dataString[intIdx + 3].split("-->")[1].split("[_");
                                                for (var intIIIdx = 0; intIIIdx < optionsArray.length; intIIIdx++)
                                                {
                                                    if (optionsArray[intIIIdx].split("_]")[0].trim() == 'yes')
                                                    {
                                                        console.log('optionsArray[intIIIdx].split("_]")[1].trim();', optionsArray[intIIIdx].split("_]")[1].trim());
                                                        intYesCount++;
                                                        newValue = newValue + optionsArray[intIIIdx].split("_]")[1].trim() + ";;"
                                                        break;
                                                    }
                                                }
                                                application_form_field_values[intIIdx]['field_value'] = "[[Check]]" + newValue;
                                                if (("[[Check]]" + newValue).trim() != "") noOfFilledEntries++;
                                            }
                                        }
                                    }
                                }
                            }
                            if (keyValuePair.split("-->").length > 2 && keyValuePair.split("-->")[2].includes('[_yes_]'))
                            {
                                //key = "Consultancy  Organization/ consultant: Self Prepared"
                                //value = "[[Radio]][Yes];;"
                                for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                    if (application_form_field_values[intIIdx]['word_file_field_name'] == "Consultancy  Organization/ consultant: Self Prepared") 
                                    {
                                        application_form_field_values[intIIdx]['field_value'] = "[[Check]]Yes;;";
                                        noOfFilledEntries++;
                                    }
                            }
                            if (keyValuePair.split("-->").length > 2 && keyValuePair.split("-->")[2].includes('[_no_]'))
                            {
                                //key = "Consultancy  Organization/ consultant: Self Prepared"
                                //value = "[[Radio]][No];;"
                                for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                    if (application_form_field_values[intIIdx]['word_file_field_name'] == "Consultancy  Organization/ consultant: Self Prepared") 
                                    {
                                        application_form_field_values[intIIdx]['field_value'] = "[[Radio]]No;;";
                                        noOfFilledEntries++;
                                    }
                            }
                            if (key == "Total including contracted (give break-up as below)"
                            || key == "Part time"
                            || key == "Production(Process wise break up is required)"
                            || key == "QC+Purchase+Store "
                            || key == "Marketing "
                            || key == "Others"
                            || key == "Number of persons in repetitive/identical process"
                            || key == "Number of Shifts (Details of employees working in each shift) ")
                            {
                                blnFillingTableRow = true;
                                if (key != "Number of Shifts (Details of employees working in each shift) ")
                                {
                                    for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                        if (application_form_field_values[intIIdx]['word_file_field_name'] == key + ": Main Site (above)") 
                                        {
                                            application_form_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[1].trim();
                                            if (keyValuePair.split("-->")[1].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                        if (application_form_field_values[intIIdx]['word_file_field_name'] == key + ": Site 1") 
                                        {
                                            application_form_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[2].trim();
                                            if (keyValuePair.split("-->")[2].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                        if (application_form_field_values[intIIdx]['word_file_field_name'] == key + ": Site 2") 
                                        {
                                            application_form_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[3].trim();
                                            if (keyValuePair.split("-->")[3].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                        if (application_form_field_values[intIIdx]['word_file_field_name'] == key + ": Remarks") 
                                        {
                                            application_form_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[4].trim();
                                            if (keyValuePair.split("-->")[4].trim() != "") noOfFilledEntries++;
                                        }
                                }
                                else
                                {
                                    for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                        if (application_form_field_values[intIIdx]['word_file_field_name'] == key) 
                                        {
                                            application_form_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[1].trim();
                                            if (keyValuePair.split("-->")[1].trim() != "") noOfFilledEntries++;
                                        }
                                }
                            }
                            //if (keyValuePair.split("-->").length == 1 && (keyValuePair.split("-->")[0].includes("Date: ") || keyValuePair.split("-->")[0].includes("Name of the Authorized Representative: ")))
                            if (keyValuePair.split("-->")[0].includes("Date: ") || keyValuePair.split("-->")[0].includes("Name of the Authorized Representative: "))
                            {
                                value = keyValuePair.split("-->")[0].split(": ")[1].trim();
                                key = keyValuePair.split("-->")[0].split(": ")[0].trim();
                            }
                            if (keyValuePair.split("-->")[0].includes("Form")
                            || keyValuePair.split("-->")[0].includes("Issue No.")
                            || keyValuePair.split("-->")[0].includes("Rev no:")
                            || keyValuePair.split("-->")[0].includes("Rev date:"))
                            {
                                for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                    if (application_form_field_values[intIIdx]['word_file_field_name'] == "Form No.") 
                                    {
                                        application_form_field_values[intIIdx]['field_value'] = keyValuePair.split("Form")[1].split(", Issue No")[0].trim();
                                        if (keyValuePair.split("Form")[1].split(", Issue No")[0].trim() != "") noOfFilledEntries++;
                                    }
                                for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                    if (application_form_field_values[intIIdx]['word_file_field_name'] == "Issue No.") 
                                    {
                                        application_form_field_values[intIIdx]['field_value'] = keyValuePair.split("Issue No.")[1].split(", Rev no")[0].trim();
                                        if (keyValuePair.split("Issue No.")[1].split(", Rev no")[0].trim() != "") noOfFilledEntries++;
                                    }
                                for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                    if (application_form_field_values[intIIdx]['word_file_field_name'] == "Rev No.") 
                                    {
                                        application_form_field_values[intIIdx]['field_value'] = keyValuePair.split("Rev no:")[1].split(", Rev date")[0].trim();
                                        if (keyValuePair.split("Rev no:")[1].split(", Rev date")[0].trim() != "") noOfFilledEntries++;
                                    }
                                key = "Rev date";
                                value = keyValuePair.split("Rev date:")[1].split("-->")[0].trim();
                            }
                            if (key != 'Tel.' && key != 'Activity(ies):' && key != 'Activity (ies):' && key != "Attachments" && !blnFillingTableRow)
                            {
                                for (var intIIdx = 0; intIIdx < application_form_field_values.length; intIIdx++) 
                                    if (application_form_field_values[intIIdx]['word_file_field_name'] == key) 
                                    {
                                        application_form_field_values[intIIdx]['field_value'] = value.trim();
                                        if (value.trim() != "") noOfFilledEntries++;
                                    }
                            }
                        }
                        application_form_field_values[application_form_field_values.length - 1]['no_of_filled_entries'] = noOfFilledEntries;
                        console.log(application_form_field_values)
                        res.send({"application_form_field_values": application_form_field_values});
                        } catch (err) {
                            console.error("Unexpected error: " + err.message + "\n" + err.stack);
                            process.exitCode = 1;
                        }
                    })();
                });
            });
            }
            if (req.body['file_type'] == 'contract_review_form')
            {
                var contract_review_form_field_values = [
                    {"word_file_field_name": "Form", "field_name": "Form No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Rev no: ", "field_name": "Revision No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Rev date: ", "field_name": "Revision Date", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Application Date: ", "field_name": "Application Date", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Ref  No: ", "field_name": "Ref No", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Company Name:    ", "field_name": "Company Name", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Address              :", "field_name": "Address", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Site (if any):", "field_name": "Site (if any)", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "No. of Employees:", "field_name": "No. of Employees", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Scope: ", "field_name": "Scope", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Consultancy Organisation: ", "field_name": "Consultancy Organisation", "field_value": "", "optional": "no"},
                    {"word_file_field_name": " Are Documented informations available:", "field_name": "Are Documented informations available", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "NACE/EA Code/ Sectors : ", "field_name": "NACE/EA Code/ Sectors", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "ISO 9001: 1", "field_name": "ISO 9001 (Part 1)", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "ISO 9001: 2", "field_name": "ISO 9001 (Part 2)", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "ISO 22000: 1", "field_name": "ISO 22000 (Part 1)", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "ISO 22000: 2", "field_name": "ISO 22000 (Part 2)", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "First certification", "field_name": "First certification", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Reason of the transfer from another CB: ", "field_name": "Reason of the transfer from another CB", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "QMS, NCRs reviewed  and audit approved: ", "field_name": "QMS, NCRs reviewed and audit approved", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Reason for QMS, NCRs reviewed and audit, not approved", "field_name": "Reason for QMS, NCRs reviewed and audit, not approved", "field_value": "", "optional": "yes"},
                    {"word_file_field_name": "Is our CB scope covered by accreditation:", "field_name": "Is our CB scope covered by accreditation?", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Verified that there is no threat to impartiality:", "field_name": "Verified that there is no threat to impartiality?", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Verified that persons qualified in the NACE Code is/ are available:  ", "field_name": "Verified that persons qualified in the NACE Code is/ are available?", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Review of changes in Client Organisation(Surveillance/ Recertification):", "field_name": "Review of changes in Client Organisation (Surveillance/ Recertification)", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Temporary Sites audit", "field_name": "Consideration for calculating man-day: 1. Temporary Sites audit", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Outsourced Process", "field_name": "Consideration for calculating man-day: 2. Outsourced Process", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Shift audit", "field_name": "Consideration for calculating man-day: 3. Shift audit", "field_value": "", "optional": "no"},

                    {"word_file_field_name": "      If yes: Number of Shifts", "field_name": "Number of Shifts", "field_value": "", "optional": "yes"},
                    {"word_file_field_name": "                  No of Persons in each shift                 ", "field_name": "No of Persons in each shift", "field_value": "", "optional": "yes"},
                    {"word_file_field_name": "                  Activities carried out in each shift", "field_name": "Activities carried out in each shift", "field_value": "", "optional": "yes"},
                    {"word_file_field_name": "Plan to cover the shift", "field_name": "Plan to cover the shifts", "field_value": "", "optional": "yes"},

                    {"word_file_field_name": "Seasonal Production time", "field_name": "Consideration for calculating man-day: 4. Seasonal Production time", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Contract/ Temporary employees", "field_name": "Consideration for calculating man-day: 5. Contract/ Temporary employees", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Language", "field_name": "Consideration for calculating man-day: 6. Language", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Safety", "field_name": "Consideration for calculating man-day: 7. Safety", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Manday calculation: ", "field_name": "Manday calculation", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Stage I Required", "field_name": "Audit Manday: Required: Stage I", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Stage I Apply", "field_name": "Audit Manday: Apply: Stage I", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Stage II Required", "field_name": "Audit Manday: Required: Stage II", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Stage II Apply", "field_name": "Audit Manday: Apply: Stage II", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Surveillance Required", "field_name": "Audit Manday: Required: Surveillance", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Surveillance Apply", "field_name": "Audit Manday: Apply: Surveillance", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Justification for reduction/increase: ", "field_name": "Justification for reduction/increase", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Based on the above our CB  has competence to carry out the certification activity and audit can be undertaken :", "field_name": "Based on the above our CB has competence to carry out the certification activity and audit can be undertaken?", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Application status : Accepted/ Rejected: ", "field_name": "Application status : Accepted/ Rejected", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Remarks: ", "field_name": "Remarks", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Date: ", "field_name": "Date", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Enms Table", "field_name": "Table: To Calculate the Effective Enms Personnel", "field_value": "", "optional": "no"},
                    {"no_of_filled_entries": 0}
                ];
                const http = require('https'); // or 'https' for https:// URLs
                const fs = require('fs');
                const file = fs.createWriteStream("application_form11.docx");
                //const request = http.get('https://cwac.in/init_certification_client_application/1645433053973/forms/application_form.docx', function(response) {
                const request = http.get(req.body['url'], function(response) {
                    response.pipe(file);

                    // after download completed close filestream
                    file.on("finish", () => {
                        file.close();
                        //res.send('ok')
                        (async () => {
                            try {
                                //await runExample();
                                const java = new JavaCaller({
                                classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                                mainClass: 'wordfilemgtnodejs.WordFileMgtNodeJS',// Main class to call, must be available from CLASSPATH,
                                rootPath: __dirname,
                            });
                            const { status, stdout, stderr } = await java.run();
                            //console.log(dataString)
                            var dataString = String(stdout)
                            //dataString = dataString.replaceAll('\n', '')
                            dataString = dataString.replaceAll('\r\n', '')
                            //dataString = dataString.replaceAll('\r', '')
                            dataString = dataString.replaceAll('\t\t', '-->')
                            var dataString = dataString.split("**************************")
                            console.log(dataString);
                            for (var intIdx = 0; intIdx < dataString.length; intIdx++) {
                                var keyValuePair = dataString[intIdx];
                                var key = keyValuePair.split("-->")[0]
                                var value = keyValuePair.split("-->")[1]
                                if (key.includes("Application Date: ")) {
                                    key = "Ref  No: "
                                    for (var intIIdx = 0; intIIdx < contract_review_form_field_values.length; intIIdx++) 
                                        if (contract_review_form_field_values[intIIdx]['word_file_field_name'] == key) 
                                        {
                                            contract_review_form_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[2].split(":")[1].trim();
                                            if (keyValuePair.split("-->")[2].split(":")[1].trim() != "") noOfFilledEntries++;
                                        }
                                    key = 'Application Date: '
                                    value = keyValuePair.split("-->")[0].split(":")[1].trim()
                                }
                                if (key == 'Company Name:    ' 
                                || key == 'Address              :' 
                                || key == 'No. of Employees:' 
                                || key == 'Site (if any):')
                                    value = keyValuePair.split("-->")[2];
                                if (keyValuePair.includes("Reason of the transfer from another CB: "))
                                {
                                    key = 'Reason of the transfer from another CB: '
                                    value = keyValuePair.split('QMS, NCRs reviewed  and audit approved')[0].split(':')[1].trim()
                                }
                                if (key == 'AUDIT MANDAY')
                                {
                                    key = 'Manday calculation: '
                                    value = keyValuePair.split("-->")[4].split(":")[1].trim()
                                }
                                if (key == 'Stage I ')
                                {
                                    key = 'Stage I Apply'
                                    for (var intIIdx = 0; intIIdx < contract_review_form_field_values.length; intIIdx++) 
                                        if (contract_review_form_field_values[intIIdx]['word_file_field_name'] == key) 
                                        {
                                            contract_review_form_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[3];
                                            if (keyValuePair.split("-->")[3].trim() != "") noOfFilledEntries++;
                                        }
                                    key = 'Justification for reduction/increase: '
                                    for (var intIIdx = 0; intIIdx < contract_review_form_field_values.length; intIIdx++) 
                                        if (contract_review_form_field_values[intIIdx]['word_file_field_name'] == key) 
                                        {
                                            contract_review_form_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[4].split(":")[1].trim();
                                            if (keyValuePair.split("-->")[4].split(":")[1].trim() != "") noOfFilledEntries++;
                                        }
                                    key = 'Stage I Required'
                                    value = keyValuePair.split("-->")[2];
                                }
                                if (key == 'Stage II ')
                                {
                                    key = 'Stage II Apply'
                                    for (var intIIdx = 0; intIIdx < contract_review_form_field_values.length; intIIdx++) 
                                        if (contract_review_form_field_values[intIIdx]['word_file_field_name'] == key) 
                                        {
                                            contract_review_form_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[3];
                                            if (keyValuePair.split("-->")[3].trim() != "") noOfFilledEntries++;
                                        }
                                    key = 'Stage II Required'
                                    value = keyValuePair.split("-->")[2];
                                }
                                if (key == 'Surveillance')
                                {
                                    key = 'Surveillance Apply'
                                    for (var intIIdx = 0; intIIdx < contract_review_form_field_values.length; intIIdx++) 
                                        if (contract_review_form_field_values[intIIdx]['word_file_field_name'] == key) 
                                        {
                                            contract_review_form_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[3];
                                            if (keyValuePair.split("-->")[3].trim() != "") noOfFilledEntries++;
                                        }
                                    key = 'Surveillance Required'
                                    value = keyValuePair.split("-->")[2];
                                }
                                if (key.includes('Application status : Accepted/ Rejected: '))
                                {
                                    key = 'Application status : Accepted/ Rejected: '
                                    value = keyValuePair.split("-->")[0].split(":")[2].trim();
                                }
                                if (key.includes('Remarks: '))
                                {
                                    key = 'Remarks: ';
                                    value = keyValuePair.split("-->")[0].split(":")[1].trim()
                                    //console.log(value)
                                }
                                if (key == 'Reviewer sign:')
                                {
                                    key = 'Date: ';
                                    value = value.split(":")[1].trim()
                                }
                                if (keyValuePair.split("-->")[0].includes("Form")
                                || keyValuePair.split("-->")[0].includes("Rev no:")
                                || keyValuePair.split("-->")[0].includes("Rev date:"))
                                {
                                    for (var intIIdx = 0; intIIdx < contract_review_form_field_values.length; intIIdx++) 
                                        if (contract_review_form_field_values[intIIdx]['word_file_field_name'] == "Form") 
                                        {
                                            contract_review_form_field_values[intIIdx]['field_value'] = keyValuePair.split("Form")[1].split(" , Rev no")[0].trim();
                                            if (keyValuePair.split("Form")[1].split(" , Rev no")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < contract_review_form_field_values.length; intIIdx++) 
                                        if (contract_review_form_field_values[intIIdx]['word_file_field_name'] == "Rev no: ") 
                                        {
                                            contract_review_form_field_values[intIIdx]['field_value'] = keyValuePair.split("Rev no: ")[1].split(", Rev date:")[0].trim();
                                            if (keyValuePair.split("Rev no: ")[1].split(", Rev date:")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    key = "Rev date: ";
                                    value = keyValuePair.split("Rev date: ")[1].split("-->")[0].trim();
                                }
                                var optionsArray;
                                var optionsArrayBelow;
                                var newValue;
                                var intYesCount = 0;
                                if (value)
                                {
                                    if (value.includes("[_yes_]") || value.includes("[_no_]"))
                                    {
                                        if (key == "ISO 9001" || key == "ISO 22000")
                                        {
                                            optionsArray = value.split("[_");
                                            optionsArrayBelow = dataString[intIdx + 1].split("-->")[1].split("[_");
                                            newValue = "";
                                            intYesCount = 0;
                                            if (optionsArray[1].split("_]")[0] == "yes")
                                            {
                                                newValue = newValue + optionsArray[1].split("_]")[1]  + ";;";
                                                intYesCount++;
                                            }
                                            for (var intIIdx = 0; intIIdx < optionsArrayBelow.length; intIIdx++)
                                            {
                                                if (optionsArrayBelow[intIIdx].split("_]")[0] == 'yes')
                                                {
                                                    newValue = newValue + optionsArrayBelow[intIIdx].split("_]")[1].replace(",", "").trim() + ";;";
                                                    intYesCount++;
                                                }
                                            }
                                            if (intYesCount == 1) value = "[[Radio]]" + newValue;
			                                else value = "[[Check]]" + newValue;
                                            console.log(value);
                                            for (var intIIdx = 0; intIIdx < contract_review_form_field_values.length; intIIdx++) 
                                            {
                                                if (contract_review_form_field_values[intIIdx]['word_file_field_name'] == key + ": 1") 
                                                {
                                                    contract_review_form_field_values[intIIdx]['field_value'] = value;
                                                    if (value.trim() != "") noOfFilledEntries++;
                                                }
                                            }
                                            optionsArray = dataString[intIdx].split("-->")[2].split("[_");
                                            optionsArrayBelow = dataString[intIdx + 1].split("-->")[2].split("[_");
                                            newValue = "";
                                            intYesCount = 0;
                                            if (optionsArray[1].split("_]")[0] == "yes")
                                            {
                                                newValue = newValue + optionsArray[1].split("_]")[1]  + ";;";
                                                intYesCount++;
                                            }
                                            for (var intIIdx = 0; intIIdx < optionsArrayBelow.length; intIIdx++)
                                            {
                                                if (optionsArrayBelow[intIIdx].split("_]")[0] == 'yes')
                                                {
                                                    newValue = newValue + optionsArrayBelow[intIIdx].split("_]")[1].replace(",", "").trim() + ";;";
                                                    intYesCount++;
                                                }
                                            }
                                            if (intYesCount == 1) value = "[[Radio]]" + newValue;
			                                else value = "[[Check]]" + newValue;
                                            console.log(value);
                                            for (var intIIdx = 0; intIIdx < contract_review_form_field_values.length; intIIdx++) 
                                            {
                                                if (contract_review_form_field_values[intIIdx]['word_file_field_name'] == key + ": 2") 
                                                {
                                                    contract_review_form_field_values[intIIdx]['field_value'] = value;
                                                    if (value.trim() != "") noOfFilledEntries++;
                                                }
                                            }
                                        }
                                        else if (key == "First certification")
                                        {
                                            optionsArray = value.split("[_");
                                            //optionsArrayBelow = dataString[intIdx + 1].split("-->")[1].split("[_");
                                            newValue = "";
                                            intYesCount = 0;
                                            for (var intIIdx = 1; intIIdx < dataString[intIdx].split("-->").length; intIIdx++)
                                            {
                                                optionsArray = dataString[intIdx].split("-->")[intIIdx].split("[_");
                                                for (var intIIIdx = 0; intIIIdx < optionsArray.length; intIIIdx++)
                                                {
                                                    if (optionsArray[intIIIdx].split("_]")[0] == 'yes')
                                                    {
                                                        newValue = newValue + optionsArray[intIIIdx].split("_]")[1].replace(",  ", "").replace(", ", "").trim() + ";;";
                                                        intYesCount++;
                                                    }
                                                }
                                            }
                                            //if (intYesCount == 1) value = "[[Radio]]" + newValue;
			                                //else value = "[[Check]]" + newValue;
                                            value = "[[Check]]" + newValue;
                                            //console.log(value);
                                        }
                                    }
                                }
                                if (key)
                                {
                                    if (key.includes("[_yes_]") || key.includes("[_no_]"))
                                    {
                                        newValue = ""
                                        value = key;
                                        key = "QMS, NCRs reviewed  and audit approved: ";
                                        optionsArray = value.split("[_");
                                        for (var intIIdx = 0; intIIdx < optionsArray.length; intIIdx++)
                                        {
                                            if (optionsArray[intIIdx].split("_]")[0] == 'yes')
                                            {
                                                if (optionsArray[intIIdx].split("_]")[1] == " Y/ ")
                                                    newValue = newValue + "Yes" + ";;";
                                                else if (optionsArray[intIIdx].split("_]")[1].includes("N  if  N give reason :"))
                                                {
                                                    newValue = newValue + "No" + ";;";
                                                    for (var intIIIdx = 0; intIIIdx < contract_review_form_field_values.length; intIIIdx++) 
                                                        if (contract_review_form_field_values[intIIIdx]['word_file_field_name'] == "Reason for QMS, NCRs reviewed and audit, not approved") 
                                                        {
                                                            contract_review_form_field_values[intIIIdx]['field_value'] = optionsArray[intIIdx].split("_]")[1].split("N give reason :")[1].trim();
                                                            if (optionsArray[intIIdx].split("_]")[1].split("N give reason :")[1].trim() != "") noOfFilledEntries++;
                                                        }
                                                }
                                                intYesCount++;
                                            }
                                        }
                                        if (intYesCount == 1) value = "[[Radio]]" + newValue;
                                        else value = "[[Check]]" + newValue;
                                        console.log(value);
                                    }
                                }
                                if (key == "Is our CB scope covered by accreditation:")
                                {
                                    if (dataString[intIdx + 2].split("-->")[1].includes("[_yes_]"))
                                        value = "[[Radio]]Yes;;";
                                    else if (dataString[intIdx + 3].split("-->")[1].includes("[_yes_]"))
                                        value = "[[Radio]]No;;";
                                }
                                if (key == "Verified that there is no threat to impartiality:" 
                                || key == "Verified that persons qualified in the NACE Code is/ are available:  "
                                || key == "Based on the above our CB  has competence to carry out the certification activity and audit can be undertaken :")
                                {
                                    if (dataString[intIdx + 2].split("-->")[1].includes("[_yes_]"))
                                        value = "[[Radio]]Yes;;";
                                    else if (dataString[intIdx + 2].split("-->")[3].includes("[_yes_]"))
                                        value = "[[Radio]]No;;";
                                }
                                if (key == "Temporary Sites audit" || key == "Outsourced Process" 
                                || key == "Shift audit" || key == "Seasonal Production time"
                                || key == "Contract/ Temporary employees")
                                {
                                    newValue = ""
                                    optionsArray = value.split("[_");
                                    intYesCount = 0;
                                    for (var intIIdx = 0; intIIdx < optionsArray.length; intIIdx++)
                                    {
                                        if (optionsArray[intIIdx].split("_]")[0] == 'yes')
                                        {
                                            newValue = newValue + optionsArray[intIIdx].split("_]")[1].trim() + ";;";
                                            intYesCount++;
                                        }
                                    }
                                    if (intYesCount == 1) value = "[[Radio]]" + newValue;
                                    else value = "[[Check]]" + newValue;
                                    console.log(value);
                                }
                                if (key.includes("Review of changes in Client Organisation(Surveillance/ Recertification):"))
                                {
                                    value = key.split("Review of changes in Client Organisation(Surveillance/ Recertification):")[1].trim();
                                    key = "Review of changes in Client Organisation(Surveillance/ Recertification):";
                                }
                                if (key.includes("Plan to cover the shift"))
                                {
                                    key = "Plan to cover the shift"
                                    optionsArray = value.split("[_");
                                    for (var intIIIdx = 0; intIIIdx < optionsArray.length; intIIIdx++)
                                    {
                                        if (optionsArray[intIIIdx].split("_]")[0] == 'yes')
                                        {
                                            //newValue = newValue + optionsArray[intIIIdx].split("_]")[1].replace(",  ", "").replace(", ", "").trim() + ";;";
                                            if (optionsArray[intIIIdx].split("_]")[1].includes("Initial/"))
                                                value = "[[Radio]]Initial Certification;;";
                                            else if (optionsArray[intIIIdx].split("_]")[1].includes("Surveillance 1/"))
                                                value = "[[Radio]]Surveillance Audit 1;;";
                                            else if (optionsArray[intIIIdx].split("_]")[1].includes("Surveillance 2"))
                                                value = "[[Radio]]Surveillance Audit 2;;";
                                        }
                                    }
                                    console.log(value);
                                }
                                if (keyValuePair.split("-->").length == 4)
                                {
                                    if (keyValuePair.split("-->")[0] == "S.NO"
                                    && keyValuePair.split("-->")[1] == "SECTION"
                                    && keyValuePair.split("-->")[2] == "NUMBER"
                                    && keyValuePair.split("-->")[3] == "DEPARTMENT/PROCESS")
                                    {
                                        var intIIdx = intIdx + 1;
                                        value = [];
                                        while (dataString[intIIdx].split("-->")[0] != "Annexure (Enms Standard)")
                                        {
                                            dataString[intIIdx].split("-->")
                                            value.push({
                                                "SNO": dataString[intIIdx].split("-->")[0],
                                                "SECTION": dataString[intIIdx].split("-->")[1],
                                                "NUMBER": dataString[intIIdx].split("-->")[2],
                                                "DEPARTMENT/PROCESS": dataString[intIIdx].split("-->")[3],
                                            })
                                            intIIdx++;
                                        }
                                        key = "Enms Table"
                                    }
                                }
                                for (var intIIdx = 0; intIIdx < contract_review_form_field_values.length; intIIdx++) 
                                    if (contract_review_form_field_values[intIIdx]['word_file_field_name'] == key) 
                                    {
                                        contract_review_form_field_values[intIIdx]['field_value'] = value;
                                        if ((value + "").trim() != "") noOfFilledEntries++;
                                    }
                            }
                            contract_review_form_field_values[contract_review_form_field_values.length - 1]['no_of_filled_entries'] = noOfFilledEntries;
                            console.log(contract_review_form_field_values)
                            urlExists(req.body['prev_url'], function(err, oExists) {
                                if (oExists)
                                {
                                    if (req.body['file_type'] == 'contract_review_form')
                                    {
                                        const oHttp = require('https'); // or 'https' for https:// URLs
                                        const oFs = require('fs');
                                        const oFile = oFs.createWriteStream("application_form11.docx");
                                        //const request = http.get('https://cwac.in/init_certification_client_application/1645433053973/forms/application_form.docx', function(response) {
                                        const request = oHttp.get(req.body['prev_url'], function(response) {
                                            response.pipe(oFile);
                                            // after download completed close filestream
                                            oFile.on("finish", async () => {
                                                oFile.close();
                                                const oJava = new JavaCaller({
                                                    classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                                                    mainClass: 'wordfilemgtnodejs.WordFileMgtNodeJS',// Main class to call, must be available from CLASSPATH,
                                                    rootPath: __dirname,
                                                });
                                                const { status, stdout, stderr } = await oJava.run();
                                                var oDataString = String(stdout)
                                                oDataString = oDataString.replaceAll('\n', '')
                                                oDataString = oDataString.replaceAll('\r', '')
                                                oDataString = oDataString.replaceAll('\t\t', '-->')
                                                var oDataString = oDataString.split("**************************")
                                                for (var oIntIdx = 0; oIntIdx < oDataString.length; oIntIdx++) {
                                                    var keyValuePair = oDataString[oIntIdx];
                                                    if (keyValuePair.split("-->")[0].includes("Date: "))
                                                    {
                                                        prevDate = keyValuePair.split("-->")[0].split(": ")[1].trim();
                                                        console.log({"contract_review_form_field_values": contract_review_form_field_values, "app_date": prevDate})
                                                        res.send({"contract_review_form_field_values": contract_review_form_field_values, "app_date": prevDate})
                                                    }
                                                }
                                            });
                                        });
                                    }
                                }
                                else 
                                {
                                    res.send({"contract_review_form_field_values": contract_review_form_field_values, "app_date": prevDate});
                                }
                            });
                            //res.send({"contract_review_form_field_values": contract_review_form_field_values})
                            } catch (err) {
                                console.error("Unexpected error: " + err.message + "\n" + err.stack);
                                process.exitCode = 1;
                            }
                        })();
                    });
                });
            }
            if (req.body['file_type'] == "stage1_audit_report")
            {
                var stage1_audit_report_field_values = [
                    {"word_file_field_name": "Form", "field_name": "Form No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Rev no: ", "field_name": "Revision No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Rev date: ", "field_name": "Revision Date", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Organisation", "field_name": "Organisation", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Scope of Certification", "field_name": "Scope of Certification", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "NACE/EA", "field_name": "NACE/EA", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Auditor", "field_name": "Auditor", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Date of Audit", "field_name": "Date of Audit", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "1. Documentation including quality manual and procedures were reviewed against the applicable standard. The result of documentation review is included in attachment.", "field_name": "1. Documentation including quality manual and procedures were reviewed against the applicable standard. The result of documentation review is included in attachment", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "2.Evaluation of  clients location and site-specific conditions and to undertake discussions with the client's personnel to determine the preparedness for the stage 2 audit", "field_name": "2. Evaluation of clients location and site-specific conditions and to undertake discussions with the client's personnel to determine the preparedness for the stage 2 audit", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "3. Review of client's status and understanding regarding requirements of the standard, in particular with respect to the identification of key performance or significant aspects, processes, objectives and operation of the management system", "field_name": "3. Review of client's status and understanding regarding requirements of the standard, in particular with respect to the identification of key performance or significant aspects, processes, objectives and operation of the management system", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "4. Collected necessary information regarding the scope of the management system, processes and location(s) of the client, and related statutory and regulatory aspects and compliance (e.g. quality, environmental, legal aspects of the client's operation, associated risks, etc.);Mention the justification for any clause exclusion.", "field_name": "4. Collected necessary information regarding the scope of the management system, processes and location(s) of the client, and related statutory and regulatory aspects and compliance (e.g. quality, environmental, legal aspects of the client's operation, associated risks, etc.);Mention the justification for any clause exclusion", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "5.Evaluation of Internal audits and Management Review", "field_name": "5. Evaluation of Internal audits and Management Review", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "6. Review the allocation of resources for stage 2 audit and agreed with the client on the details of the stage 2 audit", "field_name": "6. Review the allocation of resources for stage 2 audit and agreed with the client on the details of the stage 2 audit", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "7. Collected necessary information for planning stage 2 audit ", "field_name": "7. Collected necessary information for planning stage 2 audit", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "8. Verified the information provided in the application including number of employees", "field_name": "8. Verified the information provided in the application including number of employees", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Audit Findings", "field_name": "Audit Findings", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Areas of Concern", "field_name": "Areas of Concern", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Based on the above evaluation, it is recommended-", "field_name": "Based on the above evaluation, it is recommended -:", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Reviewed by our CB office", "field_name": "Reviewed by our CB office", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Remarks", "field_name": "Remarks", "field_value": "", "optional": "no"},
                    {"no_of_filled_entries": 0}
                ];
                const http = require('https'); // or 'https' for https:// URLs
                const fs = require('fs');
            
                const file = fs.createWriteStream("application_form11.docx");
                //const request = http.get('https://cwac.in/init_certification_client_application/1645433053973/forms/application_form.docx', function(response) {
                const request = http.get(req.body['url'], function(response) {
                    response.pipe(file);
            
                    // after download completed close filestream
                    file.on("finish", () => {
                        file.close();
                        //res.send('ok')
                        (async () => {
                            try {
                                //await runExample();
                                const java = new JavaCaller({
                                classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                                mainClass: 'wordfilemgtnodejs.WordFileMgtNodeJS',// Main class to call, must be available from CLASSPATH,
                                rootPath: __dirname,
                            });
                            const { status, stdout, stderr } = await java.run();
                            var dataString = String(stdout)
                            //dataString = dataString.replaceAll('\n', '')
                            dataString = dataString.replaceAll('\r\n', '')
                            //dataString = dataString.replaceAll('\r', '')
                            dataString = dataString.replaceAll('\t\t', '-->')
                            var dataString = dataString.split("**************************")
                            console.log(dataString);
                            for (var intIdx = 0; intIdx < dataString.length; intIdx++) {
                                var keyValuePair = dataString[intIdx];
                                var key = keyValuePair.split("-->")[0]
                                var value = keyValuePair.split("-->")[1]
                                if (keyValuePair.split("-->").length == 1)
                                {
                                    //console.log(keyValuePair.split("-->"));
                                    if (keyValuePair.includes(":"))
                                    {
                                        //console.log("key, ", key);
                                        
                                        key = keyValuePair.split(":")[0]
                                        value = keyValuePair.split(":")[1];
                                        
                                    }
                                    else if (keyValuePair.includes(";"))
                                    {
                                        key = keyValuePair.split(";")[0]
                                        value = keyValuePair.split(";")[1];
                                    }
                                }
                                if (value)
                                {
                                    value = value.replace("\t", "")
                                    if (value.includes("Remarks") && key.includes("Reviewed by our CB office"))
                                    {
                                        var oldValue = value;
                                        key = "Remarks"
                                        value = keyValuePair.split(":")[2]
                                        for (var intIIdx = 0; intIIdx < stage1_audit_report_field_values.length; intIIdx++) 
                                            if (stage1_audit_report_field_values[intIIdx]['word_file_field_name'] == key)
                                            {
                                                stage1_audit_report_field_values[intIIdx]['field_value'] = value;
                                                if (value.trim() != "") noOfFilledEntries++;
                                            }
                                        key = 'Reviewed by our CB office'
                                        value = oldValue.replace("Remarks", "")
                                    }
                                }
                                if (keyValuePair.split("-->").length == 4)
                                {
                                    var newKey = keyValuePair.split("-->")[2];
                                    for (var intIIdx = 0; intIIdx < stage1_audit_report_field_values.length; intIIdx++) 
                                            if (stage1_audit_report_field_values[intIIdx]['word_file_field_name'] == newKey)
                                            {
                                                stage1_audit_report_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[3];
                                                if (keyValuePair.split("-->")[3].trim() != "") noOfFilledEntries++;
                                            }
                                }
                                if (key.includes("1. Documentation including quality manual and procedures were reviewed against the applicable standard."))
                                {
                                    key = "1. Documentation including quality manual and procedures were reviewed against the applicable standard. The result of documentation review is included in attachment.";
                                    value = keyValuePair.split(".")[3].trim()
                                }
                                if (keyValuePair.includes("4. Collected necessary information regarding the scope of the management system, processes and location(s) of the client, and related statutory and regulatory aspects and compliance (e.g. quality, environmental, legal aspects of the client's operation, associated risks, etc.);Mention the justification for any clause exclusion."))
                                {
                                    key = "4. Collected necessary information regarding the scope of the management system, processes and location(s) of the client, and related statutory and regulatory aspects and compliance (e.g. quality, environmental, legal aspects of the client's operation, associated risks, etc.);Mention the justification for any clause exclusion."
                                    value = keyValuePair.split(";")[1].split(".")[1].trim()
                                }
                                if (keyValuePair.includes("6. Review the allocation of resources for stage 2 audit and agreed with the client on the details of the stage 2 audit"))
                                {
                                    key = "6. Review the allocation of resources for stage 2 audit and agreed with the client on the details of the stage 2 audit"
                                    value = keyValuePair.split(":")[1].trim()
                                    //console.log("value: ", value)
                                }
                                if (keyValuePair.split("-->")[0].includes("Form")
                                || keyValuePair.split("-->")[0].includes("Rev no:")
                                || keyValuePair.split("-->")[0].includes("Rev date:"))
                                {
                                    for (var intIIdx = 0; intIIdx < stage1_audit_report_field_values.length; intIIdx++) 
                                        if (stage1_audit_report_field_values[intIIdx]['word_file_field_name'] == "Form") 
                                        {
                                            stage1_audit_report_field_values[intIIdx]['field_value'] = keyValuePair.split("Form")[1].split(", Rev no:")[0].trim();
                                            if (keyValuePair.split("Form")[1].split(", Rev no:")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < stage1_audit_report_field_values.length; intIIdx++) 
                                        if (stage1_audit_report_field_values[intIIdx]['word_file_field_name'] == "Rev no: ") 
                                        {
                                            stage1_audit_report_field_values[intIIdx]['field_value'] = keyValuePair.split("Rev no:")[1].split(", Rev date:")[0].trim();
                                            if (keyValuePair.split("Rev no:")[1].split(", Rev date:")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    key = "Rev date: ";
                                    value = keyValuePair.split(", Rev date:")[1].split("-->")[0].trim();
                                }
                                if (key == "Based on the above evaluation, it is recommended-")
                                {
                                    var newValue = "";
                                    if (dataString[intIdx + 1].includes("[_yes_]"))
                                        newValue = newValue + "System is in place for Stage 2 audit.;;"
                                    if (dataString[intIdx + 2].includes("[_yes_]"))
                                        newValue = newValue + "Will be ready for Stage 2 after actions on the areas of concern identified.;;"
                                    if (dataString[intIdx + 3].includes("[_yes_]"))
                                        newValue = newValue + "Stage 1 needs to be repeated;;"
                                    value = "[[Check]]" + newValue;
                                }
                                for (var intIIdx = 0; intIIdx < stage1_audit_report_field_values.length; intIIdx++) 
                                    if (stage1_audit_report_field_values[intIIdx]['word_file_field_name'] == key)
                                    {
                                        stage1_audit_report_field_values[intIIdx]['field_value'] = value;
                                        if (value.trim() != "") noOfFilledEntries++;
                                    }
                            }
                            stage1_audit_report_field_values[stage1_audit_report_field_values.length - 1]['no_of_filled_entries'] = noOfFilledEntries;
                            //console.log(stage1_audit_report_field_values)
                            //res.send({"stage1_audit_report_field_values": stage1_audit_report_field_values, "app_date": prevDate})
                            urlExists(req.body['prev_url'], function(err, oExists) {
                                if (oExists)
                                {
                                    const oHttp = require('https'); // or 'https' for https:// URLs
                                    const oFs = require('fs');
                                    const oFile = oFs.createWriteStream("application_form11.docx");
                                    //const request = http.get('https://cwac.in/init_certification_client_application/1645433053973/forms/application_form.docx', function(response) {
                                    const request = oHttp.get(req.body['prev_url'], function(response) {
                                        response.pipe(oFile);
                                        // after download completed close filestream
                                        oFile.on("finish", async () => {
                                            oFile.close();
                                            const oJava = new JavaCaller({
                                                classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                                                mainClass: 'wordfilemgtnodejs.WordFileMgtNodeJS',// Main class to call, must be available from CLASSPATH,
                                                rootPath: __dirname,
                                            });
                                            const { status, stdout, stderr } = await oJava.run();
                                            var oDataString = String(stdout)
                                            oDataString = oDataString.replaceAll('\n', '')
                                            oDataString = oDataString.replaceAll('\r', '')
                                            oDataString = oDataString.replaceAll('\t\t', '-->')
                                            var oDataString = oDataString.split("**************************")
                                            for (var oIntIdx = 0; oIntIdx < oDataString.length; oIntIdx++) {
                                                var keyValuePair = oDataString[oIntIdx];
                                                if (keyValuePair.split("-->")[0] == 'Reviewer sign:')
                                                {
                                                    prevDate = keyValuePair.split("-->")[1].split(":")[1].trim()
                                                    console.log({"stage1_audit_report_field_values": stage1_audit_report_field_values, "app_date": prevDate})
                                                    res.send({"stage1_audit_report_field_values": stage1_audit_report_field_values, "app_date": prevDate})
                                                }
                                            }
                                        });
                                    });
                                }
                                else 
                                {
                                    res.send({"stage1_audit_report_field_values": stage1_audit_report_field_values, "app_date": prevDate});
                                }
                            });
                            } catch (err) {
                                console.error("Unexpected error: " + err.message + "\n" + err.stack);
                                process.exitCode = 1;
                            }
                        })();
                    });
                });
            }
            if (req.body['file_type'] == "certification_audit_report")
            {
                var certification_audit_report_field_values = [
                    {"word_file_field_name": "Form", "field_name": "Form No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Rev no: ", "field_name": "Revision No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Rev date: ", "field_name": "Revision Date", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Organization Name", "field_name": "Organization Name", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Address :(Give Physical location, State and country)Site (if any)", "field_name": "Address :(Give Physical location, State and country). Site (if any)", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Management Representative", "field_name": "Management Representative", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Contract Number", "field_name": "Contract Number", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Accreditation Body", "field_name": "Accreditation Body", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Standard", "field_name": "Standard", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Type of Audit", "field_name": "Type of Audit", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Audit Objective", "field_name": "Audit Objective", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Scope of Certification", "field_name": "Scope of Certification", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "NACE/EA CodeANZSIC Code", "field_name": "NACE/EA Code, ANZSIC Code", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Audit Team ", "field_name": "Audit Team", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Audit Dates: Stage 1", "field_name": "Audit Dates: Stage 1", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Audit Dates: Stage 2", "field_name": "Audit Dates: Stage 2", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Mandays", "field_name": "Mandays", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Any deviation from the audit plan and their reason", "field_name": "Any deviation from the audit plan and their reason", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Any significant Issues impacting on theaudit programme", "field_name": "Any significant Issues impacting on the audit programme", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Applicable Statutory /Regulatory Requirement(s),Aspects and their associated impacts, emergency preparedness response and itsinclusion in relevant functional areas", "field_name": "Applicable Statutory Regulatory Requirement(s), Aspects and their associated impacts, emergency preparedness response and its inclusion in relevant functional areas", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Introduction about the Organisation", "field_name": "Introduction about the Organisation", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Capability of the Management system to meet applicable requirements and expected outcomes.", "field_name": "Capability of the Management system to meet applicable requirements and expected outcomes.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Effectiveness of Internal audit and MRM ", "field_name": "Effectiveness of Internal audit and MRM", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Any unresolved issues", "field_name": "Any unresolved issues", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Significant Changes if any, since last audit(Applicable for surveillanceand re-certification audit)", "field_name": "Significant Changes if any, since last audit (Applicable for surveillance and re-certification audit)", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Review of actions takenfrom non-conformities identified during the previous audit", "field_name": "Review of actions taken from non-conformities identified during the previous audit", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Treatment of complaints", "field_name": "Treatment of complaints", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Progress of planned activities aimed at continual improvement.", "field_name": "Progress of planned activities aimed at continual improvement", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Use of Quality Marks and Certification documents", "field_name": "Use of Quality Marks and Certification documents", "field_value": "", "optional": "no"},
                    //{"word_file_field_name": "Effectiveness and improvement of management system, certified management systems contributions to the achievement of organization�s policy &objectives", "field_name": "Effectiveness and improvement of management system, certified management systems contributions to the achievement of organization’s policy &objectives", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Effectiveness and improvement of management system,", "field_name": "Effectiveness and improvement of management system, certified management systems contributions to the achievement of organization’s policy &objectives", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Effectiveness of ICT in achieving the the audit objectives", "field_name": "Effectiveness of ICT in achieving the the audit objectives", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Adequacy of documentationstructure for the  scope ofcertification", "field_name": "Adequacy of documentation structure for the scope of certification", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Opportunities for Improvement", "field_name": "Opportunities for Improvement", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Non-Conformities raised Major:00        Minor: 01 ", "field_name": "Non-Conformities raised (Major:00, Minor: 01)", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "1. Based on the analysis of all the information and audit evidences gathered during the Stage 1 and stage 2 audits, the audit team concluded to -:", "field_name": "1. Based on the analysis of all the information and audit evidences gathered during the Stage 1 and stage 2 audits, the audit team concluded to -:", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "2.Follow up actions (if any):", "field_name": "2. Follow up actions (if any)", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Date:", "field_name": "Date: ", "field_value": "", "optional": "no"},
                    {"no_of_filled_entries": 0}
                ];
                const http = require('https'); // or 'https' for https:// URLs
                const fs = require('fs');
            
                const file = fs.createWriteStream("application_form11.docx");
                //const request = http.get('https://cwac.in/init_certification_client_application/1645433053973/forms/application_form.docx', function(response) {
                const request = http.get(req.body['url'], function(response) {
                    response.pipe(file);
            
                    // after download completed close filestream
                    file.on("finish", () => {
                        file.close();
                        //res.send('ok')
                        (async () => {
                            try {
                                //await runExample();
                                const java = new JavaCaller({
                                classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                                mainClass: 'wordfilemgtnodejs.WordFileMgtNodeJS',// Main class to call, must be available from CLASSPATH,
                                rootPath: __dirname,
                            });
                            const { status, stdout, stderr } = await java.run();
                            //console.log(dataString)
                            var dataString = String(stdout)
                            //dataString = dataString.replaceAll('\n', '')
                            dataString = dataString.replaceAll('\r\n', '')
                            //dataString = dataString.replaceAll('\r', '')
                            dataString = dataString.replaceAll('\t\t', '-->')
                            var dataString = dataString.split("**************************")
                            console.log(dataString);
                            for (var intIdx = 0; intIdx < dataString.length; intIdx++) {
                                var keyValuePair = dataString[intIdx];
                                var key = keyValuePair.split("-->")[0]
                                var value = keyValuePair.split("-->")[1]
                                if (key == 'Audit Dates')
                                {
                                    for (var intIIdx = 0; intIIdx < certification_audit_report_field_values.length; intIIdx++) 
                                        if (certification_audit_report_field_values[intIIdx]['word_file_field_name'] == 'Audit Dates: Stage 1')
                                        {
                                            certification_audit_report_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[2];
                                            if (keyValuePair.split("-->")[2].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < certification_audit_report_field_values.length; intIIdx++) 
                                        if (certification_audit_report_field_values[intIIdx]['word_file_field_name'] == keyValuePair.split("-->")[3])
                                        {
                                            certification_audit_report_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[4]; 
                                            if (keyValuePair.split("-->")[4].trim() != "") noOfFilledEntries++;
                                        }
                                }
                                if (key == '')
                                {
                                    if (value == 'Stage 2')
                                    {
                                        for (var intIIdx = 0; intIIdx < certification_audit_report_field_values.length; intIIdx++) 
                                            if (certification_audit_report_field_values[intIIdx]['word_file_field_name'] == 'Audit Dates: Stage 2')
                                            {
                                                certification_audit_report_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[2];
                                                if (keyValuePair.split("-->")[2].trim() != "") noOfFilledEntries++;
                                            }
                                    }
                                }
                                if (keyValuePair.split("-->")[0].includes("Form")
                                || keyValuePair.split("-->")[0].includes("Rev no:")
                                || keyValuePair.split("-->")[0].includes("Rev date:"))
                                {
                                    for (var intIIdx = 0; intIIdx < certification_audit_report_field_values.length; intIIdx++) 
                                        if (certification_audit_report_field_values[intIIdx]['word_file_field_name'] == "Form") 
                                        {
                                            certification_audit_report_field_values[intIIdx]['field_value'] = keyValuePair.split("Form")[1].split("Rev no:")[0].trim();
                                            if (keyValuePair.split("Form")[1].split("Rev no:")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < certification_audit_report_field_values.length; intIIdx++) 
                                        if (certification_audit_report_field_values[intIIdx]['word_file_field_name'] == "Rev no: ") 
                                        {
                                            certification_audit_report_field_values[intIIdx]['field_value'] = keyValuePair.split("Rev no:")[1].split(", Rev date:")[0].trim();
                                            if (keyValuePair.split("Rev no:")[1].split(", Rev date:")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    key = "Rev date: ";
                                    value = keyValuePair.split(", Rev date:")[1].split("-->")[0].trim();
                                }
                                if (key == "Adequacy of documentationstructure for the  scope ofcertification")
                                {
                                    if (value.includes("[_yes_]")) value = "Acceptable";
                                    else value = "Not acceptable"
                                    value = "[[Radio]]" + value + ";;";
                                }
                                if (key.includes("Considering this assessment is a sampling exercise, each of the nonconformities and observations should be reviewed in"))
                                {
                                    key = "1. Based on the analysis of all the information and audit evidences gathered during the Stage 1 and stage 2 audits, the audit team concluded to -:";
                                    var newValue = "";
                                    if (dataString[intIdx + 1].includes("[_yes_]"))
                                        newValue = newValue + "Recommend for Certification;;";
                                    if (dataString[intIdx + 2].includes("[_yes_]"))
                                        newValue = newValue + "Recommend to Hold till Major NC’s are effectively closed;;";
                                    if (dataString[intIdx + 3].includes("[_yes_]"))
                                        newValue = newValue + "Conduct a full audit again as the system is not yet ready;;";
                                    value = "[[Check]]" + newValue
                                }
                                if (key.includes("2.Follow up actions (if any):"))
                                {
                                    value = key.split("2.Follow up actions (if any):")[1].trim();
                                    key = "2.Follow up actions (if any):"
                                }
                                if (keyValuePair.split("-->")[0].includes("Effectiveness and improvement of management system,")) key = "Effectiveness and improvement of management system,";
                                //Effectiveness and improvement of management system,
                                if (key.includes("(Signature)/ date:"))
                                {
                                    value = key.split("(Signature)/ date: ")[1].split(", Lead Auditor")[0].trim();
                                    key = "Date:";
                                }
                                for (var intIIdx = 0; intIIdx < certification_audit_report_field_values.length; intIIdx++) 
                                    if (certification_audit_report_field_values[intIIdx]['word_file_field_name'] == key)
                                    {
                                        certification_audit_report_field_values[intIIdx]['field_value'] = value;
                                        if (value.trim() != "") noOfFilledEntries++;
                                    }
                            }
                            certification_audit_report_field_values[certification_audit_report_field_values.length - 1]['no_of_filled_entries'] = noOfFilledEntries;
                            //res.send({"certification_audit_report_field_values": certification_audit_report_field_values})
                            urlExists(req.body['prev_url'], function(err, oExists) {
                                if (oExists)
                                {
                                    const oHttp = require('https'); // or 'https' for https:// URLs
                                    const oFs = require('fs');
                                    const oFile = oFs.createWriteStream("application_form11.docx");
                                    //const request = http.get('https://cwac.in/init_certification_client_application/1645433053973/forms/application_form.docx', function(response) {
                                    const request = oHttp.get(req.body['prev_url'], function(response) {
                                        response.pipe(oFile);
                                        // after download completed close filestream
                                        oFile.on("finish", async () => {
                                            oFile.close();
                                            const oJava = new JavaCaller({
                                                classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                                                mainClass: 'wordfilemgtnodejs.WordFileMgtNodeJS',// Main class to call, must be available from CLASSPATH,
                                                rootPath: __dirname,
                                            });
                                            const { status, stdout, stderr } = await oJava.run();
                                            var oDataString = String(stdout)
                                            oDataString = oDataString.replaceAll('\n', '')
                                            oDataString = oDataString.replaceAll('\r', '')
                                            oDataString = oDataString.replaceAll('\t\t', '-->')
                                            var oDataString = oDataString.split("**************************")
                                            for (var oIntIdx = 0; oIntIdx < oDataString.length; oIntIdx++) {
                                                var keyValuePair = oDataString[oIntIdx];
                                                if (keyValuePair.split("-->").length == 4 && keyValuePair.split("-->")[0] == "Auditor")
                                                {
                                                    prevDate = keyValuePair.split("-->")[3].trim();
                                                    console.log({"certification_audit_report_field_values": certification_audit_report_field_values, "app_date": prevDate})
                                                    res.send({"certification_audit_report_field_values": certification_audit_report_field_values, "app_date": prevDate})
                                                }
                                            }
                                        });
                                    });
                                }
                                else 
                                {
                                    res.send({"certification_audit_report_field_values": certification_audit_report_field_values, "app_date": prevDate})
                                }
                            });
                            } catch (err) {
                                console.error("Unexpected error: " + err.message + "\n" + err.stack);
                                process.exitCode = 1;
                            }
                        })();
                    });
                });
            }
            if (req.body['file_type'] == "nc_report")
            {
                var nc_report_field_values = [
                    {"word_file_field_name": "Form No.", "field_name": "Form No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Issue No.", "field_name": "Issue No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Rev No.", "field_name": "Revision No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Rev date", "field_name": "Revision Date", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "NCR No", "field_name": "NCR No", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Organization Name & Location", "field_name": "Organization Name & Location", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Date ", "field_name": "Date", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Classified As:", "field_name": "Classified As:", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Process/ Area", "field_name": "Process/Area", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Standard", "field_name": "Standard", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Clause no. ", "field_name": "Clause no.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Non Conformity observed", "field_name": "Non Conformity observed", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Root cause", "field_name": "Root cause", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Correction and Corrective Actions taken or planned based on Root cause analysis", "field_name": "Correction and Corrective Actions taken or planned based on Root cause analysis", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Name / Title", "field_name": "Name / Title", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Review of Action Plan/ Taken submitted: Response Acceptable:", "field_name": "Review of Action Plan/ Taken submitted: Response Acceptable:", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Review of Action Plan/ Taken not submitted", "field_name": "Comment: ", "field_value": "", "optional": "yes"},
                    {"word_file_field_name": "Verified by", "field_name": "Verified by", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Date .", "field_name": "Date .", "field_value": "", "optional": "no"},
                    {"no_of_filled_entries": 0}
                ];
                const http = require('https'); // or 'https' for https:// URLs
                const fs = require('fs');
                const file = fs.createWriteStream("application_form11.docx");
                //const request = http.get('https://cwac.in/init_certification_client_application/1645433053973/forms/application_form.docx', function(response) {
                const request = http.get(req.body['url'], function(response) {
                    response.pipe(file);
                    // after download completed close filestream
                    file.on("finish", () => {
                        file.close();
                        //res.send('ok')
                        (async () => {
                            try {
                                //await runExample();
                                const java = new JavaCaller({
                                classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                                mainClass: 'wordfilemgtnodejs.WordFileMgtNodeJS',// Main class to call, must be available from CLASSPATH,
                                rootPath: __dirname,
                            });
                            const { status, stdout, stderr } = await java.run();
                            //console.log(dataString)
                            var dataString = String(stdout)
                            //dataString = dataString.replaceAll('\n', '')
                            dataString = dataString.replaceAll('\r\n', '')
                            //dataString = dataString.replaceAll('\r', '')
                            dataString = dataString.replaceAll('\t\t', '-->')
                            var dataString = dataString.split("**************************")
                            console.log(dataString);
                            for (var intIdx = 0; intIdx < dataString.length; intIdx++) {
                                var keyValuePair = dataString[intIdx];
                                //console.log('keyValuePair.split("-->"), ', keyValuePair.split("-->"));
                                var key = keyValuePair.split("-->")[0].trim()
                                var value = keyValuePair.split("-->")[1]
                                if (keyValuePair.split("-->").length > 1 && value.includes("NCR No"))
                                {
                                    key = value.split("Non-Conformity Report")[1].split(":")[0].trim()
                                    value = value.split("Non-Conformity Report")[1].split(":")[1].trim()
                                }
                                if (key == 'Organization Name & Location')
                                {
                                    for (var intIIdx = 0; intIIdx < nc_report_field_values.length; intIIdx++) 
                                        if (nc_report_field_values[intIIdx]['word_file_field_name'] == keyValuePair.split("-->")[2])
                                        {
                                            nc_report_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[3];    
                                            if (keyValuePair.split("-->")[3].trim() != "") noOfFilledEntries++;
                                        }
                                }
                                if (keyValuePair.split("-->").length > 3 && (keyValuePair.split("-->")[2] == "Process/ Area"))
                                {
                                    key = keyValuePair.split("-->")[2];
                                    value = keyValuePair.split("-->")[3];
                                }
                                if (key == 'Standard')
                                {
                                    for (var intIIdx = 0; intIIdx < nc_report_field_values.length; intIIdx++) 
                                        if (nc_report_field_values[intIIdx]['word_file_field_name'] == keyValuePair.split("-->")[2])
                                        {
                                            nc_report_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[3];    
                                            if (keyValuePair.split("-->")[3].trim() != "") noOfFilledEntries++;
                                        }
                                }
                                if (key.includes("Non Conformity observed"))
                                {
                                    key = keyValuePair.split("-->")[0].split(":")[0]
                                    value = keyValuePair.split("-->")[0].split(":")[1].split("Signature (Auditor)")[0]
                                }
                                if (key.includes("Root cause"))
                                {
                                    key = keyValuePair.split("-->")[0].split(":")[0]
                                    value = keyValuePair.split("-->")[0].split(":")[1]
                                    if (value) value = value.trim()
                                }
                                if (key.includes("Correction and Corrective Actions taken or planned based on Root cause analysis"))
                                {
                                    key = "Correction and Corrective Actions taken or planned based on Root cause analysis";
                                    value = keyValuePair.split(key)[1].split("Name /")[0]
                                    for (var intIIdx = 0; intIIdx < nc_report_field_values.length; intIIdx++) 
                                        if (nc_report_field_values[intIIdx]['word_file_field_name'] == "Correction and Corrective Actions taken or planned based on Root cause analysis")
                                        {
                                            nc_report_field_values[intIIdx]['field_value'] = keyValuePair.split(key)[1].split("Name /")[0];
                                            if (keyValuePair.split(key)[1].split("Name /")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    key = "Name / Title";
                                    value = keyValuePair.split(key)[1].split("(Signature)")[0].trim()
                                }
                                if (key.includes("Verified by"))
                                {
                                    for (var intIIdx = 0; intIIdx < nc_report_field_values.length; intIIdx++) 
                                        if (nc_report_field_values[intIIdx]['word_file_field_name'] == "Date .")
                                        {
                                            nc_report_field_values[intIIdx]['field_value'] = keyValuePair.split("Date : ")[1].split("Note: ")[0].trim();
                                            if (keyValuePair.split("Date : ")[1].split("Note: ")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    key = "Verified by"
                                    value = keyValuePair.split(key)[1].split("(Signature)")[0].trim()
                                }
                                if (keyValuePair.split("-->")[0].includes("Form")
                                || keyValuePair.split("-->")[0].includes("Issue No.")
                                || keyValuePair.split("-->")[0].includes("Rev no:")
                                || keyValuePair.split("-->")[0].includes("Rev date:"))
                                {
                                    for (var intIIdx = 0; intIIdx < nc_report_field_values.length; intIIdx++) 
                                        if (nc_report_field_values[intIIdx]['word_file_field_name'] == "Form No.") 
                                        {
                                            nc_report_field_values[intIIdx]['field_value'] = keyValuePair.split("Form")[1].split(", Issue No")[0].trim();
                                            if (keyValuePair.split("Form")[1].split(", Issue No")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < nc_report_field_values.length; intIIdx++) 
                                        if (nc_report_field_values[intIIdx]['word_file_field_name'] == "Issue No.") 
                                        {
                                            nc_report_field_values[intIIdx]['field_value'] = keyValuePair.split("Issue No.")[1].split(", Rev no")[0].trim();
                                            if (keyValuePair.split("Issue No.")[1].split(", Rev no")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < nc_report_field_values.length; intIIdx++) 
                                        if (nc_report_field_values[intIIdx]['word_file_field_name'] == "Rev No.") 
                                        {
                                            nc_report_field_values[intIIdx]['field_value'] = keyValuePair.split("Rev no:")[1].split(", Rev date")[0].trim();
                                            if (keyValuePair.split("Rev no:")[1].split(", Rev date")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    key = "Rev date";
                                    value = keyValuePair.split("Rev date:")[1].split("-->")[0].trim();
                                }
                                if (key == "Classified as:")
                                {
                                    if (dataString[intIdx].split("-->")[1].includes("[_yes_]"))
                                        value = "[[Radio]]Major;;";
                                    else if (dataString[intIdx].split("-->")[2].includes("[_yes_]"))
                                        value = "[[Radio]]Minor;;";
                                    for (var intIIdx = 0; intIIdx < nc_report_field_values.length; intIIdx++) 
                                        if (nc_report_field_values[intIIdx]['word_file_field_name'] == "Classified As:")
                                        {
                                            nc_report_field_values[intIIdx]['field_value'] = value;
                                            if (value.trim() != "") noOfFilledEntries++;
                                        }
                                    value = keyValuePair.split("-->")[4];
                                    key = "Process/ Area"
                                }
                                if (key == "Response Acceptable:")
                                {
                                    key = "Review of Action Plan/ Taken submitted: Response Acceptable:"
                                    if (dataString[intIdx].split("-->")[1].includes("[_yes_]"))
                                        value = "[[Radio]]Yes;;";
                                    else if (dataString[intIdx].split("-->")[2].includes("[_yes_]"))
                                    {
                                        for (var intIIdx = 0; intIIdx < nc_report_field_values.length; intIIdx++) 
                                            if (nc_report_field_values[intIIdx]['word_file_field_name'] == "Review of Action Plan/ Taken not submitted")
                                            {
                                                nc_report_field_values[intIIdx]['field_value'] = dataString[intIdx + 1].split("If No, Comment:")[1].split("Verified by")[0].trim();
                                                if (dataString[intIdx + 1].split("If No, Comment:")[1].split("Verified by")[0].trim() != "") noOfFilledEntries++;
                                            }
                                        value = "[[Radio]]No;;";
                                    }
                                }
                                for (var intIIdx = 0; intIIdx < nc_report_field_values.length; intIIdx++) 
                                    if (nc_report_field_values[intIIdx]['word_file_field_name'] == key)
                                    {
                                        nc_report_field_values[intIIdx]['field_value'] = value;
                                        if (value.trim() != "") noOfFilledEntries++;
                                    }
                            }
                            nc_report_field_values[nc_report_field_values.length - 1]['no_of_filled_entries'] = noOfFilledEntries;
                            //res.send({"nc_report_field_values": nc_report_field_values})
                            urlExists(req.body['prev_url'], function(err, oExists) {
                                if (oExists)
                                {
                                    const oHttp = require('https'); // or 'https' for https:// URLs
                                    const oFs = require('fs');
                                    const oFile = oFs.createWriteStream("application_form11.docx");
                                    //const request = http.get('https://cwac.in/init_certification_client_application/1645433053973/forms/application_form.docx', function(response) {
                                    const request = oHttp.get(req.body['prev_url'], function(response) {
                                        response.pipe(oFile);
                                        // after download completed close filestream
                                        oFile.on("finish", async () => {
                                            oFile.close();
                                            const oJava = new JavaCaller({
                                                classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                                                mainClass: 'wordfilemgtnodejs.WordFileMgtNodeJS',// Main class to call, must be available from CLASSPATH,
                                                rootPath: __dirname,
                                            });
                                            const { status, stdout, stderr } = await oJava.run();
                                            var oDataString = String(stdout)
                                            oDataString = oDataString.replaceAll('\n', '')
                                            oDataString = oDataString.replaceAll('\r', '')
                                            oDataString = oDataString.replaceAll('\t\t', '-->')
                                            var oDataString = oDataString.split("**************************")
                                            for (var oIntIdx = 0; oIntIdx < oDataString.length; oIntIdx++) {
                                                var keyValuePair = oDataString[oIntIdx];
                                                if (keyValuePair.split("-->")[0].includes("(Signature)/ date:"))
                                                {
                                                    prevDate = keyValuePair.split("-->")[0].split("(Signature)/ date: ")[1].split(", Lead Auditor")[0].trim();
                                                    console.log({"nc_report_field_values": nc_report_field_values, "app_date": prevDate})
                                                    res.send({"nc_report_field_values": nc_report_field_values, "app_date": prevDate})
                                                }
                                                // if (keyValuePair.split("-->").length == 4 && keyValuePair.split("-->")[0] == "Auditor")
                                                // {
                                                //     prevDate = keyValuePair.split("-->")[3].trim();
                                                //     console.log({"certification_audit_report_field_values": false, "app_date": prevDate})
                                                //     res.send({"certification_audit_report_field_values": false, "app_date": prevDate})
                                                // }
                                            }
                                        });
                                    });
                                }
                                else 
                                {
                                    res.send({"nc_report_field_values": nc_report_field_values, "app_date": prevDate})
                                }
                            });
                            } catch (err) {
                                console.error("Unexpected error: " + err.message + "\n" + err.stack);
                                process.exitCode = 1;
                            }
                        })();
                    });
                });
            }
            if (req.body['file_type'] == "customer_feedback_form")
            {
                var customer_feedback_form_field_values = [
                    {"word_file_field_name": "Form No.", "field_name": "Form No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Issue No.", "field_name": "Issue No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Rev No.", "field_name": "Revision No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Rev date", "field_name": "Revision Date", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "OUR CB REF NO", "field_name": "OUR CB REF NO", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "DATE", "field_name": "DATE", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "COMPANY NAME", "field_name": "COMPANY NAME", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "STANDARD: ISO 9001/ ISO 14001/ HACCP / OHSAS / OTHERS", "field_name": "STANDARD", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "STANDARD: OTHERS", "field_name": "Other Standard Name", "field_value": "", "optional": "yes"},
                    {"word_file_field_name": "APPEARANCE", "field_name": "1.	APPEARANCE: Grading: Write 1 for good, 2 for average, 3 for Poor", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "ATTITUDE", "field_name": "2.	ATTITUDE: Grading: Write 1 for good, 2 for average, 3 for Poor", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "TECHNICAL KNOWLEDGE", "field_name": "3.	TECHNICAL KNOWLEDGE: Grading: Write 1 for good, 2 for average, 3 for Poor", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "COMMUNICATION SKILLS", "field_name": "4.	COMMUNICATION SKILLS: Grading: Write 1 for good, 2 for average, 3 for Poor", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "CONVERSANT WITH STANDARD", "field_name": "5.	CONVERSANT WITH STANDARD: Grading: Write 1 for good, 2 for average, 3 for Poor", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "WOULD YOU RECOMMEND THIS AUDITOR FOR FURTHER ASSESSMENT WORK?", "field_name": "WOULD YOU RECOMMEND THIS AUDITOR FOR FURTHER ASSESSMENT WORK?", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Comments for No", "field_name": "Comments for No", "field_value": "", "optional": "yes"},
                    {"word_file_field_name": "OTHER COMMENTS", "field_name": "OTHER COMMENTS", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "DATE BOTTOM", "field_name": "DATE .", "field_value": "", "optional": "no"},
                    {"no_of_filled_entries": 0}
                ];
                const http = require('https'); // or 'https' for https:// URLs
                const fs = require('fs');
            
                const file = fs.createWriteStream("application_form11.docx");
                //const request = http.get('https://cwac.in/init_certification_client_application/1645433053973/forms/application_form.docx', function(response) {
                const request = http.get(req.body['url'], function(response) {
                    response.pipe(file);
            
                    // after download completed close filestream
                    file.on("finish", () => {
                        file.close();
                        //res.send('ok')
                        (async () => {
                            try {
                                //await runExample();
                                const java = new JavaCaller({
                                classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                                mainClass: 'wordfilemgtnodejs.WordFileMgtNodeJS',// Main class to call, must be available from CLASSPATH,
                                rootPath: __dirname,
                            });
                            const { status, stdout, stderr } = await java.run();
                            var dataString = String(stdout)
                            //dataString = dataString.replaceAll('\n', '')
                            dataString = dataString.replaceAll('\r\n', '')
                            //dataString = dataString.replaceAll('\r', '')
                            dataString = dataString.replaceAll('\t\t', '-->')
                            var dataString = dataString.split("**************************")
                            for (var intIdx = 0; intIdx < dataString.length; intIdx++) {
                                var keyValuePair = dataString[intIdx];
                                var key = keyValuePair.split("-->")[0].trim()
                                var value = keyValuePair.split("-->")[1]
                                console.log(dataString[intIdx]);
                                if (key.includes("OUR CB REF NO"))
                                {
                                    key = "OUR CB REF NO"
                                    value = keyValuePair.split("-->")[0].split(":")[1].trim()
                                    for (var intIIdx = 0; intIIdx < customer_feedback_form_field_values.length; intIIdx++) 
                                        if (customer_feedback_form_field_values[intIIdx]['word_file_field_name'] == key)
                                        {
                                            customer_feedback_form_field_values[intIIdx]['field_value'] = value;
                                            if (value.trim() != "") noOfFilledEntries++;
                                        }
                                    key = "DATE"
                                    value = keyValuePair.split("-->")[1].split(":")[1].trim()
                                }
                                if (key.includes("COMPANY NAME"))
                                {
                                    key = keyValuePair.split(":")[0].trim()
                                    value = keyValuePair.split(":")[1].replace("STANDARD", "").trim()
                                    for (var intIIdx = 0; intIIdx < customer_feedback_form_field_values.length; intIIdx++) 
                                        if (customer_feedback_form_field_values[intIIdx]['word_file_field_name'] == key)
                                        {
                                            customer_feedback_form_field_values[intIIdx]['field_value'] = value;
                                            if (value.trim() != "") noOfFilledEntries++;
                                        }
                                    key = "STANDARD: ISO 9001/ ISO 14001/ HACCP / OHSAS / OTHERS"
                                    if (keyValuePair.split(key).length > 1)
                                        value = keyValuePair.split(key)[1].trim()
                                    else value = ""
                                }
                                if (key.includes("OTHER COMMENTS:"))
                                {
                                    value = key.split("OTHER COMMENTS:")[1].trim()
                                    key = 'OTHER COMMENTS'
                                    // if (keyValuePair.split(key).length > 1)
                                    //     value = keyValuePair.split(key)[1].split("Completing this feedback form will have no bearing on your assessment/surveillance")[0].replace(": ", "")
                                    // else value = ""
                                }
                                if (key.includes("SIGNED"))
                                {
                                    key = 'DATE BOTTOM'
                                    value = keyValuePair.split("DATE: ")[1]
                                }
                                if (keyValuePair.split("-->")[0].includes("Form")
                                || keyValuePair.split("-->")[0].includes("Issue No.")
                                || keyValuePair.split("-->")[0].includes("Rev no.")
                                || keyValuePair.split("-->")[0].includes("Rev date :"))
                                {
                                    for (var intIIdx = 0; intIIdx < customer_feedback_form_field_values.length; intIIdx++) 
                                        if (customer_feedback_form_field_values[intIIdx]['word_file_field_name'] == "Form No.") 
                                        {
                                            customer_feedback_form_field_values[intIIdx]['field_value'] = keyValuePair.split("Form ")[1].split(", Issue No.")[0].trim();
                                            if (keyValuePair.split("Form ")[1].split(", Issue No.")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < customer_feedback_form_field_values.length; intIIdx++) 
                                        if (customer_feedback_form_field_values[intIIdx]['word_file_field_name'] == "Issue No.") 
                                        {
                                            customer_feedback_form_field_values[intIIdx]['field_value'] = keyValuePair.split("Issue No.")[1].split(", Rev No")[0].trim();
                                            if (keyValuePair.split("Issue No.")[1].split(", Rev No")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < customer_feedback_form_field_values.length; intIIdx++) 
                                        if (customer_feedback_form_field_values[intIIdx]['word_file_field_name'] == "Rev No.") 
                                        {
                                            customer_feedback_form_field_values[intIIdx]['field_value'] = keyValuePair.split("Rev No.")[1].split(", Rev date :")[0].trim();
                                            if (keyValuePair.split("Rev No.")[1].split(", Rev date :")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    key = "Rev date";
                                    value = keyValuePair.split("Rev date :")[1].split("-->")[0].trim();
                                }
                                var optionsArray = [];
                                var newValue = "";
                                if (key == "STANDARD:")
                                {
                                    optionsArray = value.split("[_");
                                    for (var intIIdx = 0; intIIdx < optionsArray.length; intIIdx++)
                                    {
                                        if (optionsArray[intIIdx].split("_]")[0] == 'yes')
                                        {
                                            newValue = newValue + optionsArray[intIIdx].split("_]")[1].trim() + ";;"
                                            if (optionsArray[intIIdx].split("_]")[1].trim().includes('OTHERS'))
                                            {
                                                for (var intIIIdx = 0; intIIIdx < customer_feedback_form_field_values.length; intIIIdx++) 
                                                    if (customer_feedback_form_field_values[intIIIdx]['word_file_field_name'] == "STANDARD: OTHERS")
                                                    {
                                                        customer_feedback_form_field_values[intIIIdx]['field_value'] = optionsArray[intIIdx].split("_]")[1].trim().split("OTHERS")[1].trim();
                                                        if (optionsArray[intIIdx].split("_]")[1].trim().split("OTHERS")[1].trim() != "") noOfFilledEntries++;
                                                    }
                                            }
                                        }
                                    }
                                    value = "[[Radio]]" + newValue;
                                    key = "STANDARD: ISO 9001/ ISO 14001/ HACCP / OHSAS / OTHERS";
                                }
                                if (key.includes("WOULD YOU RECOMMEND THIS AUDITOR FOR FURTHER ASSESSMENT WORK?"))
                                {
                                    optionsArray = key.split("[_");
                                    for (var intIIdx = 1; intIIdx < optionsArray.length; intIIdx++)
                                    {
                                        if (optionsArray[intIIdx].split("_]")[0] == 'yes')
                                        {
                                            if (optionsArray[intIIdx].split("_]")[1].trim() == "YES")
                                                newValue = newValue + "Yes;;"
                                            else if (optionsArray[intIIdx].split("_]")[1].trim() == "NO")
                                            {
                                                newValue = newValue + "No;;"
                                                for (var intIIIdx = 0; intIIIdx < customer_feedback_form_field_values.length; intIIIdx++) 
                                                    if (customer_feedback_form_field_values[intIIIdx]['word_file_field_name'] == "Comments for No")
                                                    {
                                                        customer_feedback_form_field_values[intIIIdx]['field_value'] = dataString[intIdx + 1].split("IF NO, YOUR COMMENTS AS TO WHY:")[1].split("OTHER COMMENTS:")[0].trim();
                                                        if (dataString[intIdx + 1].split("IF NO, YOUR COMMENTS AS TO WHY:")[1].split("OTHER COMMENTS:")[0].trim() != "") noOfFilledEntries++;
                                                    }
                                            }
                                        }
                                    }
                                    value = "[[Radio]]" + newValue;
                                    key = "WOULD YOU RECOMMEND THIS AUDITOR FOR FURTHER ASSESSMENT WORK?";
                                }
                                if (key.includes("APPEARANCE"))
                                {
                                    value = key.split("APPEARANCE")[1].trim();
                                    key = "APPEARANCE"
                                }
                                if (key.includes("ATTITUDE"))
                                {
                                    value = key.split("ATTITUDE")[1].trim();
                                    key = "ATTITUDE"
                                }
                                if (key.includes("TECHNICAL KNOWLEDGE"))
                                {
                                    value = key.split("TECHNICAL KNOWLEDGE")[1].trim();
                                    key = "TECHNICAL KNOWLEDGE"
                                }
                                if (key.includes("COMMUNICATION SKILLS"))
                                {
                                    value = key.split("COMMUNICATION SKILLS")[1].trim();
                                    key = "COMMUNICATION SKILLS"
                                }
                                if (key.includes("CONVERSANT WITH STANDARD"))
                                {
                                    value = key.split("CONVERSANT WITH STANDARD")[1].trim();
                                    key = "CONVERSANT WITH STANDARD"
                                }
                                for (var intIIdx = 0; intIIdx < customer_feedback_form_field_values.length; intIIdx++) 
                                    if (customer_feedback_form_field_values[intIIdx]['word_file_field_name'] == key)
                                    {
                                        customer_feedback_form_field_values[intIIdx]['field_value'] = value;
                                        if (value.trim() != "") noOfFilledEntries++;
                                    }
                            }
                            customer_feedback_form_field_values[customer_feedback_form_field_values.length - 1]['no_of_filled_entries'] = noOfFilledEntries;
                            //console.log(customer_feedback_form_field_values)
                            //res.send({"customer_feedback_form_field_values": customer_feedback_form_field_values})
                            urlExists(req.body['prev_url'], function(err, oExists) {
                                if (oExists)
                                {
                                    const oHttp = require('https'); // or 'https' for https:// URLs
                                    const oFs = require('fs');
                                    const oFile = oFs.createWriteStream("application_form11.docx");
                                    //const request = http.get('https://cwac.in/init_certification_client_application/1645433053973/forms/application_form.docx', function(response) {
                                    const request = oHttp.get(req.body['prev_url'], function(response) {
                                        response.pipe(oFile);
                                        // after download completed close filestream
                                        oFile.on("finish", async () => {
                                            oFile.close();
                                            const oJava = new JavaCaller({
                                                classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                                                mainClass: 'wordfilemgtnodejs.WordFileMgtNodeJS',// Main class to call, must be available from CLASSPATH,
                                                rootPath: __dirname,
                                            });
                                            const { status, stdout, stderr } = await oJava.run();
                                            var oDataString = String(stdout)
                                            oDataString = oDataString.replaceAll('\n', '')
                                            oDataString = oDataString.replaceAll('\r', '')
                                            oDataString = oDataString.replaceAll('\t\t', '-->')
                                            var oDataString = oDataString.split("**************************")
                                            for (var oIntIdx = 0; oIntIdx < oDataString.length; oIntIdx++) {
                                                var keyValuePair = oDataString[oIntIdx];
                                                if (keyValuePair.split("-->")[0].includes("Verified by"))
                                                {
                                                    prevDate = keyValuePair.split("Date : ")[1].split("Note: ")[0].trim();
                                                    console.log({"customer_feedback_form_field_values": customer_feedback_form_field_values, "app_date": prevDate})
                                                    res.send({"customer_feedback_form_field_values": customer_feedback_form_field_values, "app_date": prevDate})
                                                }
                                            }
                                        });
                                    });
                                }
                                else 
                                {
                                    res.send({"customer_feedback_form_field_values": customer_feedback_form_field_values, "app_date": prevDate})
                                }
                            });
                            } catch (err) {
                                console.error("Unexpected error: " + err.message + "\n" + err.stack);
                                process.exitCode = 1;
                            }
                        })();
                    });
                });
            }
            if (req.body['file_type'] == "auditor_notes_9001")
            {
                var auditor_notes_9001_field_values = [
                    {"word_file_field_name": "Form No.", "field_name": "Form No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Issue No.", "field_name": "Issue No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Rev No.", "field_name": "Revision No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Rev date", "field_name": "Revision Date", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Organisation Name", "field_value": "", "field_name": "Organisation Name"},
                    {"word_file_field_name": "Location", "field_value": "", "field_name": "Location"},
                    {"word_file_field_name": "Scope", "field_value": "", "field_name": "Scope"},
                    {"word_file_field_name": "Exclusions/Justification", "field_value": "", "field_name": "Exclusions/Justification"},
                    {"word_file_field_name": "4.1 Understanding the organization and its context: C/NC", "field_value": "", "field_name": "4 Context of the organization: 4.1 Understanding the organization and its context: C/NC"},
                    {"word_file_field_name": "4.1 Understanding the organization and its context: Evidences", "field_value": "", "field_name": "4 Context of the organization: 4.1 Understanding the organization and its context: Evidences"},
                    {"word_file_field_name": "4.2 Understanding the needs and expectations of interested parties: C/NC", "field_value": "", "field_name": "4 Context of the organization: 4.2 Understanding the needs and expectations of interested parties: C/NC"},
                    {"word_file_field_name": "4.2 Understanding the needs and expectations of interested parties: Evidences", "field_value": "", "field_name": "4 Context of the organization: 4.2 Understanding the needs and expectations of interested parties: Evidences"},
                    {"word_file_field_name": "4.3 Determining the scope of the quality management system: C/NC", "field_value": "", "field_name": "4 Context of the organization: 4.3 Determining the scope of the quality management system: C/NC"},
                    {"word_file_field_name": "4.3 Determining the scope of the quality management system: Evidences", "field_value": "", "field_name": "4 Context of the organization: 4.3 Determining the scope of the quality management system: Evidences"},
                    {"word_file_field_name": "4.4. Quality management system and its processes: C/NC", "field_value": "", "field_name": "4 Context of the organization: 4.4. Quality management system and its processes: C/NC"},
                    {"word_file_field_name": "4.4. Quality management system and its processes: Evidences", "field_value": "", "field_name": "4 Context of the organization: 4.4. Quality management system and its processes: Evidences"},
                    {"word_file_field_name": "5  Leadership5.1Leadership and commitment5.1.1 General: C/NC", "field_value": "", "field_name": "5  Leadership: 5  Leadership\n5.1Leadership and commitment\n5.1.1 General: C/NC"},
                    {"word_file_field_name": "5  Leadership5.1Leadership and commitment5.1.1 General: Evidences", "field_value": "", "field_name": "5  Leadership: 5  Leadership\n5.1Leadership and commitment\n5.1.1 General: Evidences"},
                    {"word_file_field_name": "5.1.2    Customer focus : C/NC", "field_value": "", "field_name": "5  Leadership: 5.1.2    Customer focus: C/NC"},
                    {"word_file_field_name": "5.1.2    Customer focus : Evidences", "field_value": "", "field_name": "5  Leadership: 5.1.2    Customer focus: Evidences"},
                    {"word_file_field_name": "5.2.2 Communicating the quality policy: C/NC", "field_value": "", "field_name": "5.2  Policy: 5.2.2 Communicating the quality policy: C/NC"},
                    {"word_file_field_name": "5.2.2 Communicating the quality policy: Evidences", "field_value": "", "field_name": "5.2  Policy: 5.2.2 Communicating the quality policy: Evidences"},
                    {"word_file_field_name": "5.3 Organization roles, responsibilities and authorities: C/NC", "field_value": "", "field_name": "5.2  Policy: 5.3 Organization roles, responsibilities and authorities: C/NC"},
                    {"word_file_field_name": "5.3 Organization roles, responsibilities and authorities: Evidences", "field_value": "", "field_name": "5.2  Policy: 5.3 Organization roles, responsibilities and authorities: Evidences"},
                    {"word_file_field_name": "6  Planning6.1 Actions to address risks and opportunities: C/NC", "field_value": "", "field_name": "6  Planning: 6.1 Actions to address risks and opportunities: C/NC"},
                    {"word_file_field_name": "6  Planning6.1 Actions to address risks and opportunities: Evidences", "field_value": "", "field_name": "6  Planning: 6.1 Actions to address risks and opportunities: Evidences"},
                    {"word_file_field_name": "6.2 Quality objectives and planning to achieve them: C/NC", "field_value": "", "field_name": "6  Planning: 6.2 Quality objectives and planning to achieve them: C/NC"},
                    {"word_file_field_name": "6.2 Quality objectives and planning to achieve them: Evidences", "field_value": "", "field_name": "6  Planning: 6.2 Quality objectives and planning to achieve them: Evidences"},
                    {"word_file_field_name": "6.3 Planning of changes: C/NC", "field_value": "", "field_name": "6  Planning: 6.3 Planning of changes: C/NC"},
                    {"word_file_field_name": "6.3 Planning of changes: Evidences", "field_value": "", "field_name": "6  Planning: 6.3 Planning of changes: Evidences"},
                    {"word_file_field_name": "7  Support: C/NC", "field_value": "", "field_name": "7  Support: C/NC"},
                    {"word_file_field_name": "7  Support: Evidences", "field_value": "", "field_name": "7  Support: Evidences"},
                    {"word_file_field_name": "7.1.2  People: C/NC", "field_value": "", "field_name": "7  Support: 7.1.2  People: C/NC"},
                    {"word_file_field_name": "7.1.2  People: Evidences", "field_value": "", "field_name": "7  Support: 7.1.2  People: Evidences"},
                    {"word_file_field_name": "7.1.3 Infrastructure: C/NC", "field_value": "", "field_name": "7  Support: 7.1.3 Infrastructure: C/NC"},
                    {"word_file_field_name": "7.1.3 Infrastructure: Evidences", "field_value": "", "field_name": "7  Support: 7.1.3 Infrastructure: Evidences"},
                    {"word_file_field_name": "7.1.4 Environment for the operation of processes: C/NC", "field_value": "", "field_name": "7  Support: 7.1.4 Environment for the operation of processes: C/NC"},
                    {"word_file_field_name": "7.1.4 Environment for the operation of processes: Evidences", "field_value": "", "field_name": "7  Support: 7.1.4 Environment for the operation of processes: Evidences"},
                    {"word_file_field_name": "7.1.5  Monitoring and measuring resources: C/NC", "field_value": "", "field_name": "7  Support: 7.1.5  Monitoring and measuring resources: C/NC"},
                    {"word_file_field_name": "7.1.5  Monitoring and measuring resources: Evidences", "field_value": "", "field_name": "7  Support: 7.1.5  Monitoring and measuring resources: Evidences"},
                    {"word_file_field_name": "7.1.6 Organizational knowledge: C/NC", "field_value": "", "field_name": "7  Support: 7.1.6 Organizational knowledge: C/NC"},
                    {"word_file_field_name": "7.1.6 Organizational knowledge: Evidences", "field_value": "", "field_name": "7  Support: 7.1.6 Organizational knowledge: Evidences"},
                    {"word_file_field_name": "7.2 Competence: C/NC", "field_value": "", "field_name": "7  Support: 7.2 Competence: C/NC"},
                    {"word_file_field_name": "7.2 Competence: Evidences", "field_value": "", "field_name": "7  Support: 7.2 Competence: Evidences"},
                    {"word_file_field_name": "7.3  Awareness: C/NC", "field_value": "", "field_name": "7  Support: 7.3  Awareness: C/NC"},
                    {"word_file_field_name": "7.3  Awareness: Evidences", "field_value": "", "field_name": "7  Support: 7.3  Awareness: Evidences"},
                    {"word_file_field_name": "7.4 Communication: C/NC", "field_value": "", "field_name": "7  Support: 7.4 Communication: C/NC"},
                    {"word_file_field_name": "7.4 Communication: Evidences", "field_value": "", "field_name": "7  Support: 7.4 Communication: Evidences"},
                    {"word_file_field_name": "7.5 Documented information: C/NC", "field_value": "", "field_name": "7  Support: 7.5 Documented information: C/NC"},
                    {"word_file_field_name": "7.5 Documented information: Evidences", "field_value": "", "field_name": "7  Support: 7.5 Documented information: Evidences"},
                    {"word_file_field_name": "7.5.2 Creating and updating: C/NC", "field_value": "", "field_name": "7  Support: 7.5.2 Creating and updating: C/NC"},
                    {"word_file_field_name": "7.5.2 Creating and updating: Evidences", "field_value": "", "field_name": "7  Support: 7.5.2 Creating and updating: Evidences"},
                    {"word_file_field_name": "7.5.3 Control of documented information: C/NC", "field_value": "", "field_name": "7  Support: 7.5.3 Control of documented information: C/NC"},
                    {"word_file_field_name": "7.5.3 Control of documented information: Evidences", "field_value": "", "field_name": "7  Support: 7.5.3 Control of documented information: Evidences"},
                    {"word_file_field_name": "7.5.3.2  : C/NC", "field_value": "", "field_name": "7  Support: 7.5.3.2: C/NC"},
                    {"word_file_field_name": "7.5.3.2  : Evidences", "field_value": "", "field_name": "7  Support: 7.5.3.2: Evidences"},
                    {"word_file_field_name": "8  Operation8.1  Operational planning and control: C/NC", "field_value": "", "field_name": "8  Operation: 8.1  Operational planning and control: C/NC"},
                    {"word_file_field_name": "8  Operation8.1  Operational planning and control: Evidences", "field_value": "", "field_name": "8  Operation: 8.1  Operational planning and control: Evidences"},
                    {"word_file_field_name": "8.2 Requirements for products and services8.2.1 Customer communication: C/NC", "field_value": "", "field_name": "8.2 Requirements for products and services: 8.2.1 Customer communication: C/NC"},
                    {"word_file_field_name": "8.2 Requirements for products and services8.2.1 Customer communication: Evidences", "field_value": "", "field_name": "8.2 Requirements for products and services: 8.2.1 Customer communication: Evidences"},
                    {"word_file_field_name": "8.2.2 Determining the requirements for products and services: C/NC", "field_value": "", "field_name": "8.2 Requirements for products and services: 8.2.2 Determining the requirements for products and services: C/NC"},
                    {"word_file_field_name": "8.2.2 Determining the requirements for products and services: Evidences", "field_value": "", "field_name": "8.2 Requirements for products and services: 8.2.2 Determining the requirements for products and services: Evidences"},
                    {"word_file_field_name": "8.2.3 Review of the requirements for products and services: C/NC", "field_value": "", "field_name": "8.2 Requirements for products and services: 8.2.3 Review of the requirements for products and services: C/NC"},
                    {"word_file_field_name": "8.2.3 Review of the requirements for products and services: Evidences", "field_value": "", "field_name": "8.2 Requirements for products and services: 8.2.3 Review of the requirements for products and services: Evidences"},
                    {"word_file_field_name": "8.2.3.2  Design and development planning: C/NC", "field_value": "", "field_name": "8.2 Requirements for products and services: 8.2.3.2  Design and development planning: C/NC"},
                    {"word_file_field_name": "8.2.3.2  Design and development planning: Evidences", "field_value": "", "field_name": "8.2 Requirements for products and services: 8.2.3.2  Design and development planning: Evidences"},
                    {"word_file_field_name": "8.2.4 Changes to requirements for products and services: C/NC", "field_value": "", "field_name": "8.2 Requirements for products and services: 8.2.4 Changes to requirements for products and services: C/NC"},
                    {"word_file_field_name": "8.2.4 Changes to requirements for products and services: Evidences", "field_value": "", "field_name": "8.2 Requirements for products and services: 8.2.4 Changes to requirements for products and services: Evidences"},
                    {"word_file_field_name": "8.3 Design and development of products and services: C/NC", "field_value": "", "field_name": "8.3 Design and development of products and services: C/NC"},
                    {"word_file_field_name": "8.3 Design and development of products and services: Evidences", "field_value": "", "field_name": "8.3 Design and development of products and services: Evidences"},
                    {"word_file_field_name": "8.3.2 Design and development planning: C/NC", "field_value": "", "field_name": "8.3 Design and development of products and services: 8.3.2 Design and development planning: C/NC"},
                    {"word_file_field_name": "8.3.2 Design and development planning: Evidences", "field_value": "", "field_name": "8.3 Design and development of products and services: 8.3.2 Design and development planning: Evidences"},
                    {"word_file_field_name": "8.3.3 Design and development inputs: C/NC", "field_value": "", "field_name": "8.3 Design and development of products and services: 8.3.3 Design and development inputs: C/NC"},
                    {"word_file_field_name": "8.3.3 Design and development inputs: Evidences", "field_value": "", "field_name": "8.3 Design and development of products and services: 8.3.3 Design and development inputs: Evidences"},
                    {"word_file_field_name": "8.3.4 Design and development controls: C/NC", "field_value": "", "field_name": "8.3 Design and development of products and services: 8.3.4 Design and development controls: C/NC"},
                    {"word_file_field_name": "8.3.4 Design and development controls: Evidences", "field_value": "", "field_name": "8.3 Design and development of products and services: 8.3.4 Design and development controls: Evidences"},
                    {"word_file_field_name": "8.3.5 Design and development outputs: C/NC", "field_value": "", "field_name": "8.3 Design and development of products and services: 8.3.5 Design and development outputs: C/NC"},
                    {"word_file_field_name": "8.3.5 Design and development outputs: Evidences", "field_value": "", "field_name": "8.3 Design and development of products and services: 8.3.5 Design and development outputs: Evidences"},
                    {"word_file_field_name": "8.3.6 Design and development changes: C/NC", "field_value": "", "field_name": "8.3 Design and development of products and services: 8.3.6 Design and development changes: C/NC"},
                    {"word_file_field_name": "8.3.6 Design and development changes: Evidences", "field_value": "", "field_name": "8.3 Design and development of products and services: 8.3.6 Design and development changes: Evidences"},
                    {"word_file_field_name": "8.4 Control of externally provided processes, products and services8.4.1 General: C/NC", "field_value": "", "field_name": "8.4 Control of externally provided processes, products and services: 8.4.1 General: C/NC"},
                    {"word_file_field_name": "8.4 Control of externally provided processes, products and services8.4.1 General: Evidences", "field_value": "", "field_name": "8.4 Control of externally provided processes, products and services: 8.4.1 General: Evidences"},
                    {"word_file_field_name": "8.4.2  Type and extent of control: C/NC", "field_value": "", "field_name": "8.4 Control of externally provided processes, products and services: 8.4.2  Type and extent of control: C/NC"},
                    {"word_file_field_name": "8.4.2  Type and extent of control: Evidences", "field_value": "", "field_name": "8.4 Control of externally provided processes, products and services: 8.4.2  Type and extent of control: Evidences"},
                    {"word_file_field_name": "8.4.3 Information for external providers: C/NC", "field_value": "", "field_name": "8.4 Control of externally provided processes, products and services: 8.4.3 Information for external providers: C/NC"},
                    {"word_file_field_name": "8.4.3 Information for external providers: Evidences", "field_value": "", "field_name": "8.4 Control of externally provided processes, products and services: 8.4.3 Information for external providers: Evidences"},
                    {"word_file_field_name": "8.5 Production and service provision8.5.1 Control of production and service provision: C/NC", "field_value": "", "field_name": "8.5 Production and service provision: 8.5.1 Control of production and service provision: C/NC"},
                    {"word_file_field_name": "8.5 Production and service provision8.5.1 Control of production and service provision: Evidences", "field_value": "", "field_name": "8.5 Production and service provision: 8.5.1 Control of production and service provision: Evidences"},
                    {"word_file_field_name": "8.5.2  Identification and traceability: C/NC", "field_value": "", "field_name": "8.5 Production and service provision: 8.5.2  Identification and traceability: C/NC"},
                    {"word_file_field_name": "8.5.2  Identification and traceability: Evidences", "field_value": "", "field_name": "8.5 Production and service provision: 8.5.2  Identification and traceability: Evidences"},
                    {"word_file_field_name": "8.5.3 Property belonging to customers or external providers: C/NC", "field_value": "", "field_name": "8.5 Production and service provision: 8.5.3 Property belonging to customers or external providers: C/NC"},
                    {"word_file_field_name": "8.5.3 Property belonging to customers or external providers: Evidences", "field_value": "", "field_name": "8.5 Production and service provision: 8.5.3 Property belonging to customers or external providers: Evidences"},
                    {"word_file_field_name": "8.5.4 Preservation: C/NC", "field_value": "", "field_name": "8.5 Production and service provision: 8.5.4 Preservation: C/NC"},
                    {"word_file_field_name": "8.5.4 Preservation: Evidences", "field_value": "", "field_name": "8.5 Production and service provision: 8.5.4 Preservation: Evidences"},
                    {"word_file_field_name": "8.5.5 Post-delivery activities: C/NC", "field_value": "", "field_name": "8.5 Production and service provision: 8.5.5 Post-delivery activities: C/NC"},
                    {"word_file_field_name": "8.5.5 Post-delivery activities: Evidences", "field_value": "", "field_name": "8.5 Production and service provision: 8.5.5 Post-delivery activities: Evidences"},
                    {"word_file_field_name": "8.5.6 Control of changes: C/NC", "field_value": "", "field_name": "8.5 Production and service provision: 8.5.6 Control of changes: C/NC"},
                    {"word_file_field_name": "8.5.6 Control of changes: Evidences", "field_value": "", "field_name": "8.5 Production and service provision: 8.5.6 Control of changes: Evidences"},
                    {"word_file_field_name": "8.6 Release of products and services: C/NC", "field_value": "", "field_name": "8.6 Release of products and services: C/NC"},
                    {"word_file_field_name": "8.6 Release of products and services: Evidences", "field_value": "", "field_name": "8.6 Release of products and services: Evidences"},
                    {"word_file_field_name": "8.7 Control of nonconforming outputs8.7.1 : C/NC", "field_value": "", "field_name": "8.7 Control of nonconforming outputs: 8.7.1: C/NC"},
                    {"word_file_field_name": "8.7 Control of nonconforming outputs8.7.1 : Evidences", "field_value": "", "field_name": "8.7 Control of nonconforming outputs: 8.7.1: Evidences"},
                    {"word_file_field_name": "8.7.2  : C/NC", "field_value": "", "field_name": "8.7 Control of nonconforming outputs: 8.7.2: C/NC"},
                    {"word_file_field_name": "8.7.2  : Evidences", "field_value": "", "field_name": "8.7 Control of nonconforming outputs: 8.7.2: Evidences"},
                    {"word_file_field_name": "9 Performance evaluation9.1  Monitoring, measurement, analysis and evaluation9.1.1 General: C/NC", "field_value": "", "field_name": "9 Performance evaluation: 9.1  Monitoring, measurement, analysis and evaluation: 9.1.1 General: C/NC"},
                    {"word_file_field_name": "9 Performance evaluation9.1  Monitoring, measurement, analysis and evaluation9.1.1 General: Evidences", "field_value": "", "field_name": "9 Performance evaluation: 9.1  Monitoring, measurement, analysis and evaluation: 9.1.1 General: Evidences"},
                    {"word_file_field_name": "9.1.2 Customer Satisfaction : C/NC", "field_value": "", "field_name": "9 Performance evaluation: 9.1  Monitoring, measurement, analysis and evaluation: 9.1.2 Customer Satisfaction: C/NC"},
                    {"word_file_field_name": "9.1.2 Customer Satisfaction : Evidences", "field_value": "", "field_name": "9 Performance evaluation: 9.1  Monitoring, measurement, analysis and evaluation: 9.1.2 Customer Satisfaction: Evidences"},
                    {"word_file_field_name": "9.1.3 Analysis and evaluation: C/NC", "field_value": "", "field_name": "9 Performance evaluation: 9.1  Monitoring, measurement, analysis and evaluation: 9.1.3 Analysis and evaluation: C/NC"},
                    {"word_file_field_name": "9.1.3 Analysis and evaluation: Evidences", "field_value": "", "field_name": "9 Performance evaluation: 9.1  Monitoring, measurement, analysis and evaluation: 9.1.3 Analysis and evaluation: Evidences"},
                    {"word_file_field_name": "9.2 Internal audit : C/NC", "field_value": "", "field_name": "9 Performance evaluation: 9.2 Internal audit: C/NC"},
                    {"word_file_field_name": "9.2 Internal audit : Evidences", "field_value": "", "field_name": "9 Performance evaluation: 9.2 Internal audit: Evidences"},
                    {"word_file_field_name": "Management reviewGeneral : C/NC", "field_value": "", "field_name": "9 Performance evaluation: 9.2 Management review: 9.2.1	General: C/NC"},
                    {"word_file_field_name": "Management reviewGeneral : Evidences", "field_value": "", "field_name": "9 Performance evaluation: 9.2 Management review: 9.2.1	General: Evidences"},
                    {"word_file_field_name": "Management review inputs  9.3.3    Management review outputs : C/NC", "field_value": "", "field_name": "9 Performance evaluation: 9.3.3 Management review outputs: C/NC"},
                    {"word_file_field_name": "Management review inputs  9.3.3    Management review outputs : Evidences", "field_value": "", "field_name": "9 Performance evaluation: 9.3.3 Management review outputs: Evidences"},
                    {"word_file_field_name": "10   Improvement10.1   General: C/NC", "field_value": "", "field_name": "10 Improvement: 10.1 General: C/NC"},
                    {"word_file_field_name": "10   Improvement10.1   General: Evidences", "field_value": "", "field_name": "10 Improvement: 10.1 General: Evidences"},
                    {"word_file_field_name": "Nonconformity and corrective action: C/NC", "field_value": "", "field_name": "10 Improvement: 10.2 Nonconformity and corrective action: C/NC"},
                    {"word_file_field_name": "Nonconformity and corrective action: Evidences", "field_value": "", "field_name": "10 Improvement: 10.2 Nonconformity and corrective action: Evidences"},
                    {"word_file_field_name": "10.3 Continual improvement: C/NC", "field_value": "", "field_name": "10 Improvement: 10.3 Continual improvement: C/NC"},
                    {"word_file_field_name": "10.3 Continual improvement: Evidences", "field_value": "", "field_name": "10 Improvement: 10.3 Continual improvement: Evidences"},
                    {"word_file_field_name": "SURVEILLANCE AUDIT REQUIREMENT :\
                    \n1. A review of actions taken from non -conformities identified during the previous audit.\
                    \n2. Internal audit and Management review.\
                    \n3. Treatment of complaints.\
                    \n4. Effectiveness of the management system with regard to achieving the certified client's objectives.\
                    \n5. Progress of planned activities aimed at continual improvement.\
                    \n6. Continuing Operational control.\
                    \n7. Review of any changes\
                    \n8. Use of marks and/or any other reference to certification: C/NC", "field_value": "", "field_name": "SURVEILLANCE AUDIT REQUIREMENT :\
                    \n1. A review of actions taken from non -conformities identified during the previous audit.\
                    \n2. Internal audit and Management review.\
                    \n3. Treatment of complaints.\
                    \n4. Effectiveness of the management system with regard to achieving the certified client's objectives.\
                    \n5. Progress of planned activities aimed at continual improvement.\
                    \n6. Continuing Operational control.\
                    \n7. Review of any changes\
                    \n8. Use of marks and/or any other reference to certification: C/NC"},
                    {"word_file_field_name": "SURVEILLANCE AUDIT REQUIREMENT :\
                    \n1. A review of actions taken from non -conformities identified during the previous audit.\
                    \n2. Internal audit and Management review.\
                    \n3. Treatment of complaints.\
                    \n4. Effectiveness of the management system with regard to achieving the certified client's objectives.\
                    \n5. Progress of planned activities aimed at continual improvement.\
                    \n6. Continuing Operational control.\
                    \n7. Review of any changes\
                    \n8. Use of marks and/or any other reference to certification: Evidences", "field_value": "", "field_name": "SURVEILLANCE AUDIT REQUIREMENT :\
                    \n1. A review of actions taken from non -conformities identified during the previous audit.\
                    \n2. Internal audit and Management review.\
                    \n3. Treatment of complaints.\
                    \n4. Effectiveness of the management system with regard to achieving the certified client's objectives.\
                    \n5. Progress of planned activities aimed at continual improvement.\
                    \n6. Continuing Operational control.\
                    \n7. Review of any changes\
                    \n8. Use of marks and/or any other reference to certification: Evidences"},
                    {"word_file_field_name": "RECERTIFICATION AUDIT :\
                    \n1. Effectiveness of the management system in its entirety in the light of internal and external changes and its continued relevance and applicability to the scope of certification.\
                    \n2. Effectiveness and improvement of the management system in order to enhance the overall performance.\
                    \n3. Whether the operation of the certified management system contributes to the achievement of the Organization’s policy and objectives.\
                    \n4. The organization shall consider the results of analysis and evaluation, and the outputs from management review, to determine if there are needs or opportunities that shall be addressed as part of continual improvement: C/NC", "field_value": "", "field_name": "RECERTIFICATION AUDIT :\
                    \n1. Effectiveness of the management system in its entirety in the light of internal and external changes and its continued relevance and applicability to the scope of certification.\
                    \n2. Effectiveness and improvement of the management system in order to enhance the overall performance.\
                    \n3. Whether the operation of the certified management system contributes to the achievement of the Organization’s policy and objectives.\
                    \n4. The organization shall consider the results of analysis and evaluation, and the outputs from management review, to determine if there are needs or opportunities that shall be addressed as part of continual improvement: C/NC"},
                    {"word_file_field_name": "RECERTIFICATION AUDIT :\
                    \n1. Effectiveness of the management system in its entirety in the light of internal and external changes and its continued relevance and applicability to the scope of certification.\
                    \n2. Effectiveness and improvement of the management system in order to enhance the overall performance.\
                    \n3. Whether the operation of the certified management system contributes to the achievement of the Organization’s policy and objectives.\
                    \n4. The organization shall consider the results of analysis and evaluation, and the outputs from management review, to determine if there are needs or opportunities that shall be addressed as part of continual improvement: Evidences", "field_value": "", "field_name": "RECERTIFICATION AUDIT :\
                    \n1. Effectiveness of the management system in its entirety in the light of internal and external changes and its continued relevance and applicability to the scope of certification.\
                    \n2. Effectiveness and improvement of the management system in order to enhance the overall performance.\
                    \n3. Whether the operation of the certified management system contributes to the achievement of the Organization’s policy and objectives.\
                    \n4. The organization shall consider the results of analysis and evaluation, and the outputs from management review, to determine if there are needs or opportunities that shall be addressed as part of continual improvement: Evidences"},
                    {"word_file_field_name": "SITE DETAILS :\
                    \n1. Site name/Location.\
                    \n2. No. of. Employees working in site.\
                    \n3. Activities carried out in site.\
                    \n4. Records maintained in site: C/NC", "field_value": "", "field_name": "SITE DETAILS :\
                    \n1. Site name/Location.\
                    \n2. No. of. Employees working in site.\
                    \n3. Activities carried out in site.\
                    \n4. Records maintained in site: C/NC"},
                    {"word_file_field_name": "SITE DETAILSSite name/LocationNo. of. Employees working in siteActivities carried out in siteRecords maintained in site", "field_value": "", "field_name": "SITE DETAILS :\
                    \n1. Site name/Location.\
                    \n2. No. of. Employees working in site.\
                    \n3. Activities carried out in site.\
                    \n4. Records maintained in site: Evidences"},
                    {"field_name": "", "word_file_field_name": "", "no_of_filled_entries": 0}
                ];
                const http = require('https'); // or 'https' for https:// URLs
                const fs = require('fs');
            
                const file = fs.createWriteStream("application_form11.docx");
                //const request = http.get('https://cwac.in/init_certification_client_application/1645433053973/forms/application_form.docx', function(response) {
                const request = http.get(req.body['url'], function(response) {
                    response.pipe(file);
            
                    // after download completed close filestream
                    file.on("finish", () => {
                        file.close();
                        //res.send('ok')
                        (async () => {
                            try {
                                //await runExample();
                                const java = new JavaCaller({
                                classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                                mainClass: 'wordfilemgtnodejs.WordFileMgtNodeJS',// Main class to call, must be available from CLASSPATH,
                                rootPath: __dirname,
                            });
                            const { status, stdout, stderr } = await java.run();
                            var dataString = String(stdout)
                            //dataString = dataString.replaceAll('\n', '')
                            dataString = dataString.replaceAll('\r\n', '')
                            //dataString = dataString.replaceAll('\r', '')
                            dataString = dataString.replaceAll('\t\t', '-->')
                            var dataString = dataString.split("**************************")
                            for (var intIdx = 0; intIdx < dataString.length; intIdx++) {
                                var keyValuePair = dataString[intIdx];
                                var key = keyValuePair.split("-->")[0].trim()
                                var value = keyValuePair.split("-->")[1]
                                if (key.includes('Organisation Name'))
                                {
                                    for (var intIIdx = 0; intIIdx < auditor_notes_9001_field_values.length; intIIdx++) 
                                        if (auditor_notes_9001_field_values[intIIdx]['word_file_field_name'] == 'Organisation Name')
                                        {
                                            auditor_notes_9001_field_values[intIIdx]['field_value'] = keyValuePair.split(":")[1].replace("Location", "");
                                            if (keyValuePair.split(":")[1].replace("Location", "").trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < auditor_notes_9001_field_values.length; intIIdx++) 
                                        if (auditor_notes_9001_field_values[intIIdx]['word_file_field_name'] == 'Location')
                                        {
                                            auditor_notes_9001_field_values[intIIdx]['field_value'] = keyValuePair.split(":")[2].replace("Scope", "");
                                            if (keyValuePair.split(":")[2].replace("Scope", "").trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < auditor_notes_9001_field_values.length; intIIdx++) 
                                        if (auditor_notes_9001_field_values[intIIdx]['word_file_field_name'] == 'Scope')
                                        {
                                            auditor_notes_9001_field_values[intIIdx]['field_value'] = keyValuePair.split(":")[3].replace('Exclusions/Justification', '');
                                            if (keyValuePair.split(":")[3].replace('Exclusions/Justification', '').trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < auditor_notes_9001_field_values.length; intIIdx++) 
                                        if (auditor_notes_9001_field_values[intIIdx]['word_file_field_name'] == 'Exclusions/Justification')
                                        {
                                            auditor_notes_9001_field_values[intIIdx]['field_value'] = keyValuePair.split(":")[4];
                                            if (keyValuePair.split(":")[4].trim() != "") noOfFilledEntries++;
                                        }
                                }
                                if (key.includes('SURVEILLANCE AUDIT REQUIREMENT'))
                                {
                                    for (var intIIdx = 0; intIIdx < auditor_notes_9001_field_values.length; intIIdx++) 
                                        if (auditor_notes_9001_field_values[intIIdx]['field_name'].includes("SURVEILLANCE AUDIT REQUIREMENT") && auditor_notes_9001_field_values[intIIdx]['field_name'].includes(": C/NC"))
                                        {
                                            auditor_notes_9001_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[1];
                                            if (keyValuePair.split("-->")[1].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < auditor_notes_9001_field_values.length; intIIdx++) 
                                        if (auditor_notes_9001_field_values[intIIdx]['field_name'].includes("SURVEILLANCE AUDIT REQUIREMENT") && auditor_notes_9001_field_values[intIIdx]['field_name'].includes(": Evidences"))
                                        {
                                            auditor_notes_9001_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[2];
                                            if (keyValuePair.split("-->")[2].trim() != "") noOfFilledEntries++;
                                        }
                                }
                                if (key.includes('RECERTIFICATION AUDIT'))
                                {
                                    for (var intIIdx = 0; intIIdx < auditor_notes_9001_field_values.length; intIIdx++) 
                                        if (auditor_notes_9001_field_values[intIIdx]['field_name'].includes("RECERTIFICATION AUDIT") && auditor_notes_9001_field_values[intIIdx]['field_name'].includes(": C/NC"))
                                        {
                                            auditor_notes_9001_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[1];
                                            if (keyValuePair.split("-->")[1].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < auditor_notes_9001_field_values.length; intIIdx++) 
                                        if (auditor_notes_9001_field_values[intIIdx]['field_name'].includes("RECERTIFICATION AUDIT") && auditor_notes_9001_field_values[intIIdx]['field_name'].includes(": Evidences"))
                                        {
                                            auditor_notes_9001_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[2];
                                            if (keyValuePair.split("-->")[2].trim() != "") noOfFilledEntries++;
                                        }
                                }
                                if (key.includes('SITE DETAILS'))
                                {
                                    for (var intIIdx = 0; intIIdx < auditor_notes_9001_field_values.length; intIIdx++) 
                                        if (auditor_notes_9001_field_values[intIIdx]['field_name'].includes("SITE DETAILS") && auditor_notes_9001_field_values[intIIdx]['field_name'].includes(": C/NC"))
                                        {
                                            auditor_notes_9001_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[1].replace("C/NC", "")
                                            if (keyValuePair.split("-->")[1].replace("C/NC", "").trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < auditor_notes_9001_field_values.length; intIIdx++) 
                                        if (auditor_notes_9001_field_values[intIIdx]['field_name'].includes("SITE DETAILS") && auditor_notes_9001_field_values[intIIdx]['field_name'].includes(": Evidences"))
                                        {
                                            auditor_notes_9001_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[2].replace("Evidences", "")
                                            if (keyValuePair.split("-->")[2].replace("Evidences", "").trim() != "") noOfFilledEntries++;
                                        }
                                }
                                if (keyValuePair.split("-->")[0].includes("Form")
                                || keyValuePair.split("-->")[0].includes("Issue No.")
                                || keyValuePair.split("-->")[0].includes("Rev no:")
                                || keyValuePair.split("-->")[0].includes("Rev date:"))
                                {
                                    for (var intIIdx = 0; intIIdx < auditor_notes_9001_field_values.length; intIIdx++) 
                                        if (auditor_notes_9001_field_values[intIIdx]['word_file_field_name'] == "Form No.") 
                                        {
                                            auditor_notes_9001_field_values[intIIdx]['field_value'] = keyValuePair.split("Form ")[1].split(" Issue No.")[0].trim();
                                            if (keyValuePair.split("Form ")[1].split(" Issue No.")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < auditor_notes_9001_field_values.length; intIIdx++) 
                                        if (auditor_notes_9001_field_values[intIIdx]['word_file_field_name'] == "Issue No.") 
                                        {
                                            auditor_notes_9001_field_values[intIIdx]['field_value'] = keyValuePair.split("Issue No.")[1].split(", Rev no")[0].trim();
                                            if (keyValuePair.split("Issue No.")[1].split(", Rev no")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < auditor_notes_9001_field_values.length; intIIdx++) 
                                        if (auditor_notes_9001_field_values[intIIdx]['word_file_field_name'] == "Rev No.") 
                                        {
                                            auditor_notes_9001_field_values[intIIdx]['field_value'] = keyValuePair.split("Rev no:")[1].split(", Rev date:")[0].trim();
                                            if (keyValuePair.split("Rev no:")[1].split(", Rev date:")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < auditor_notes_9001_field_values.length; intIIdx++) 
                                        if (auditor_notes_9001_field_values[intIIdx]['word_file_field_name'] == "Rev date") 
                                        {
                                            auditor_notes_9001_field_values[intIIdx]['field_value'] = keyValuePair.split("Rev date:")[1].split("-->")[0].trim();
                                            if (keyValuePair.split("Rev date:")[1].split("-->")[0].trim() != "") noOfFilledEntries++;
                                        }
                                }
                                //
                                for (var intIIdx = 0; intIIdx < auditor_notes_9001_field_values.length; intIIdx++) 
                                {
                                    if (auditor_notes_9001_field_values[intIIdx]['word_file_field_name'].includes(key) && key != "")
                                    {
                                        if (auditor_notes_9001_field_values[intIIdx]['word_file_field_name'].includes("C/NC"))
                                        {
                                            if (keyValuePair.split("-->")[1])
                                            {
                                                auditor_notes_9001_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[1];
                                                if (keyValuePair.split("-->")[1].trim() != "") noOfFilledEntries++;
                                            }
                                        }
                                        else 
                                        {
                                            if(keyValuePair.split("-->")[1])
                                            {
                                                auditor_notes_9001_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[2];
                                                if (keyValuePair.split("-->")[2].trim() != "") noOfFilledEntries++;
                                            }
                                        }
                                    }
                                }
                            }
                            const util = require('util');
                            //console.log(stage1_audit_report_field_values)
                            //console.log(auditor_notes_9001_field_values)
                            //console.log(util.inspect(auditor_notes_9001_field_values, {showHidden: true, depth: null, colors: true}))
                            auditor_notes_9001_field_values[auditor_notes_9001_field_values.length - 1]['no_of_filled_entries'] = noOfFilledEntries;
                            console.log(util.inspect(auditor_notes_9001_field_values, { maxArrayLength: null }))
                            res.send(auditor_notes_9001_field_values)
                            } catch (err) {
                                console.error("Unexpected error: " + err.message + "\n" + err.stack);
                                process.exitCode = 1;
                            }
                        })();
                    });
                });
            }
            if (req.body['file_type'] == "auditor_notes_14001")
            {
                var auditor_notes_14001_field_values = [
                    {"word_file_field_name": "Form No.", "field_name": "Form No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Issue No.", "field_name": "Issue No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Rev No.", "field_name": "Revision No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Rev date", "field_name": "Revision Date", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "ORGANISATION NAME", "field_value": "", "field_name": "Organisation Name"},
                    {"word_file_field_name": "LOCATION", "field_value": "", "field_name": "Location"},
                    {"word_file_field_name": "SCOPE", "field_value": "", "field_name": "Scope"},
                    {"word_file_field_name": "4.1     Understanding�the�organization�and�its�context: C/NC", "field_value": "", "field_name": "4 Context of the organization: 4.1 Understanding the organization and its context: C/NC"},
                    {"word_file_field_name": "4.1     Understanding�the�organization�and�its�context: Evidences", "field_value": "", "field_name": "4 Context of the organization: 4.1 Understanding the organization and its context: Evidences"},
                    {"word_file_field_name": "4.2      Understanding�the�needs�and�expectations�           of�interested�parties: C/NC", "field_value": "", "field_name": "4 Context of the organization: 4.2 Understanding the needs and expectations of interested parties: C/NC"},
                    {"word_file_field_name": "4.2      Understanding�the�needs�and�expectations�           of�interested�parties: Evidences", "field_value": "", "field_name": "4 Context of the organization: 4.2 Understanding the needs and expectations of interested parties: Evidences"},
                    {"word_file_field_name": "4.3      Determining�the�scope�of�the�environmental�management�system: C/NC", "field_value": "", "field_name": "4 Context of the organization: 4.3 Determining the scope of the environmental management system: C/NC"},
                    {"word_file_field_name": "4.3      Determining�the�scope�of�the�environmental�management�system: Evidences", "field_value": "", "field_name": "4 Context of the organization: 4.3 Determining the scope of the environmental management system: Evidences"},
                    {"word_file_field_name": "4.4     Environmental�management�system: C/NC", "field_value": "", "field_name": "4 Context of the organization: 4.4 Environmental management system: C/NC"},
                    {"word_file_field_name": "4.4     Environmental�management�system: Evidences", "field_value": "", "field_name": "4 Context of the organization: 4.4 Environmental management system: Evidences"},
                    {"word_file_field_name": "5        Leadership5.1     Leadership�and�commitment: C/NC", "field_value": "", "field_name": "5 Leadership: 5.1 Leadership and commitment: C/NC"},
                    {"word_file_field_name": "5        Leadership5.1     Leadership�and�commitment: Evidences", "field_value": "", "field_name": "5 Leadership: 5.1 Leadership and commitment: Evidences"},
                    {"word_file_field_name": "5.2       Environmental�policy: C/NC", "field_value": "", "field_name": "5 Leadership: 5.2 Environmental policy: C/NC"},
                    {"word_file_field_name": "5.2       Environmental�policy: Evidences", "field_value": "", "field_name": "5 Leadership: 5.2 Environmental policy: Evidences"},
                    {"word_file_field_name": "5.3           Organizational�roles,�responsibilities�and�authorities: C/NC", "field_value": "", "field_name": "5 Leadership: 5.3 Organizational roles, responsibilities and authorities: C/NC"},
                    {"word_file_field_name": "5.3           Organizational�roles,�responsibilities�and�authorities: Evidences", "field_value": "", "field_name": "5 Leadership: 5.3 Organizational roles, responsibilities and authorities: Evidences"},
                    {"word_file_field_name": "6         Planning6.1     Actions�to�address�risks�and�opportunities6.1.1   General: C/NC", "field_value": "", "field_name": "6 Planning: 6.1 Actions to address risks and opportunities: 6.1.1 General: C/NC"},
                    {"word_file_field_name": "6         Planning6.1     Actions�to�address�risks�and�opportunities6.1.1   General: Evidences", "field_value": "", "field_name": "6 Planning: 6.1 Actions to address risks and opportunities: 6.1.1 General: Evidences"},
                    {"word_file_field_name": "6.1.2     Environmental�aspects: C/NC", "field_value": "", "field_name": "6 Planning: 6.1 Actions to address risks and opportunities: 6.1.2 Environmental aspects: C/NC"},
                    {"word_file_field_name": "6.1.2     Environmental�aspects: Evidences", "field_value": "", "field_name": "6 Planning: 6.1 Actions to address risks and opportunities: 6.1.2 Environmental aspects: Evidences"},
                    {"word_file_field_name": "6.1.3      Compliance�obligations: C/NC", "field_value": "", "field_name": "6 Planning: 6.1 Actions to address risks and opportunities: 6.1.3 Compliance obligations: C/NC"},
                    {"word_file_field_name": "6.1.3      Compliance�obligations: Evidences", "field_value": "", "field_name": "6 Planning: 6.1 Actions to address risks and opportunities: 6.1.3 Compliance obligations: Evidences"},
                    {"word_file_field_name": "6.1.4               Planning�action: C/NC", "field_value": "", "field_name": "6 Planning: 6.1 Actions to address risks and opportunities: 6.1.4 Planning action: C/NC"},
                    {"word_file_field_name": "6.1.4               Planning�action: Evidences", "field_value": "", "field_name": "6 Planning: 6.1 Actions to address risks and opportunities: 6.1.4 Planning action: Evidences"},
                    {"word_file_field_name": "6.2          Environmental�objectives�and�planning�to�achieve�them6.2.1         Environmental�objectives: C/NC", "field_value": "", "field_name": "6 Planning: 6.2 Environmental objectives and planning to achieve them: 6.2.1 Environmental objectives: C/NC"},
                    {"word_file_field_name": "6.2          Environmental�objectives�and�planning�to�achieve�them6.2.1         Environmental�objectives: Evidences", "field_value": "", "field_name": "6 Planning: 6.2 Environmental objectives and planning to achieve them: 6.2.1 Environmental objectives: Evidences"},
                    {"word_file_field_name": "6.2.2         Planning�actions�to�achieve�environmental�objectives: C/NC", "field_value": "", "field_name": "6 Planning: 6.2 Environmental objectives and planning to achieve them: 6.2.2 Planning actions to achieve environmental objectives: C/NC"},
                    {"word_file_field_name": "6.2.2         Planning�actions�to�achieve�environmental�objectives: Evidences", "field_value": "", "field_name": "6 Planning: 6.2 Environmental objectives and planning to achieve them: 6.2.2 Planning actions to achieve environmental objectives: Evidences"},
                    {"word_file_field_name": "7              Support7.1          Resources: C/NC", "field_value": "", "field_name": "7 Support: 7.1 Resources: C/NC"},
                    {"word_file_field_name": "7              Support7.1          Resources: Evidences", "field_value": "", "field_name": "7 Support: 7.1 Resources: Evidences"},
                    {"word_file_field_name": "7.2          Competence�: C/NC", "field_value": "", "field_name": "7 Support: 7.2 Competence: C/NC"},
                    {"word_file_field_name": "7.2          Competence�: Evidences", "field_value": "", "field_name": "7 Support: 7.2 Competence: Evidences"},
                    {"word_file_field_name": "7.3          Awareness: C/NC", "field_value": "", "field_name": "7 Support: 7.3 Awareness: C/NC"},
                    {"word_file_field_name": "7.3          Awareness: Evidences", "field_value": "", "field_name": "7 Support: 7.3 Awareness: Evidences"},
                    {"word_file_field_name": "7.4             Communication7.4.1            General: C/NC", "field_value": "", "field_name": "7 Support: 7.4 Communication: 7.4.1 General: C/NC"},
                    {"word_file_field_name": "7.4             Communication7.4.1            General: Evidences", "field_value": "", "field_name": "7 Support: 7.4 Communication: 7.4.1 General: Evidences"},
                    {"word_file_field_name": "7.4.2         Internal�communication: C/NC", "field_value": "", "field_name": "7 Support: 7.4 Communication: 7.4.2 Internal communication: C/NC"},
                    {"word_file_field_name": "7.4.2         Internal�communication: Evidences", "field_value": "", "field_name": "7 Support: 7.4 Communication: 7.4.2 Internal communication: Evidences"},
                    {"word_file_field_name": "7.4.3          External�communication: C/NC", "field_value": "", "field_name": "7 Support: 7.4 Communication: 7.4.3 External communication: C/NC"},
                    {"word_file_field_name": "7.4.3          External�communication: Evidences", "field_value": "", "field_name": "7 Support: 7.4 Communication: 7.4.3 External communication: Evidences"},
                    {"word_file_field_name": "7.5           Documented�information7.5.1          General: C/NC", "field_value": "", "field_name": "7 Support: 7.5 Documented information: 7.5.1 General: C/NC"},
                    {"word_file_field_name": "7.5           Documented�information7.5.1          General: Evidences", "field_value": "", "field_name": "7 Support: 7.5 Documented information: 7.5.1 General: Evidences"},
                    {"word_file_field_name": "7.5.2           Creating�and�updating: C/NC", "field_value": "", "field_name": "7 Support: 7.5 Documented information: 7.5.2 Creating and updating: C/NC"},
                    {"word_file_field_name": "7.5.2           Creating�and�updating: Evidences", "field_value": "", "field_name": "7 Support: 7.5 Documented information: 7.5.2 Creating and updating: Evidences"},
                    {"word_file_field_name": "7.5.3          Control�of�documented�information�: C/NC", "field_value": "", "field_name": "7 Support: 7.5 Documented information: 7.5.3 Control of documented information: C/NC"},
                    {"word_file_field_name": "7.5.3          Control�of�documented�information�: Evidences", "field_value": "", "field_name": "7 Support: 7.5 Documented information: 7.5.3 Control of documented information: Evidences"},
                    {"word_file_field_name": "8           Operation8.1        Operational�planning�and�control: C/NC", "field_value": "", "field_name": "8 Operation: 8.1 Operational planning and control: C/NC"},
                    {"word_file_field_name": "8           Operation8.1        Operational�planning�and�control: Evidences", "field_value": "", "field_name": "8 Operation: 8.1 Operational planning and control: Evidences"},
                    {"word_file_field_name": "8.2                    Emergency�preparedness�and�response: C/NC", "field_value": "", "field_name": "8 Operation: 8.2 Emergency preparedness and response: C/NC"},
                    {"word_file_field_name": "8.2                    Emergency�preparedness�and�response: Evidences", "field_value": "", "field_name": "8 Operation: 8.2 Emergency preparedness and response: Evidences"},
                    {"word_file_field_name": "9             Performance�evaluation9.1          Monitoring,�measurement,�analysis� and�evaluation9.1.1         General�: C/NC", "field_value": "", "field_name": "9 Performance evaluation: 9.1 Monitoring, measurement, analysis and evaluation: 9.1.1 General: C/NC"},
                    {"word_file_field_name": "9             Performance�evaluation9.1          Monitoring,�measurement,�analysis� and�evaluation9.1.1         General�: Evidences", "field_value": "", "field_name": "9 Performance evaluation: 9.1 Monitoring, measurement, analysis and evaluation: 9.1.1 General: Evidences"},
                    {"word_file_field_name": "9.1.2         Evaluation�of�compliance: C/NC", "field_value": "", "field_name": "9 Performance evaluation: 9.1 Monitoring, measurement, analysis and evaluation: 9.1.2 Evaluation of compliance: C/NC"},
                    {"word_file_field_name": "9.1.2         Evaluation�of�compliance: Evidences", "field_value": "", "field_name": "9 Performance evaluation: 9.1 Monitoring, measurement, analysis and evaluation: 9.1.2 Evaluation of compliance: Evidences"},
                    {"word_file_field_name": "9.2        Internal�audit9.2.1      General: C/NC", "field_value": "", "field_name": "9 Performance evaluation: 9.2 Internal audit: 9.2.1 General: C/NC"},
                    {"word_file_field_name": "9.2        Internal�audit9.2.1      General: Evidences", "field_value": "", "field_name": "9 Performance evaluation: 9.2 Internal audit: 9.2.1 General: Evidences"},
                    {"word_file_field_name": "9.2.2             Internal�audit�programme: C/NC", "field_value": "", "field_name": "9 Performance evaluation: 9.2 Internal audit: 9.2.2 Internal audit programme: C/NC"},
                    {"word_file_field_name": "9.2.2             Internal�audit�programme: Evidences", "field_value": "", "field_name": "9 Performance evaluation: 9.2 Internal audit: 9.2.2 Internal audit programme: Evidences"},
                    {"word_file_field_name": "9.3            Management�review: C/NC", "field_value": "", "field_name": "9 Performance evaluation: 9.3 Management review: C/NC"},
                    {"word_file_field_name": "9.3            Management�review: Evidences", "field_value": "", "field_name": "9 Performance evaluation: 9.3 Management review: Evidences"},
                    {"word_file_field_name": "10�     Improvement10.1      General: C/NC", "field_value": "", "field_name": "10 Improvement: 10.1 General: C/NC"},
                    {"word_file_field_name": "10�     Improvement10.1      General: Evidences", "field_value": "", "field_name": "10 Improvement: 10.1 General: Evidences"},
                    {"word_file_field_name": "10.2         Nonconformity�and�corrective�action10.3.Continual Improvement:: C/NC", "field_value": "", "field_name": "10 Improvement: 10.2 Nonconformity and corrective action\n10.3 Continual Improvement: C/NC"},
                    {"word_file_field_name": "10.2         Nonconformity�and�corrective�action10.3.Continual Improvement:: Evidences", "field_value": "", "field_name": "10 Improvement: 10.2 Nonconformity and corrective action\n10.3 Continual Improvement: Evidences"},
                    {"word_file_field_name": "SURVEILLANCE AUDIT REQUIREMENT :A review of actions taken from non -conformities identified during the previous audit.Internal audit and Management review.Treatment of complaints.Effectiveness of the management system with regard to achieving the certified client�s objectives.Progress of planned activities aimed at continual improvement. Continuing Operational control.Review of any changes      8.Use of marks and/or any other reference to certification: C/NC", "field_value": "", "field_name": "SURVEILLANCE AUDIT REQUIREMENT : 1. A review of actions taken from non -conformities identified during the previous audit. 2. Internal audit and Management review. 3. Treatment of complaints. 4. Effectiveness of the management system with regard to achieving the certified client’s objectives. 5. Progress of planned activities aimed at continual improvement. 6. Continuing Operational control. 7. Review of any changes 8. Use of marks and/or any other reference to certification: C/NC"},
                    {"word_file_field_name": "SURVEILLANCE AUDIT REQUIREMENT :A review of actions taken from non -conformities identified during the previous audit.Internal audit and Management review.Treatment of complaints.Effectiveness of the management system with regard to achieving the certified client�s objectives.Progress of planned activities aimed at continual improvement. Continuing Operational control.Review of any changes      8.Use of marks and/or any other reference to certification: Evidences", "field_value": "", "field_name": "SURVEILLANCE AUDIT REQUIREMENT : 1. A review of actions taken from non -conformities identified during the previous audit. 2. Internal audit and Management review. 3. Treatment of complaints. 4. Effectiveness of the management system with regard to achieving the certified client’s objectives. 5. Progress of planned activities aimed at continual improvement. 6. Continuing Operational control. 7. Review of any changes 8. Use of marks and/or any other reference to certification: Evidences"},
                    {"word_file_field_name": "RECERTIFICATION AUDIT:Effectiveness of the management system in its entirety in the light of internal and external changes and its continued relevance and applicability to the scope of certification.Effectiveness and improvement of the management system in order to enhance the overall performance.Whether the operation of the certified management system contributes to the achievement of the Organization�s policy and objectives: C/NC", "field_value": "", "field_name": "RECERTIFICATION AUDIT : 1. Effectiveness of the management system in its entirety in the light of internal and external changes and its continued relevance and applicability to the scope of certification. 2. Effectiveness and improvement of the management system in order to enhance the overall performance. 3. Whether the operation of the certified management system contributes to the achievement of the Organization’s policy and objectives: C/NC"},
                    {"word_file_field_name": "RECERTIFICATION AUDIT:Effectiveness of the management system in its entirety in the light of internal and external changes and its continued relevance and applicability to the scope of certification.Effectiveness and improvement of the management system in order to enhance the overall performance.Whether the operation of the certified management system contributes to the achievement of the Organization�s policy and objectives: Evidences", "field_value": "", "field_name": "RECERTIFICATION AUDIT : 1. Effectiveness of the management system in its entirety in the light of internal and external changes and its continued relevance and applicability to the scope of certification. 2. Effectiveness and improvement of the management system in order to enhance the overall performance. 3. Whether the operation of the certified management system contributes to the achievement of the Organization’s policy and objectives: Evidences"},
                    {"word_file_field_name": "Site detailsSite nameNo. of. Employees working in siteActivities carried out in siteRecords maintained in site: C/NC", "field_value": "", "field_name": "Site details Site name No. of. Employees working in site Activities carried out in site Records maintained in site: C/NC"},
                    {"word_file_field_name": "Site detailsSite nameNo. of. Employees working in siteActivities carried out in siteRecords maintained in site: Evidences", "field_value": "", "field_name": "Site details Site name No. of. Employees working in site Activities carried out in site Records maintained in site: Evidences"},
                    {"field_name": "", "word_file_field_name": "", "no_of_filled_entries": 0}
                ];
                const http = require('https'); // or 'https' for https:// URLs
                const fs = require('fs');
            
                const file = fs.createWriteStream("application_form11.docx");
                //const request = http.get('https://cwac.in/init_certification_client_application/1645433053973/forms/application_form.docx', function(response) {
                const request = http.get(req.body['url'], function(response) {
                    response.pipe(file);
            
                    // after download completed close filestream
                    file.on("finish", () => {
                        file.close();
                        //res.send('ok')
                        (async () => {
                            try {
                                //await runExample();
                                const java = new JavaCaller({
                                classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                                mainClass: 'wordfilemgtnodejs.WordFileMgtNodeJS',// Main class to call, must be available from CLASSPATH,
                                rootPath: __dirname,
                            });
                            const { status, stdout, stderr } = await java.run();
                            var dataString = String(stdout)
                            //dataString = dataString.replaceAll('\n', '')
                            dataString = dataString.replaceAll('\r\n', '')
                            //dataString = dataString.replaceAll('\r', '')
                            dataString = dataString.replaceAll('\t\t', '-->')
                            var dataString = dataString.split("**************************")
                            for (var intIdx = 0; intIdx < dataString.length; intIdx++) {
                                var keyValuePair = dataString[intIdx];
                                var key = keyValuePair.split("-->")[0].trim()
                                var value = keyValuePair.split("-->")[1]
                                if (key.includes('ORGANISATION NAME'))
                                {
                                    for (var intIIdx = 0; intIIdx < auditor_notes_14001_field_values.length; intIIdx++) 
                                        if (auditor_notes_14001_field_values[intIIdx]['word_file_field_name'] == 'ORGANISATION NAME')
                                        {
                                            auditor_notes_14001_field_values[intIIdx]['field_value'] = keyValuePair.split(":")[1].replace("LOCATION", "");
                                            if (keyValuePair.split(":")[1].replace("LOCATION", "").trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < auditor_notes_14001_field_values.length; intIIdx++) 
                                        if (auditor_notes_14001_field_values[intIIdx]['word_file_field_name'] == 'LOCATION')
                                        {
                                            auditor_notes_14001_field_values[intIIdx]['field_value'] = keyValuePair.split(":")[2].replace("SCOPE", "");
                                            if (keyValuePair.split(":")[2].replace("SCOPE", "").trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < auditor_notes_14001_field_values.length; intIIdx++) 
                                        if (auditor_notes_14001_field_values[intIIdx]['word_file_field_name'] == 'SCOPE')
                                        {
                                            auditor_notes_14001_field_values[intIIdx]['field_value'] = keyValuePair.split(":")[3];
                                            if (keyValuePair.split(":")[3].trim() != "") noOfFilledEntries++;
                                        }
                                }
                                if (keyValuePair.split("-->")[0].includes("Form")
                                || keyValuePair.split("-->")[0].includes("Issue No.")
                                || keyValuePair.split("-->")[0].includes("Revno:")
                                || keyValuePair.split("-->")[0].includes("Revdate:"))
                                {
                                    for (var intIIdx = 0; intIIdx < auditor_notes_14001_field_values.length; intIIdx++) 
                                        if (auditor_notes_14001_field_values[intIIdx]['word_file_field_name'] == "Form No.") 
                                        {
                                            auditor_notes_14001_field_values[intIIdx]['field_value'] = keyValuePair.split("Form ")[1].split(",  Issue No.")[0].trim();
                                            if (keyValuePair.split("Form ")[1].split(",  Issue No.")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < auditor_notes_14001_field_values.length; intIIdx++) 
                                        if (auditor_notes_14001_field_values[intIIdx]['word_file_field_name'] == "Issue No.") 
                                        {
                                            auditor_notes_14001_field_values[intIIdx]['field_value'] = keyValuePair.split("Issue No.")[1].split(", Revno:")[0].trim();
                                            if (keyValuePair.split("Issue No.")[1].split(", Revno:")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < auditor_notes_14001_field_values.length; intIIdx++) 
                                        if (auditor_notes_14001_field_values[intIIdx]['word_file_field_name'] == "Rev No.") 
                                        {
                                            auditor_notes_14001_field_values[intIIdx]['field_value'] = keyValuePair.split("Revno:")[1].split(", Revdate:")[0].trim();
                                            if (keyValuePair.split("Revno:")[1].split(", Revdate:")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < auditor_notes_14001_field_values.length; intIIdx++) 
                                        if (auditor_notes_14001_field_values[intIIdx]['word_file_field_name'] == "Rev date") 
                                        {
                                            auditor_notes_14001_field_values[intIIdx]['field_value'] = keyValuePair.split("Revdate:")[1].split("-->")[0].trim();
                                            if (keyValuePair.split("Revdate:")[1].split("-->")[0].trim() != "") noOfFilledEntries++;
                                        }
                                }
                                for (var intIIdx = 0; intIIdx < auditor_notes_14001_field_values.length; intIIdx++) 
                                {
                                    if (auditor_notes_14001_field_values[intIIdx]['word_file_field_name'].includes(key))
                                    {
                                        //console.log("auditor_notes_14001_field_values[intIIdx]['word_file_field_name']: ", auditor_notes_14001_field_values[intIIdx]['word_file_field_name']);
                                        if (auditor_notes_14001_field_values[intIIdx]['word_file_field_name'].includes("C/NC"))
                                        {
                                            if (keyValuePair.split("-->")[1])
                                            {
                                                auditor_notes_14001_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[1];
                                                if (keyValuePair.split("-->")[1].trim() != "") noOfFilledEntries++;
                                            }
                                        }
                                        else 
                                        {
                                            if(keyValuePair.split("-->")[1])
                                            {
                                                auditor_notes_14001_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[2];
                                                if (keyValuePair.split("-->")[2].trim() != "") noOfFilledEntries++;
                                            }
                                        }
                                    }
                                }
                            }
                            const util = require('util');
                            //console.log(stage1_audit_report_field_values)
                            //console.log(auditor_notes_9001_field_values)
                            //console.log(util.inspect(auditor_notes_9001_field_values, {showHidden: true, depth: null, colors: true}))
                            //console.log(util.inspect(auditor_notes_14001_field_values, { maxArrayLength: null }))
                            //console.log(auditor_notes_14001_field_values)
                            auditor_notes_14001_field_values[auditor_notes_14001_field_values.length - 1]['no_of_filled_entries'] = noOfFilledEntries;
                            res.send(auditor_notes_14001_field_values)
                            } catch (err) {
                                console.error("Unexpected error: " + err.message + "\n" + err.stack);
                                process.exitCode = 1;
                            }
                        })();
                    });
                });
            }
            if (req.body['file_type'] == "auditor_notes_45001")
            {
                var auditor_notes_45001_field_values = [
                    {"word_file_field_name": "Form No.", "field_name": "Form No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Issue No.", "field_name": "Issue No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Rev No.", "field_name": "Revision No.", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "Rev date", "field_name": "Revision Date", "field_value": "", "optional": "no"},
                    {"word_file_field_name": "ORGANISATION NAME", "field_value": "", "field_name": "Organisation Name"},
                    {"word_file_field_name": "LOCATION", "field_value": "", "field_name": "Location"},
                    {"word_file_field_name": "SCOPE", "field_value": "", "field_name": "Scope"},
                    {"word_file_field_name": "EXCLUSION/JUSTIFICATION", "field_value": "", "field_name": "EXCLUSION/JUSTIFICATION"},
                    {"word_file_field_name": "4.1 Understanding the organization and its context : C/NC", "field_value": "", "field_name": "4 Context of the organization: 4.1 Understanding the organization and its context: C/NC"},
                    {"word_file_field_name": "4.1 Understanding the organization and its context : Evidences", "field_value": "", "field_name": "4 Context of the organization: 4.1 Understanding the organization and its context: Evidences"},
                    {"word_file_field_name": "INTERESTED PARTIES and their requirements (4.2): C/NC", "field_value": "", "field_name": "4 Context of the organization: 4.2 INTERESTED PARTIES and their requirements: C/NC"},
                    {"word_file_field_name": "INTERESTED PARTIES and their requirements (4.2): Evidences", "field_value": "", "field_name": "4 Context of the organization: 4.2 INTERESTED PARTIES and their requirements: Evidences"},
                    {"word_file_field_name": "SCOPE of OH&S  management system (4.3): C/NC", "field_value": "", "field_name": "4 Context of the organization: 4.3 SCOPE of OH&S management system: C/NC"},
                    {"word_file_field_name": "SCOPE of OH&S  management system (4.3): Evidences", "field_value": "", "field_name": "4 Context of the organization: 4.3 SCOPE of OH&S management system: Evidences"},
                    {"word_file_field_name": "OH&S Management System (4.4): C/NC", "field_value": "", "field_name": "4 Context of the organization: 4.4 OH&S Management System: C/NC"},
                    {"word_file_field_name": "OH&S Management System (4.4): Evidences", "field_value": "", "field_name": "4 Context of the organization: 4.4 OH&S Management System: Evidences"},
                    {"word_file_field_name": " Leadership and Commitment  (5.1): C/NC", "field_value": "", "field_name": "5 LEADERSHIP & WORKER PARTICIPATION: 5.1 Leadership and Commitment: C/NC"},
                    {"word_file_field_name": " Leadership and Commitment  (5.1): Evidences", "field_value": "", "field_name": "5 LEADERSHIP & WORKER PARTICIPATION: 5.1 Leadership and Commitment: Evidences"},
                    {"word_file_field_name": "OH&S Policy (5.2): C/NC", "field_value": "", "field_name": "5 LEADERSHIP & WORKER PARTICIPATION: 5.2 OH&S Policy: C/NC"},
                    {"word_file_field_name": "OH&S Policy (5.2): Evidences", "field_value": "", "field_name": "5 LEADERSHIP & WORKER PARTICIPATION: 5.2 OH&S Policy: Evidences"},
                    {"word_file_field_name": "ROLES, RESPONSIBILITIES & AUTHORITIES (5.3): C/NC", "field_value": "", "field_name": "5 LEADERSHIP & WORKER PARTICIPATION: 5.3 ROLES, RESPONSIBILITIES & AUTHORITIES: C/NC"},
                    {"word_file_field_name": "ROLES, RESPONSIBILITIES & AUTHORITIES (5.3): Evidences", "field_value": "", "field_name": "5 LEADERSHIP & WORKER PARTICIPATION: 5.3 ROLES, RESPONSIBILITIES & AUTHORITIES: Evidences"},
                    {"word_file_field_name": "consultation & participation of workers (5.4 ): C/NC", "field_value": "", "field_name": "5 LEADERSHIP & WORKER PARTICIPATION: 5.4 Consultation & participation of workers: C/NC"},
                    {"word_file_field_name": "consultation & participation of workers (5.4 ): Evidences", "field_value": "", "field_name": "5 LEADERSHIP & WORKER PARTICIPATION: 5.4 Consultation & participation of workers: Evidences"},
                    {"word_file_field_name": "6.1 ACTIONS TO ADDRESS RISK & OPPORTUNITIES: C/NC", "field_value": "", "field_name": "6 Planning: 6.1 Actions to address risks and opportunities: C/NC"},
                    {"word_file_field_name": "6.1 ACTIONS TO ADDRESS RISK & OPPORTUNITIES: Evidences", "field_value": "", "field_name": "6 Planning: 6.1 Actions to address risks and opportunities: Evidences"},
                    {"word_file_field_name": "RISKS AND OPPPORTUNITIES related to OH&S hazards & risks(6.1.1): C/NC", "field_value": "", "field_name": "6 Planning: 6.1 Actions to address risks and opportunities: 6.1.1 RISKS AND OPPPORTUNITIES related to OH&S hazards & risks: C/NC"},
                    {"word_file_field_name": "RISKS AND OPPPORTUNITIES related to OH&S hazards & risks(6.1.1): Evidences", "field_value": "", "field_name": "6 Planning: 6.1 Actions to address risks and opportunities: 6.1.1 RISKS AND OPPPORTUNITIES related to OH&S hazards & risks: Evidences"},
                    {"word_file_field_name": "Hazard identification and assessment of risks and opportunities. (6.1.2): C/NC", "field_value": "", "field_name": "6 Planning: 6.1 Actions to address risks and opportunities: 6.1.2 Hazard identification and assessment of risks and opportunities: C/NC"},
                    {"word_file_field_name": "Hazard identification and assessment of risks and opportunities. (6.1.2): Evidences", "field_value": "", "field_name": "6 Planning: 6.1 Actions to address risks and opportunities: 6.1.2 Hazard identification and assessment of risks and opportunities: Evidences"},
                    {"word_file_field_name": "Determination of legal requirements and other requirements (6.1.3): C/NC", "field_value": "", "field_name": "6 Planning: 6.1 Actions to address risks and opportunities: 6.1.3 Determination of legal requirements and other requirements: C/NC"},
                    {"word_file_field_name": "Determination of legal requirements and other requirements (6.1.3): Evidences", "field_value": "", "field_name": "6 Planning: 6.1 Actions to address risks and opportunities: 6.1.3 Determination of legal requirements and other requirements: Evidences"},
                    {"word_file_field_name": "Planning action (6.1.4): C/NC", "field_value": "", "field_name": "6 Planning: 6.1 Actions to address risks and opportunities: 6.1.4 Planning action: C/NC"},
                    {"word_file_field_name": "Planning action (6.1.4): Evidences", "field_value": "", "field_name": "6 Planning: 6.1 Actions to address risks and opportunities: 6.1.4 Planning action: Evidences"},
                    {"word_file_field_name": "OH&S objectives and planning to achieve them (6.2): C/NC", "field_value": "", "field_name": "6 Planning: 6.2 OH&S objectives and planning to achieve them: C/NC"},
                    {"word_file_field_name": "OH&S objectives and planning to achieve them (6.2): Evidences", "field_value": "", "field_name": "6 Planning: 6.2 OH&S objectives and planning to achieve them: Evidences"},
                    {"word_file_field_name": "OH&S objectives (6.2.1): C/NC", "field_value": "", "field_name": "6 Planning: 6.2 OH&S objectives and planning to achieve them: 6.2.1 OH&S objectives: C/NC"},
                    {"word_file_field_name": "OH&S objectives (6.2.1): Evidences", "field_value": "", "field_name": "6 Planning: 6.2 OH&S objectives and planning to achieve them: 6.2.1 OH&S objectives: Evidences"},
                    {"word_file_field_name": "6.2.2 Planning to achieve OH&S objectives: C/NC", "field_value": "", "field_name": "6 Planning: 6.2 OH&S objectives and planning to achieve them: 6.2.2 Planning to achieve OH&S objectives: C/NC"},
                    {"word_file_field_name": "6.2.2 Planning to achieve OH&S objectives: Evidences", "field_value": "", "field_name": "6 Planning: 6.2 OH&S objectives and planning to achieve them: 6.2.2 Planning to achieve OH&S objectives: Evidences"},
                    {"word_file_field_name": "7.1 Resources: C/NC", "field_value": "", "field_name": "7 Support: 7.1 Resources: C/NC"},
                    {"word_file_field_name": "7.1 Resources: Evidences", "field_value": "", "field_name": "7 Support: 7.1 Resources: Evidences"},
                    {"word_file_field_name": "7.2 Competence: C/NC", "field_value": "", "field_name": "7 Support: 7.2 Competence: C/NC"},
                    {"word_file_field_name": "7.2 Competence: Evidences", "field_value": "", "field_name": "7 Support: 7.2 Competence: Evidences"},
                    {"word_file_field_name": "7.3 Awareness.: C/NC", "field_value": "", "field_name": "7 Support: 7.3 Awareness: C/NC"},
                    {"word_file_field_name": "7.3 Awareness.: Evidences", "field_value": "", "field_name": "7 Support: 7.3 Awareness: Evidences"},
                    {"word_file_field_name": "7.4 Communication: C/NC", "field_value": "", "field_name": "7 Support: 7.4 Communication: C/NC"},
                    {"word_file_field_name": "7.4 Communication: Evidences", "field_value": "", "field_name": "7 Support: 7.4 Communication: Evidences"},
                    {"word_file_field_name": "7.5 Documented information: C/NC", "field_value": "", "field_name": "7 Support: 7.5 Documented information: C/NC"},
                    {"word_file_field_name": "7.5 Documented information: Evidences", "field_value": "", "field_name": "7 Support: 7.5 Documented information: Evidences"},
                    {"word_file_field_name": "8.1 Operational planning and control: C/NC", "field_value": "", "field_name": "8 Operation: 8.1 Operational planning and control: C/NC"},
                    {"word_file_field_name": "8.1 Operational planning and control: Evidences", "field_value": "", "field_name": "8 Operation: 8.1 Operational planning and control: Evidences"},
                    {"word_file_field_name": "8.1.2 Eliminating hazards and reducing OH&S risks: C/NC", "field_value": "", "field_name": "8 Operation: 8.1 Operational planning and control: 8.1.2 Eliminating hazards and reducing OH&S risks: C/NC"},
                    {"word_file_field_name": "8.1.2 Eliminating hazards and reducing OH&S risks: Evidences", "field_value": "", "field_name": "8 Operation: 8.1 Operational planning and control: 8.1.2 Eliminating hazards and reducing OH&S risks: Evidences"},
                    {"word_file_field_name": "8.1.3 Management of change: C/NC", "field_value": "", "field_name": "8 Operation: 8.1 Operational planning and control: 8.1.3 Management of change: C/NC"},
                    {"word_file_field_name": "8.1.3 Management of change: Evidences", "field_value": "", "field_name": "8 Operation: 8.1 Operational planning and control: 8.1.3 Management of change: Evidences"},
                    {"word_file_field_name": "8.1.4 Procurement: C/NC", "field_value": "", "field_name": "8 Operation: 8.1 Operational planning and control: 8.1.4 Procurement: C/NC"},
                    {"word_file_field_name": "8.1.4 Procurement: Evidences", "field_value": "", "field_name": "8 Operation: 8.1 Operational planning and control: 8.1.4 Procurement: Evidences"},
                    {"word_file_field_name": "8.2 Emergency preparedness and response: C/NC", "field_value": "", "field_name": "8 Operation: 8.2 Emergency preparedness and response: C/NC"},
                    {"word_file_field_name": "8.2 Emergency preparedness and response: Evidences", "field_value": "", "field_name": "8 Operation: 8.2 Emergency preparedness and response: Evidences"},
                    {"word_file_field_name": "9.1 Monitoring, measurement, analysis and performance evaluation: C/NC", "field_value": "", "field_name": "9 Performance evaluation: 9.1 Monitoring, measurement, analysis and performance evaluation: C/NC"},
                    {"word_file_field_name": "9.1 Monitoring, measurement, analysis and performance evaluation: Evidences", "field_value": "", "field_name": "9 Performance evaluation: 9.1 Monitoring, measurement, analysis and performance evaluation: Evidences"},
                    {"word_file_field_name": "9.2 Internal audit: C/NC", "field_value": "", "field_name": "9 Performance evaluation: 9.2 Internal audit: C/NC"},
                    {"word_file_field_name": "9.2 Internal audit: Evidences", "field_value": "", "field_name": "9 Performance evaluation: 9.2 Internal audit: Evidences"},
                    {"word_file_field_name": "9.3 Management review: C/NC", "field_value": "", "field_name": "9 Performance evaluation: 9.3 Management review: C/NC"},
                    {"word_file_field_name": "9.3 Management review: Evidences", "field_value": "", "field_name": "9 Performance evaluation: 9.3 Management review: Evidences"},
                    {"word_file_field_name": "10.2 Incident, nonconformity and corrective action: C/NC", "field_value": "", "field_name": "10 Improvement: 10.2 Incident, nonconformity and corrective action: C/NC"},
                    {"word_file_field_name": "10.2 Incident, nonconformity and corrective action: Evidences", "field_value": "", "field_name": "10 Improvement: 10.2 Incident, nonconformity and corrective action: Evidences"},
                    {"word_file_field_name": "10.3 Continual improvement: C/NC", "field_value": "", "field_name": "10 Improvement: 10.3 Continual improvement: C/NC"},
                    {"word_file_field_name": "10.3 Continual improvement: Evidences", "field_value": "", "field_name": "10 Improvement: 10.3 Continual improvement: Evidences"},
                    //{"word_file_field_name": "SURVEILLANCE AUDIT REQUIREMENT :A review of actions taken from non -conformities identified during the previous audit.Internal audit and Management review.Treatment of complaints.Effectiveness of the management system with regard to achieving the certified client�s objectives.Progress of planned activities aimed at continual improvement. Continuing Operational control.Review of any changes      8.Use of marks and/or any other reference to certification: C/NC", "field_value": "", "field_name": "SURVEILLANCE AUDIT REQUIREMENT : 1. A review of actions taken from non -conformities identified during the previous audit. 2. Internal audit and Management review. 3. Treatment of complaints. 4. Effectiveness of the management system with regard to achieving the certified client’s objectives. 5. Progress of planned activities aimed at continual improvement. 6. Continuing Operational control. 7. Review of any changes 8. Use of marks and/or any other reference to certification: C/NC"},
                    {"word_file_field_name": "SURVEILLANCE AUDIT REQUIREMENT :A review of actions taken: C/NC", "field_value": "", "field_name": "SURVEILLANCE AUDIT REQUIREMENT : 1. A review of actions taken from non -conformities identified during the previous audit. 2. Internal audit and Management review. 3. Treatment of complaints. 4. Effectiveness of the management system with regard to achieving the certified client’s objectives. 5. Progress of planned activities aimed at continual improvement. 6. Continuing Operational control. 7. Review of any changes 8. Use of marks and/or any other reference to certification: C/NC"},
                    //{"word_file_field_name": "SURVEILLANCE AUDIT REQUIREMENT :A review of actions taken from non -conformities identified during the previous audit.Internal audit and Management review.Treatment of complaints.Effectiveness of the management system with regard to achieving the certified client�s objectives.Progress of planned activities aimed at continual improvement. Continuing Operational control.Review of any changes      8.Use of marks and/or any other reference to certification: Evidences", "field_value": "", "field_name": "SURVEILLANCE AUDIT REQUIREMENT : 1. A review of actions taken from non -conformities identified during the previous audit. 2. Internal audit and Management review. 3. Treatment of complaints. 4. Effectiveness of the management system with regard to achieving the certified client’s objectives. 5. Progress of planned activities aimed at continual improvement. 6. Continuing Operational control. 7. Review of any changes 8. Use of marks and/or any other reference to certification: Evidences"},
                    {"word_file_field_name": "SURVEILLANCE AUDIT REQUIREMENT :A review of actions taken: Evidences", "field_value": "", "field_name": "SURVEILLANCE AUDIT REQUIREMENT : 1. A review of actions taken from non -conformities identified during the previous audit. 2. Internal audit and Management review. 3. Treatment of complaints. 4. Effectiveness of the management system with regard to achieving the certified client’s objectives. 5. Progress of planned activities aimed at continual improvement. 6. Continuing Operational control. 7. Review of any changes 8. Use of marks and/or any other reference to certification: Evidences"},
                    //{"word_file_field_name": "RECERTIFICATION AUDIT:Effectiveness of the management system in its entirety in the light of internal and external changes and its continued relevance and applicability to the scope of certification.Effectiveness and improvement of the management system in order to enhance the overall performance.Whether the operation of the certified management system contributes to the achievement of the Organization�s policy and objectivesThe organization shall consider the results of analysis and evaluation, and the outputs from management review, to determine if there are needs or opportunities that shall be addressed as part of continual improvement.: C/NC", "field_value": "", "field_name": "RECERTIFICATION AUDIT : 1. Effectiveness of the management system in its entirety in the light of internal and external changes and its continued relevance and applicability to the scope of certification. 2. Effectiveness and improvement of the management system in order to enhance the overall performance. 3. Whether the operation of the certified management system contributes to the achievement of the Organization’s policy and objectives: C/NC"},
                    {"word_file_field_name": "RECERTIFICATION AUDIT:Effectiveness of the management system: C/NC", "field_value": "", "field_name": "RECERTIFICATION AUDIT : 1. Effectiveness of the management system in its entirety in the light of internal and external changes and its continued relevance and applicability to the scope of certification. 2. Effectiveness and improvement of the management system in order to enhance the overall performance. 3. Whether the operation of the certified management system contributes to the achievement of the Organization’s policy and objectives: C/NC"},
                    //{"word_file_field_name": "RECERTIFICATION AUDIT:Effectiveness of the management system in its entirety in the light of internal and external changes and its continued relevance and applicability to the scope of certification.Effectiveness and improvement of the management system in order to enhance the overall performance.Whether the operation of the certified management system contributes to the achievement of the Organization�s policy and objectivesThe organization shall consider the results of analysis and evaluation, and the outputs from management review, to determine if there are needs or opportunities that shall be addressed as part of continual improvement.: Evidences", "field_value": "", "field_name": "RECERTIFICATION AUDIT : 1. Effectiveness of the management system in its entirety in the light of internal and external changes and its continued relevance and applicability to the scope of certification. 2. Effectiveness and improvement of the management system in order to enhance the overall performance. 3. Whether the operation of the certified management system contributes to the achievement of the Organization’s policy and objectives: Evidences"},
                    {"word_file_field_name": "RECERTIFICATION AUDIT:Effectiveness of the management system: Evidences", "field_value": "", "field_name": "RECERTIFICATION AUDIT : 1. Effectiveness of the management system in its entirety in the light of internal and external changes and its continued relevance and applicability to the scope of certification. 2. Effectiveness and improvement of the management system in order to enhance the overall performance. 3. Whether the operation of the certified management system contributes to the achievement of the Organization’s policy and objectives: Evidences"},
                    {"word_file_field_name": "SITE DETAILSSite name/LocationNo. of. Employees working in siteActivities carried out in siteRecords maintained in site: C/NC", "field_value": "", "field_name": "Site details Site name No. of. Employees working in site Activities carried out in site Records maintained in site: C/NC"},
                    {"word_file_field_name": "SITE DETAILSSite name/LocationNo. of. Employees working in siteActivities carried out in siteRecords maintained in site: Evidences", "field_value": "", "field_name": "Site details Site name No. of. Employees working in site Activities carried out in site Records maintained in site: Evidences"},
                    {"field_name": "", "word_file_field_name": "", "no_of_filled_entries": 0}
                ];
                const http = require('https'); // or 'https' for https:// URLs
                const fs = require('fs');
            
                const file = fs.createWriteStream("application_form11.docx");
                //const request = http.get('https://cwac.in/init_certification_client_application/1645433053973/forms/application_form.docx', function(response) {
                const request = http.get(req.body['url'], function(response) {
                    response.pipe(file);
            
                    // after download completed close filestream
                    file.on("finish", () => {
                        file.close();
                        //res.send('ok')
                        (async () => {
                            try {
                                //await runExample();
                                const java = new JavaCaller({
                                classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                                mainClass: 'wordfilemgtnodejs.WordFileMgtNodeJS',// Main class to call, must be available from CLASSPATH,
                                rootPath: __dirname,
                            });
                            const { status, stdout, stderr } = await java.run();
                            var dataString = String(stdout)
                            //dataString = dataString.replaceAll('\n', '')
                            dataString = dataString.replaceAll('\r\n', '')
                            //dataString = dataString.replaceAll('\r', '')
                            dataString = dataString.replaceAll('\t\t', '-->')
                            var dataString = dataString.split("**************************")
                            for (var intIdx = 0; intIdx < dataString.length; intIdx++) {
                                var keyValuePair = dataString[intIdx];
                                var key = keyValuePair.split("-->")[0].trim()
                                var value = keyValuePair.split("-->")[1]
                                if (key.includes('ORGANISATION NAME'))
                                {
                                    for (var intIIdx = 0; intIIdx < auditor_notes_45001_field_values.length; intIIdx++) 
                                        if (auditor_notes_45001_field_values[intIIdx]['word_file_field_name'] == 'ORGANISATION NAME')
                                        {
                                            auditor_notes_45001_field_values[intIIdx]['field_value'] = keyValuePair.split(":")[1].replace("LOCATION", "").trim();
                                            if (keyValuePair.split(":")[1].replace("LOCATION", "").trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < auditor_notes_45001_field_values.length; intIIdx++) 
                                        if (auditor_notes_45001_field_values[intIIdx]['word_file_field_name'] == 'LOCATION')
                                        {
                                            auditor_notes_45001_field_values[intIIdx]['field_value'] = keyValuePair.split(":")[2].replace("SCOPE", "").trim();
                                            if (keyValuePair.split(":")[2].replace("SCOPE", "").trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < auditor_notes_45001_field_values.length; intIIdx++) 
                                        if (auditor_notes_45001_field_values[intIIdx]['word_file_field_name'] == 'SCOPE')
                                        {
                                            auditor_notes_45001_field_values[intIIdx]['field_value'] = keyValuePair.split(":")[3].replace("EXCLUSION/JUSTIFICATION", "").trim();
                                            if (keyValuePair.split(":")[3].replace("EXCLUSION/JUSTIFICATION", "").trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < auditor_notes_45001_field_values.length; intIIdx++) 
                                        if (auditor_notes_45001_field_values[intIIdx]['word_file_field_name'] == 'EXCLUSION/JUSTIFICATION')
                                        {
                                            auditor_notes_45001_field_values[intIIdx]['field_value'] = keyValuePair.split(":")[4].trim();
                                            if (keyValuePair.split(":")[4].trim() != "") noOfFilledEntries++;
                                        }
                                }
                                if (keyValuePair.split("-->")[0].includes("Issue No.")
                                || keyValuePair.split("-->")[0].includes("Revno:")
                                || keyValuePair.split("-->")[0].includes("Revdate:"))
                                {
                                    for (var intIIdx = 0; intIIdx < auditor_notes_45001_field_values.length; intIIdx++) 
                                        if (auditor_notes_45001_field_values[intIIdx]['word_file_field_name'] == "Form No.") 
                                        {
                                            auditor_notes_45001_field_values[intIIdx]['field_value'] = keyValuePair.split("Form No. ")[1].split(",  Issue No.")[0].trim();
                                            if (keyValuePair.split("Form No. ")[1].split(",  Issue No.")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < auditor_notes_45001_field_values.length; intIIdx++) 
                                        if (auditor_notes_45001_field_values[intIIdx]['word_file_field_name'] == "Issue No.") 
                                        {
                                            auditor_notes_45001_field_values[intIIdx]['field_value'] = keyValuePair.split("Issue No.")[1].split(", Rev no:")[0].trim();
                                            if (keyValuePair.split("Issue No.")[1].split(", Rev no:")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < auditor_notes_45001_field_values.length; intIIdx++) 
                                        if (auditor_notes_45001_field_values[intIIdx]['word_file_field_name'] == "Rev No.") 
                                        {
                                            auditor_notes_45001_field_values[intIIdx]['field_value'] = keyValuePair.split("Rev no:")[1].split(", Rev date:")[0].trim();
                                            if (keyValuePair.split("Rev no:")[1].split(", Rev date:")[0].trim() != "") noOfFilledEntries++;
                                        }
                                    for (var intIIdx = 0; intIIdx < auditor_notes_45001_field_values.length; intIIdx++) 
                                        if (auditor_notes_45001_field_values[intIIdx]['word_file_field_name'] == "Rev date") 
                                        {
                                            auditor_notes_45001_field_values[intIIdx]['field_value'] = keyValuePair.split("Rev date:")[1].split("-->")[0].trim();
                                            if (keyValuePair.split("Rev date:")[1].split("-->")[0].trim() != "") noOfFilledEntries++;
                                        }
                                }
                                console.log('keyValuePair.split("-->")[0]: ', keyValuePair.split("-->")[0]);
                                //console.log('keyValuePair: ', keyValuePair);
                                //if (keyValuePair.split("-->")[0].includes("SURVEILLANCE AUDIT REQUIREMENT :A review of actions taken: C/NC")) 
                                if (keyValuePair.split("-->")[0].includes("SURVEILLANCE AUDIT REQUIREMENT :A review of actions taken")) 
                                    key = "SURVEILLANCE AUDIT REQUIREMENT :A review of actions taken"
                                // else if (keyValuePair.split("-->")[0].includes("SURVEILLANCE AUDIT REQUIREMENT :A review of actions taken: Evidences")) 
                                //     key = "SURVEILLANCE AUDIT REQUIREMENT :A review of actions taken: Evidences"
                                //else if (keyValuePair.split("-->")[0].includes("RECERTIFICATION AUDIT:Effectiveness of the management system: C/NC")) 
                                else if (keyValuePair.split("-->")[0].includes("RECERTIFICATION AUDIT:Effectiveness of the management system")) 
                                    //key = "RECERTIFICATION AUDIT:Effectiveness of the management system: C/NC"
                                    key = "RECERTIFICATION AUDIT:Effectiveness of the management system"
                                // else if (keyValuePair.split("-->")[0].includes("RECERTIFICATION AUDIT:Effectiveness of the management system: Evidences")) 
                                //     key = "RECERTIFICATION AUDIT:Effectiveness of the management system: Evidences"
                                for (var intIIdx = 0; intIIdx < auditor_notes_45001_field_values.length; intIIdx++) 
                                {
                                    if (auditor_notes_45001_field_values[intIIdx]['word_file_field_name'].includes(key))
                                    {
                                        //console.log("auditor_notes_14001_field_values[intIIdx]['word_file_field_name']: ", auditor_notes_14001_field_values[intIIdx]['word_file_field_name']);
                                        if (auditor_notes_45001_field_values[intIIdx]['word_file_field_name'].includes("C/NC"))
                                        {
                                            if (keyValuePair.split("-->")[1])
                                            {
                                                auditor_notes_45001_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[1];
                                                if (keyValuePair.split("-->")[1].trim() != "") noOfFilledEntries++;
                                            }
                                        }
                                        else 
                                        {
                                            if(keyValuePair.split("-->")[1])
                                            {
                                                auditor_notes_45001_field_values[intIIdx]['field_value'] = keyValuePair.split("-->")[2];
                                                if (keyValuePair.split("-->")[2].trim() != "") noOfFilledEntries++;
                                            }
                                        }
                                    }
                                }
                            }
                            const util = require('util');
                            //console.log(stage1_audit_report_field_values)
                            //console.log(auditor_notes_9001_field_values)
                            //console.log(util.inspect(auditor_notes_9001_field_values, {showHidden: true, depth: null, colors: true}))
                            //console.log(util.inspect(auditor_notes_45001_field_values, { maxArrayLength: null }))
                            //console.log(auditor_notes_14001_field_values)
                            auditor_notes_45001_field_values[auditor_notes_45001_field_values.length - 1]['no_of_filled_entries'] = noOfFilledEntries;
                            res.send(auditor_notes_45001_field_values)
                            } catch (err) {
                                console.error("Unexpected error: " + err.message + "\n" + err.stack);
                                process.exitCode = 1;
                            }
                        })();
                    });
                });
            }
            // const http = require('https'); // or 'https' for https:// URLs
            // const fs = require('fs');

            // const file = fs.createWriteStream("word_output.docx");
            // const request = http.get(req.body['url'], function(response) {
            //     response.pipe(file);

            //     // after download completed close filestream
            //     file.on("finish", () => {
            //         file.close();
            //         res.send('true')
            //         // console.log("Download Completed");
            //         // const WordExtractor = require("word-extractor"); 
            //         // const extractor = new WordExtractor();
            //         // const extracted = extractor.extract("word_output.docx");
                    
            //         // extracted.then(function(doc) {
            //         //     //console.log(doc.getBody()); 
            //         //     fs.unlink("word_output.docx", (err) => {
            //         //         console.log('ok')
            //         //         res.send(doc.getBody())
            //         //     })
            //         // });
            //         // const docxTables = require('docx-tables')
            //         // docxTables({
            //         // file: 'word_output.docx'
            //         // }).then((tables) => {
            //         // // .docx table data
            //         //     //console.log(data)
            //         //     // for (var intIdx = 0; intIdx < tables.length; intIdx++)
            //         //     // {
            //         //     //     var table = Object.values(tables[intIdx])
            //         //     //     for (var intInnerIdx = 0; intInnerIdx < table.length; intInnerIdx++) {
            //         //     //         console.log(table[intInnerIdx])
            //         //     //         //console.log("bb")
            //         //     //     }
            //         //     //     //console.log(table)
            //         //     //     //console.log('aa', table.length)
            //         //     // }
            //         //     // console.log(tables)
            //         //     // res.send(tables)
            //         //     console.log(tables)
            //         //     res.send('aa')
            //         // }).catch((error) => {
            //         //     console.error(error)
            //         // })
            //     });
            // });
        }
    });
})
function ReadReport(body)
{

}
app.post('/generate_app_form', async (req, res) => {
    //const templateFile = fs.readFileSync(path.resolve(__dirname, 'application_form.docx'), 'binary');
    console.log(req.body);


    const templateFile = fs.readFileSync(path.resolve(__dirname, req.body['template_name'] + '.docx'), 'binary');
    const zip = new PizZip(templateFile);
    //const doc2pdf = require('doc2pdf');
    try {
        // Attempt to read all the templated tags
        let outputDocument = new Docxtemplater(zip, { linebreaks: true });
        var dataToAdd = req.body
        outputDocument.setData(dataToAdd);
        try {
            // Attempt to render the document (Add data to the template)
            outputDocument.render()
            // Create a buffer to store the output data
            let outputDocumentBuffer = outputDocument.getZip().generate({ type: 'nodebuffer' });    
            // Save the buffer to a file
            fs.writeFileSync(path.resolve(__dirname, 'OUTPUT.docx'), outputDocumentBuffer);
            var data;
            var docxFileName = "OUTPUT.docx"
            if (req.body['template_name'] == "application_form" || req.body['template_name'] == "contract_review_form" || req.body['template_name'] == "stage1_audit_report" || req.body['template_name'] == "certification_audit_report" || req.body['template_name'] == "nc_report" || req.body['template_name'] == "customer_feedback_form")
            {
                docxFileName = "OUTPUT11.docx"
                var radioBtnList = Object.keys(req.body).map((key) => [key, req.body[key]]);
                radioBtnList = radioBtnList.filter((ele) => {
                    if ((ele[0] + "").includes('radiobutton') || (ele[0] + "").includes('checkbox'))
                    {
                        return ele;
                    }
                })
                console.log(radioBtnList);
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'wordfilemgtnodejs.WriteMCQ',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                const { status, stdout, stderr } = await java.run(['abc', JSON.stringify(radioBtnList)]);
                console.log(stdout);
            }
            // const http = require('https');
            // var convertapi = require('convertapi')('23bUgrOh1fg2G2p1');
            // convertapi.convert('pdf', {
            //     //File: 'OUTPUT.docx'
            //     File: docxFileName
            // }).then(async function(result) {
            //     const fs2 = require('fs');
            //     const file1 = fs2.createWriteStream("OUTPUT.PDF");
            //     await http.get(result.file.fileInfo.Url, async function(response) {
            //         await response.pipe(file1);
            //         file1.on("finish", () => {
            //             file1.close()
                        data = fs.readFileSync('./' + docxFileName);
                        //dataPDF = fs.readFileSync('./OUTPUT.PDF');
                        const ftpClient = new Ftp();
                        ftpClient.on( 'ready', function() {
                            ftpClient.mkdir('domains/cwac.in/public_html/init_certification_client_application/' + req.body['clientid'] + "/forms/", true, async (err) => {
                                if (!err) {
                                    await ftpClient.put( data, 'domains/cwac.in/public_html/init_certification_client_application/' + req.body['clientid'] + '/forms/' + req.body['template_name'] + '.docx', function( err, list ) {
                                        if ( err ) throw err;
                                        ftpClient.end();     
                                        console.log('word file uploaded')
                                        res.send(JSON.stringify("Document Generated Successfully"));
                                    });
                                    // await ftpClient.put( dataPDF, 'domains/cwac.in/public_html/init_certification_client_application/' + req.body['clientid'] + '/forms/' + req.body['template_name'] + '.pdf', function( err, list ) {
                                    //     if ( err ) throw err;
                                    //     ftpClient.end();     
                                    //     console.log('pdf file uploaded1')
                                    //     res.send(JSON.stringify({"OK": "OK"}))
                                    // });
                                }
                            });
                        });
                        ftpClient.connect( {
                            'host': 'ftp.cwac.in',
                            'user': 'cwacin',
                            'password': '$Rv01111996'
                        } );
                //     }) //comment this   
                // }) //comment this
            //})
        }
        catch (error) {
            console.error(`ERROR Filling out Template:`);
            console.error(error)
        }
    } catch(error) {
        console.error(`ERROR Loading Template:`);
        console.error(error);
    }
});
app.post('/generate_app_form_pdf', async (req, res) => {
    //const templateFile = fs.readFileSync(path.resolve(__dirname, 'application_form.docx'), 'binary');
    console.log(req.body);


    const templateFile = fs.readFileSync(path.resolve(__dirname, req.body['template_name'] + '.docx'), 'binary');
    const zip = new PizZip(templateFile);
    //const doc2pdf = require('doc2pdf');
    try {
        // Attempt to read all the templated tags
        let outputDocument = new Docxtemplater(zip, { linebreaks: true });
        var dataToAdd = req.body
        outputDocument.setData(dataToAdd);
        try {
            // Attempt to render the document (Add data to the template)
            outputDocument.render()
            // Create a buffer to store the output data
            let outputDocumentBuffer = outputDocument.getZip().generate({ type: 'nodebuffer' });    
            // Save the buffer to a file
            fs.writeFileSync(path.resolve(__dirname, 'OUTPUT.docx'), outputDocumentBuffer);
            var data;
            var docxFileName = "OUTPUT.docx"
            if (req.body['template_name'] == "application_form" || req.body['template_name'] == "contract_review_form" || req.body['template_name'] == "stage1_audit_report" || req.body['template_name'] == "certification_audit_report" || req.body['template_name'] == "nc_report" || req.body['template_name'] == "customer_feedback_form")
            {
                docxFileName = "OUTPUT11.docx"
                var radioBtnList = Object.keys(req.body).map((key) => [key, req.body[key]]);
                radioBtnList = radioBtnList.filter((ele) => {
                    if ((ele[0] + "").includes('radiobutton') || (ele[0] + "").includes('checkbox'))
                    {
                        return ele;
                    }
                })
                console.log(radioBtnList);
                const { JavaCaller } = require("java-caller");
                const java = new JavaCaller({
                    classPath: 'WordFileMgtNodeJS.jar', // CLASSPATH referencing the package embedded jar files
                    mainClass: 'wordfilemgtnodejs.WriteMCQ',// Main class to call, must be available from CLASSPATH,
                    rootPath: __dirname,
                });
                const { status, stdout, stderr } = await java.run(['abc', JSON.stringify(radioBtnList)]);
                console.log(stdout);
            }
            const http = require('https');
            var convertapi = require('convertapi')('23bUgrOh1fg2G2p1');
            convertapi.convert('pdf', {
                //File: 'OUTPUT.docx'
                File: docxFileName
            }).then(async function(result) {
                const fs2 = require('fs');
                const file1 = fs2.createWriteStream("OUTPUT.PDF");
                await http.get(result.file.fileInfo.Url, async function(response) {
                    await response.pipe(file1);
                    file1.on("finish", () => {
                        file1.close()
                        data = fs.readFileSync('./' + docxFileName);
                        dataPDF = fs.readFileSync('./OUTPUT.PDF');
                        const ftpClient = new Ftp();
                        ftpClient.on( 'ready', function() {
                            ftpClient.mkdir('domains/cwac.in/public_html/init_certification_client_application/' + req.body['clientid'] + "/forms/", true, async (err) => {
                                if (!err) {
                                    await ftpClient.put( data, 'domains/cwac.in/public_html/init_certification_client_application/' + req.body['clientid'] + '/forms/' + req.body['template_name'] + '.docx', function( err, list ) {
                                        if ( err ) throw err;
                                        ftpClient.end();     
                                        console.log('word file uploaded')
                                    });
                                    await ftpClient.put( dataPDF, 'domains/cwac.in/public_html/init_certification_client_application/' + req.body['clientid'] + '/forms/' + req.body['template_name'] + '.pdf', function( err, list ) {
                                        if ( err ) throw err;
                                        ftpClient.end();     
                                        console.log('pdf file uploaded1')
                                        res.send(JSON.stringify({"OK": "OK"}))
                                    });
                                }
                            });
                        });
                        ftpClient.connect( {
                            'host': 'ftp.cwac.in',
                            'user': 'cwacin',
                            'password': '$Rv01111996'
                        } );
                    })      
                })
            })
        }
        catch (error) {
            console.error(`ERROR Filling out Template:`);
            console.error(error)
        }
    } catch(error) {
        console.error(`ERROR Loading Template:`);
        console.error(error);
    }
});
app.get("/read_nace_ea_codes_table", (req, res) => {
    const readXlsxFile = require('read-excel-file/node')
    // File path.
    readXlsxFile('nace_ea_codes_table.xlsx').then((rows) => {
        //var lstPinCodes = rows.map(row => row[1]);
        var resList = rows.filter((row, idx) => {if (idx != 0) return row});
        resList = resList.map(row => {
            return {"scope": row[0], "ea_code": row[1], "nace_code": row[2]}
        });
        //res.send({"pincodes": lstPinCodes})
        console.log({"data": resList});
        res.send({"data": resList})
    })
})
app.post("/read_checklist_template", async (req, res) => {
    const mainDirPath = path.join(__dirname, '/');
    var request = require('request');
    const fs = require('fs');
    var timestamp = new Date();
    var download = function (url, dest, callback) {
        request
          .get(url)
          .on('error', function (err) {
            console.log(err);
          })
          .pipe(fs.createWriteStream(dest))
          .on('close', callback);
    };
    const downloadFile = () =>{
        return new Promise((resolve, reject)=>{
            download("https://cwac.in/softwares_apps/quest_global_mcs/audit_app/inspection_templates/" + req.body['checklistid'] + "/template_info.xlsx", mainDirPath + req.body['checklistid'] + "_" + timestamp + ".xlsx", async function () {
                return resolve(true);
            });
        });
    };
    const readXlsxFile = require('read-excel-file/node')
    // File path.
    await downloadFile();
    //readXlsxFile('./inspection_checklist_templates/' + req.body['checklistid'] + '/template.xlsx').then((rows) => {
    readXlsxFile(mainDirPath + req.body['checklistid'] + "_" + timestamp + ".xlsx").then((rows) => {
        //var lstPinCodes = rows.map(row => row[1]);
        //var resList = rows;
        var resList = rows.filter((row, idx) => {if (idx != 0) return row});
        // resList = resList.map(row => {
        //     return {"scope": row[0], "ea_code": row[1], "nace_code": row[2]}
        // });
        // //res.send({"pincodes": lstPinCodes})
        // console.log({"data": resList});
        // res.send({"data": resList})
        fs.unlinkSync(mainDirPath + req.body['checklistid'] + "_" + timestamp + ".xlsx")
        res.send({"data": resList});
    })
})
app.get("/testurl", (req, res) => {
    res.send("okay");
})
app.get("/aws_rds_update_in_table", (req, res) => {
    var mysql = require('mysql');
    var connection = mysql.createConnection({
    host     : DBENDPOINT,
    user     : "admin",
    password : "qwertyui",
    port     : "3306",
    database : "mydb"
    });

    connection.connect(function(err) {
    if (err) {
        //console.error('Database connection failed: ' + err.stack);
        res.send(err.stack);
        connection.end();
        return;
    }

    //console.log('Connected to database.');
    //res.send('Connected to database.')
    //var sql = "CREATE TABLE IF NOT EXISTS customers (cname VARCHAR(255), address VARCHAR(255), phoneno VARCHAR(255), city varchar(255))";
    var sql = "UPDATE customers SET cname = 'Rohan111', address = 'ADDR11', phoneno='1212121', city='1cuty11' WHERE cname = 'Rohit'";
    connection.query(sql, function (err, result) {
        connection.end();
        if (err) res.send(err);
        res.send("Values Updated");
    });
    });

})
app.get("/aws_rds_delete_from_table", (req, res) => {
    var mysql = require('mysql');
    var connection = mysql.createConnection({
    host     : DBENDPOINT,
    user     : "admin",
    password : "qwertyui",
    port     : "3306",
    database : "mydb"
    });

    connection.connect(function(err) {
    if (err) {
        //console.error('Database connection failed: ' + err.stack);
        res.send(err.stack);
        connection.end();
        return;
    }

    //console.log('Connected to database.');
    //res.send('Connected to database.')
    //var sql = "CREATE TABLE IF NOT EXISTS customers (cname VARCHAR(255), address VARCHAR(255), phoneno VARCHAR(255), city varchar(255))";
    var sql = "DELETE FROM customers WHERE cname = 'Rohit'";
    connection.query(sql, function (err, result) {
        connection.end();
        if (err) res.send(err);
        res.send("Values Deleted");
    });
    });

})
app.get("/aws_rds_insert_table", (req, res) => {
    var mysql = require('mysql');
    var connection = mysql.createConnection({
    host     : DBENDPOINT,
    user     : "admin",
    password : "qwertyui",
    port     : "3306",
    database : "mydb"
    });

    connection.connect(function(err) {
    if (err) {
        //console.error('Database connection failed: ' + err.stack);
        res.send(err.stack);
        connection.end();
        return;
    }

    //console.log('Connected to database.');
    //res.send('Connected to database.')
    //var sql = "CREATE TABLE IF NOT EXISTS customers (cname VARCHAR(255), address VARCHAR(255), phoneno VARCHAR(255), city varchar(255))";
    var sql = "INSERT INTO customers VALUES('Rohit', 'D 724 Rasm Shrusti', '9424928404', 'Chennai')";
    connection.query(sql, function (err, result) {
        connection.end();
        if (err) res.send(err);
        res.send("Values inserted");
    });
    });

})
app.get("/aws_rds_show_table", (req, res) => {
    var mysql = require('mysql');
    var connection = mysql.createConnection({
    host     : DBENDPOINT,
    user     : "admin",
    password : "qwertyui",
    port     : "3306",
    database : "mydb"
    });

    connection.connect(function(err) {
    if (err) {
        //console.error('Database connection failed: ' + err.stack);
        res.send(err.stack);
        connection.end();
        return;
    }

    //console.log('Connected to database.');
    //res.send('Connected to database.')
    connection.query("SELECT * FROM customers", function (err, result, fields) {
        connection.end();
        if (err) res.send(err);
        res.send(result);
      });
    });

})
app.get("/aws_rds_create_table", (req, res) => {
    var mysql = require('mysql');
    var connection = mysql.createConnection({
    host     : DBENDPOINT,
    user     : "admin",
    password : "qwertyui",
    port     : "3306",
    database : "mydb"
    });

    connection.connect(function(err) {
    if (err) {
        //console.error('Database connection failed: ' + err.stack);
        res.send(err.stack);
        connection.end();
        return;
    }

    //console.log('Connected to database.');
    //res.send('Connected to database.')
    var sql = "CREATE TABLE IF NOT EXISTS customers (cname VARCHAR(255), address VARCHAR(255), phoneno VARCHAR(255), city varchar(255))";
    connection.query(sql, function (err, result) {
        connection.end();
        if (err) res.send(err);
        res.send("Table created");
    });
    });

})
app.get("/aws_rds_query", (req, res) => {
    var mysql = require('mysql');
    var connection = mysql.createConnection({
    host     : DBENDPOINT,
    user     : "admin",
    password : "qwertyui",
    port     : "3306",
    database : "mydb"
    });

    connection.connect(async function(err) {
    if (err) {
        //console.error('Database connection failed: ' + err.stack);
        res.send(err.stack);
        connection.end();
        return;
    }

    //console.log('Connected to database.');
    //res.send('Connected to database.')
    //var sql = "INSERT INTO registered_users VALUES ('213234234233', 'user3', 'password3')";
    //var sql = "DROP TABLE Form_Data";
    //var sql = "TRUNCATE TABLE stage2_audit_plan_logs";
    var sql = "SELECT * FROM existing_checklist_inspections";
    //var sql = "UPDATE employees SET `Member Designation` = 'Surveillance Auditor' WHERE `Member Designation` = 'Surveillance Auditor 11'";
    //var sql = "DELETE FROM stage1_audit_plans WHERE client_id = ''";
    connection.query(sql, function (err, result) {
        connection.end();
        if (err) res.send(err);
        console.log(result);
        //res.send("query executed: " + sql);
        res.send(result);
    });
    });

})
app.get("/aws_rds_register_users", (req, res) => {
    var mysql = require('mysql');
    var connection = mysql.createConnection({
    host     : DBENDPOINT,
    user     : "admin",
    password : "qwertyui",
    port     : "3306",
    database : "mydb"
    });

    connection.connect(async function(err) {
    if (err) {
        //console.error('Database connection failed: ' + err.stack);
        res.send(err.stack);
        connection.end();
        return;
    }
    var sql = "INSERT INTO registered_users VALUES('213234234231', 'user1', 'password1')";
    await connection.query(sql);
    console.log("User 1 Registered");
    var sql = "INSERT INTO registered_users VALUES('213234234232', 'user2', 'password2')";
    await connection.query(sql);
    console.log("User 2 Registered");
    var sql = "INSERT INTO registered_users VALUES('213234234233', 'user3', 'password3')";
    await connection.query(sql);
    console.log("User 3 Registered");
    connection.end();
    res.send("done");
    });

})
app.post("/aws_rds__delete_database", (req, res) => {
    var mysql = require('mysql');
    var connection = mysql.createConnection({
    host     : DBENDPOINT,
    user     : "admin",
    password : "qwertyui",
    port     : "3306",
    database : "mydb"
    });

    connection.connect(async function(err) {
    if (err) {
        //console.error('Database connection failed: ' + err.stack);
        res.send(err.stack);
        connection.end();
        return;
    }

    //console.log('Connected to database.');
    //res.send('Connected to database.')
    var tables = [
      "accreditation_board_credentials",
      "assigned_recertification_audit_teams",
      "assigned_stage1_audit_teams",
      "assigned_stage2_audit_teams",
      "assigned_surveillance_audit_teams",
      "attendance_list",
      "columns_to_filter_for_ab",
      "employees",
      "existing_checklist_inspections",
      "Form_Data",
      "ho_activities",
      "ho_activity_logs",
      "initial_certification_conclusion",
      "initial_certification_conclusion_logs",
      "initial_certification_logs",
      "inspection_checklist_templates",
      "quotation_logs",
      "quotations",
      "recertification_audit_client_logs",
      "recertification_audit_clients",
      "recertification_audit_conclusion",
      "recertification_audit_conclusion_logs",
      "recertification_audit_plan_attendance_list",
      "recertification_audit_plan_logs",
      "recertification_audit_plan_task_list",
      "recertification_audit_plans",
      //"registered_users",
      "stage1_audit_plan_attendance_list",
      "stage1_audit_plan_logs",
      "stage1_audit_plan_task_list",
      "stage1_audit_plans",
      "stage1_audit_teams",
      "stage2_audit_plan_attendance_list",
      "stage2_audit_plan_logs",
      "stage2_audit_plan_task_list",
      "stage2_audit_plans",
      "stage2_audit_teams",
      "surveillance_audit_client_logs",
      "surveillance_audit_clients",
      "surveillance_audit_conclusion",
      "surveillance_audit_conclusion_logs",
      "surveillance_audit_plan_attendance_list",
      "surveillance_audit_plan_logs",
      "surveillance_audit_plan_task_list",
      "surveillance_audit_plans",
      "surveillance_audit_reminder_fixed",
      "surveillance_audit_reminder_intervals"
    ]
    for (var intIdx = 0; intIdx < tables.length; intIdx++)
    {
        var sql = "DELETE FROM " + tables[intIdx] + " WHERE user_id = '" + req.body['userid'] + "' OR user_id = ''";
        await connection.query(sql);
        console.log((intIdx + 1) + ". " + tables[intIdx] + " table truncated");
    }
    var initTodayDate = new Date();
    var idd = String(initTodayDate.getDate()).padStart(2, '0');
    var imm = String(initTodayDate.getMonth() + 1).padStart(2, '0'); //January is 0!
    var iyyyy = initTodayDate.getFullYear();
    var ihh = String(initTodayDate.getHours()).padStart(2, '0');
    var imins = String(initTodayDate.getMinutes()).padStart(2, '0');
    var iss = String(initTodayDate.getSeconds()).padStart(2, '0');
    var sql = "UPDATE registered_users SET database_delete_date_time = '" + idd + "-" + NoToMonth[parseInt(imm - 1)] + "-" + iyyyy + ";" + ihh + ":" + imins + ":" + iss + "' WHERE id = '" + req.body['userid'] + "'";
    await connection.query(sql);
    connection.end();
    res.send("Done");
    });
})
app.get("/aws_rds_drop_app_tables_v1", (req, res) => {
    var mysql = require('mysql');
    var connection = mysql.createConnection({
    host     : DBENDPOINT,
    user     : "admin",
    password : "qwertyui",
    port     : "3306",
    database : "mydb"
    });

    connection.connect(async function(err) {
    if (err) {
        //console.error('Database connection failed: ' + err.stack);
        res.send(err.stack);
        connection.end();
        return;
    }

    //console.log('Connected to database.');
    //res.send('Connected to database.')
    var sql = 'DROP TABLE IF EXISTS Form_Data';
    await connection.query(sql);
    console.log("1. Form_Data table dropped");
    sql = "DROP TABLE IF EXISTS assigned_recertification_audit_teams";
    await connection.query(sql);
    console.log("2. assigned_recertification_audit_teams table dropped");
    sql = "DROP TABLE IF EXISTS assigned_stage1_audit_teams";
    await connection.query(sql);
    console.log("3. assigned_stage1_audit_teams table dropped");
    sql = "DROP TABLE IF EXISTS assigned_stage2_audit_teams";
    await connection.query(sql);
    console.log("4. assigned_stage2_audit_teams table dropped");
    sql = "DROP TABLE IF EXISTS assigned_surveillance_audit_teams";
    await connection.query(sql);
    console.log("5. assigned_surveillance_audit_teams table dropped");

    sql = "DROP TABLE IF EXISTS employees";
    await connection.query(sql);
    console.log("6. employees table dropped");

    sql = "DROP TABLE IF EXISTS ho_activities";
    await connection.query(sql);
    console.log("7. ho_activities table dropped");

    sql = "DROP TABLE IF EXISTS initial_certification_conclusion";
    await connection.query(sql);
    console.log("8. initial_certification_conclusion table dropped");

    sql = "DROP TABLE IF EXISTS initial_certification_conclusion_logs";
    await connection.query(sql);
    console.log("9. initial_certification_conclusion_logs table dropped");

    sql = "DROP TABLE IF EXISTS quotations";
    await connection.query(sql);
    console.log("10. quotations table dropped");

    sql = "DROP TABLE IF EXISTS quotation_logs";
    await connection.query(sql);
    console.log("11. quotation_logs table dropped");

    sql = "DROP TABLE IF EXISTS recertification_audit_clients";
    await connection.query(sql);
    console.log("12. recertification_audit_clients table dropped");

    sql = "DROP TABLE IF EXISTS recertification_audit_client_logs";
    await connection.query(sql);
    console.log("13. recertification_audit_client_logs table dropped");

    sql = "DROP TABLE IF EXISTS recertification_audit_conclusion";
    await connection.query(sql);
    console.log("14. recertification_audit_conclusion table dropped");

    sql = "DROP TABLE IF EXISTS recertification_audit_conclusion_logs";
    await connection.query(sql);
    console.log("15. recertification_audit_conclusion_logs table dropped");

    sql = "DROP TABLE IF EXISTS recertification_audit_plans";
    await connection.query(sql);
    console.log("16. recertification_audit_plans table dropped");

    sql = "DROP TABLE IF EXISTS recertification_audit_plan_logs";
    await connection.query(sql);
    console.log("17. recertification_audit_plan_logs table dropped");

    sql = "DROP TABLE IF EXISTS recertification_audit_plan_task_list";
    await connection.query(sql);
    console.log("18. recertification_audit_plan_task_list table dropped");

    sql = "DROP TABLE IF EXISTS registered_users";
    await connection.query(sql);
    console.log("19. registered_users table dropped");

    sql = "DROP TABLE IF EXISTS stage1_audit_plans";
    await connection.query(sql);
    console.log("20. stage1_audit_plans table dropped");

    sql = "DROP TABLE IF EXISTS stage1_audit_plan_logs";
    await connection.query(sql);
    console.log("21. stage1_audit_plan_logs table dropped");

    sql = "DROP TABLE IF EXISTS stage1_audit_plan_task_list";
    await connection.query(sql);
    console.log("22. stage1_audit_plan_task_list table dropped");

    sql = "DROP TABLE IF EXISTS stage1_audit_teams";
    await connection.query(sql);
    console.log("23. stage1_audit_teams table dropped");

    sql = "DROP TABLE IF EXISTS stage2_audit_plans";
    await connection.query(sql);
    console.log("24. stage2_audit_plans table dropped");

    sql = "DROP TABLE IF EXISTS stage2_audit_plan_logs";
    await connection.query(sql);
    console.log("25. stage2_audit_plan_logs table dropped");

    sql = "DROP TABLE IF EXISTS stage2_audit_plan_task_list";
    await connection.query(sql);
    console.log("26. stage2_audit_plan_task_list table dropped");

    sql = "DROP TABLE IF EXISTS stage2_audit_teams";
    await connection.query(sql);
    console.log("27. stage2_audit_teams table dropped");

    sql = "DROP TABLE IF EXISTS surveillance_audit_clients";
    await connection.query(sql);
    console.log("28. surveillance_audit_clients table dropped");

    sql = "DROP TABLE IF EXISTS surveillance_audit_conclusion";
    await connection.query(sql);
    console.log("29. surveillance_audit_conclusion table dropped");

    sql = "DROP TABLE IF EXISTS surveillance_audit_conclusion_logs";
    await connection.query(sql);
    console.log("30. surveillance_audit_conclusion_logs table dropped");

    sql = "DROP TABLE IF EXISTS surveillance_audit_plans";
    await connection.query(sql);
    console.log("31. surveillance_audit_plans table dropped");

    sql = "DROP TABLE IF EXISTS surveillance_audit_plan_logs";
    await connection.query(sql);
    console.log("32. surveillance_audit_plan_logs table dropped");

    sql = "DROP TABLE IF EXISTS surveillance_audit_plan_task_list";
    await connection.query(sql);
    console.log("33. surveillance_audit_plan_task_list table dropped");

    sql = "DROP TABLE IF EXISTS initial_certification_logs";
    await connection.query(sql);
    console.log("34. initial_certification_logs table dropped");

    sql = "DROP TABLE IF EXISTS ho_activity_logs";
    await connection.query(sql);
    console.log("35. ho_activity_logs table dropped");

    sql = "DROP TABLE IF EXISTS surveillance_audit_client_logs";
    await connection.query(sql);
    console.log("36. surveillance_audit_client_logs table dropped");

    sql = "DROP TABLE IF EXISTS inspection_checklist_templates";
    await connection.query(sql);
    console.log("37. inspection_checklist_templates table dropped");

    sql = "DROP TABLE IF EXISTS existing_checklist_inspections";
    await connection.query(sql);
    console.log("38. existing_checklist_inspections table dropped");
    
    sql = "DROP TABLE IF EXISTS surveillance_audit_reminder_intervals";
    await connection.query(sql);
    console.log("39. surveillance_audit_reminder_intervals table dropped");

    sql = "DROP TABLE IF EXISTS surveillance_audit_reminder_fixed";
    await connection.query(sql);
    console.log("40. surveillance_audit_reminder_fixed table dropped");

    sql = "DROP TABLE IF EXISTS stage1_audit_plan_attendance_list";
    await connection.query(sql);
    console.log("41. stage1_audit_plan_attendance_list table dropped");

    sql = "DROP TABLE IF EXISTS stage2_audit_plan_attendance_list";
    await connection.query(sql);
    console.log("42. stage2_audit_plan_attendance_list table dropped");

    sql = "DROP TABLE IF EXISTS surveillance_audit_plan_attendance_list";
    await connection.query(sql);
    console.log("43. surveillance_audit_plan_attendance_list table dropped");

    sql = "DROP TABLE IF EXISTS recertification_audit_plan_attendance_list";
    await connection.query(sql);
    console.log("44. recertification_audit_plan_attendance_list table dropped");

    sql = "DROP TABLE IF EXISTS attendance_list";
    await connection.query(sql);
    console.log("45. attendance_list table dropped");

    sql = "DROP TABLE IF EXISTS accreditation_board_credentials";
    await connection.query(sql);
    console.log("46. accreditation_board_credentials table dropped");

    sql = "DROP TABLE IF EXISTS columns_to_filter_for_ab";
    await connection.query(sql);
    console.log("47. columns_to_filter_for_ab table dropped");

    sql = "DROP TABLE IF EXISTS incomplete_file_upload_cleanup";
    await connection.query(sql);
    console.log("48. incomplete_file_upload_cleanup table dropped");

    sql = "DROP TABLE IF EXISTS paid_plan_clients_info";
    await connection.query(sql);
    console.log("49. paid_plan_clients_info table dropped");

    connection.end();
    res.send("tables dropped");
    });
})
app.post("/import_database_v1", (req, res) => {
    var mysql = require('mysql');
    var connection = mysql.createConnection({
    host     : DBENDPOINT,
    user     : "admin",
    password : "qwertyui",
    port     : "3306",
    database : "mydb"
    });

    connection.connect(async function(err) {
    if (err) {
        //console.error('Database connection failed: ' + err.stack);
        res.send(err.stack);
        connection.end();
        return;
    }

    //console.log('Connected to database.');
    //res.send('Connected to database.')
    if (req.body['intIdx'] == 0)
    {
    var sql = 'CREATE TABLE IF NOT EXISTS Form_Data ( user_id varchar(255), client_id varchar(255), Approved varchar(255), `Client Name` varchar(255), HO_activity_date varchar(255), HO_activity_status varchar(255), assignedToWhom varchar(255), date varchar(255), description varchar(255), email varchar(255), initial_certification_conclusion varchar(255), initial_certification_conclusion_date varchar(255), phone varchar(255), quotation_date varchar(255), quotation_status varchar(255), stage1_plan_date varchar(255), stage1_plan_status varchar(255), stage1_plan_task_date varchar(255), stage1_plan_task_status varchar(255), stage1_team_assigned varchar(255), stage2_plan_date varchar(255), stage2_plan_status varchar(255), stage2_plan_task_date varchar(255), stage2_plan_task_status varchar(255), stage2_team_assigned varchar(255), surveillance_audit_status varchar(255))';
    await connection.query(sql);
    console.log("1. Form_Data table created");
    sql = "CREATE TABLE IF NOT EXISTS assigned_recertification_audit_teams (\
        user_id varchar(255),\
        client_id varchar(255),\
        member_id varchar(255),\
        group_chat_google_id varchar(255),\
        personal_chat_google_id varchar(255),\
        `Member Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("2. assigned_recertification_audit_teams table created");
    sql = "CREATE TABLE IF NOT EXISTS assigned_stage1_audit_teams (\
        user_id varchar(255),\
        client_id varchar(255),\
        member_id varchar(255),\
        group_chat_google_id varchar(255),\
        personal_chat_google_id varchar(255),\
        `Member Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("3. assigned_stage1_audit_teams table created");
    sql = "CREATE TABLE IF NOT EXISTS assigned_stage2_audit_teams (\
        user_id varchar(255),\
        client_id varchar(255),\
        member_id varchar(255),\
        group_chat_google_id varchar(255),\
        personal_chat_google_id varchar(255),\
        `Member Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("4. assigned_stage2_audit_teams table created");
    sql = "CREATE TABLE IF NOT EXISTS assigned_surveillance_audit_teams (\
        user_id varchar(255),\
        client_id varchar(255),\
        member_id varchar(255),\
        group_chat_google_id varchar(255),\
        personal_chat_google_id varchar(255),\
        `Member Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("5. assigned_surveillance_audit_teams table created");

    sql = "CREATE TABLE IF NOT EXISTS employees (\
        user_id varchar(255),\
        employee_id varchar(255),\
        `Member Designation` varchar(255),\
        `Member Email` varchar(255),\
        `Member Name` varchar(255),\
        `Member PhoneNumber` varchar(255),\
        password varchar(255),\
        group_chat_google_id varchar(255),\
        personal_chat_google_id varchar(255)\
    )";
    await connection.query(sql);
    console.log("6. employees table created");

    sql = "CREATE TABLE IF NOT EXISTS ho_activities (\
        user_id varchar(255),\
        client_id varchar(255),\
        `HOActivityDescription` varchar(255)\
    )";
    await connection.query(sql);
    console.log("7. ho_activities table created");

    sql = "CREATE TABLE IF NOT EXISTS initial_certification_conclusion (\
        user_id varchar(255),\
        client_id varchar(255),\
        conclusionDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("8. initial_certification_conclusion table created");

    sql = "CREATE TABLE IF NOT EXISTS initial_certification_conclusion_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("9. initial_certification_conclusion_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS quotations (\
        user_id varchar(255),\
        client_id varchar(255),\
        quotation_description varchar(255)\
    )";
    await connection.query(sql);
    console.log("10. quotations table created");

    sql = "CREATE TABLE IF NOT EXISTS quotation_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("11. quotation_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_clients (\
        user_id varchar(255),\
        client_id varchar(255),\
        `Client Name` varchar(255),\
        `Status` varchar(255),\
        `description` varchar(255),\
        recertification_audit_conclusion varchar(255),\
        recertification_audit_conclusion_date varchar(255),\
        recertification_audit_date varchar(255),\
        recertification_audit_plan_date varchar(255),\
        recertification_audit_team_assigned varchar(255),\
        recertification_description varchar(255),\
        recertification_plan_status varchar(255),\
        recertification_plan_task_status varchar(255),\
        recertification_status varchar(255)\
    )";
    await connection.query(sql);
    console.log("12. recertification_audit_clients table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_client_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("13. recertification_audit_client_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_conclusion (\
        user_id varchar(255),\
        client_id varchar(255),\
        conclusionDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("14. recertification_audit_conclusion table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_conclusion_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("15. recertification_audit_conclusion_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_plans (\
        user_id varchar(255),\
        client_id varchar(255),\
        recertificationAuditPlanDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("16. recertification_audit_plans table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_plan_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("17. recertification_audit_plan_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_plan_task_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `Member Assigned` varchar(255),\
        `Task Description` varchar(255),\
        `Task Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("18. recertification_audit_plan_task_list table created");

    sql = "CREATE TABLE IF NOT EXISTS registered_users (\
        id varchar(255),\
        username varchar(255),\
        new_username varchar(255),\
        `password` varchar(255),\
        `new_password` varchar(255),\
        `name` varchar(255),\
        `company_name` varchar(255),\
        `email` varchar(255),\
        `phone_no` varchar(255),\
        `filter_workflow` varchar(255),\
        `subs_expiry_date` varchar(255),\
        `database_export_date_time` varchar(255),\
        `database_import_date_time` varchar(255),\
        `database_delete_date_time` varchar(255)\
    )";
    await connection.query(sql);
    console.log("19. registered_users table created");

    sql = "CREATE TABLE IF NOT EXISTS stage1_audit_plans (\
        user_id varchar(255),\
        client_id varchar(255),\
        stage1PlanDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("20. stage1_audit_plans table created");

    sql = "CREATE TABLE IF NOT EXISTS stage1_audit_plan_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `stage1PlanDescription` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("21. stage1_audit_plan_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS stage1_audit_plan_task_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `Member Assigned` varchar(255),\
        `Task Description` varchar(255),\
        `Task Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("22. stage1_audit_plan_task_list table created");

    sql = "CREATE TABLE IF NOT EXISTS stage1_audit_teams (\
        user_id varchar(255),\
        id varchar(255),\
        `Member Email` varchar(255),\
        `Member Name` varchar(255),\
        `Member PhoneNumber` varchar(255),\
        `password` varchar(255),\
        `group_chat_google_id` varchar(255),\
        `personal_chat_google_id` varchar(255)\
    )";
    await connection.query(sql);
    console.log("23. stage1_audit_teams table created");

    sql = "CREATE TABLE IF NOT EXISTS stage2_audit_plans (\
        user_id varchar(255),\
        client_id varchar(255),\
        stage2PlanDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("24. stage2_audit_plans table created");

    sql = "CREATE TABLE IF NOT EXISTS stage2_audit_plan_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `stage2PlanDescription` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("25. stage2_audit_plan_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS stage2_audit_plan_task_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `Member Assigned` varchar(255),\
        `Task Description` varchar(255),\
        `Task Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("26. stage2_audit_plan_task_list table created");

    sql = "CREATE TABLE IF NOT EXISTS stage2_audit_teams (\
        user_id varchar(255),\
        id varchar(255),\
        `Member Email` varchar(255),\
        `Member Name` varchar(255),\
        `Member PhoneNumber` varchar(255),\
        `password` varchar(255),\
        `group_chat_google_id` varchar(255),\
        `personal_chat_google_id` varchar(255)\
    )";
    await connection.query(sql);
    console.log("27. stage2_audit_teams table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_clients (\
        user_id varchar(255),\
        client_id varchar(255),\
        `Client Name` varchar(255),\
        `Status` varchar(255),\
        `description` varchar(255),\
        surveillance_audit_conclusion varchar(255),\
        surveillance_audit_conclusion_date varchar(255),\
        surveillance_audit_date varchar(255),\
        surveillance_audit_plan_date varchar(255),\
        surveillance_audit_team_assigned varchar(255),\
        surveillance_plan_status varchar(255),\
        surveillance_plan_task_status varchar(255)\
    )";
    await connection.query(sql);
    console.log("28. surveillance_audit_clients table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_conclusion (\
        user_id varchar(255),\
        client_id varchar(255),\
        conclusionDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("29. surveillance_audit_conclusion table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_conclusion_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("30. surveillance_audit_conclusion_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_plans (\
        user_id varchar(255),\
        client_id varchar(255),\
        surveillanceAuditPlanDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("31. surveillance_audit_plans table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_plan_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("32. surveillance_audit_plan_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_plan_task_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `Member Assigned` varchar(255),\
        `Task Description` varchar(255),\
        `Task Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("33. surveillance_audit_plan_task_list table created");

    sql = "CREATE TABLE IF NOT EXISTS initial_certification_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("34. initial_certification_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS ho_activity_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("35. ho_activity_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_client_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("36. surveillance_audit_client_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS inspection_checklist_templates (\
        user_id varchar(255),\
        checklist_id varchar(255),\
        general_fields varchar(255),\
        template_desc varchar(255),\
        template_name varchar(255),\
        min_score varchar(255),\
        max_score varchar(255),\
        statuses varchar(255)\
    )";
    await connection.query(sql);
    console.log("37. inspection_checklist_templates table created");
    //
    sql = "CREATE TABLE IF NOT EXISTS existing_checklist_inspections (\
        user_id varchar(255),\
        checklist_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        audit_type varchar(255),\
        current_responses varchar(255),\
        total_responses varchar(255),\
        revision_id varchar(255),\
        revision_no varchar(255)\
    )";
    await connection.query(sql);
    console.log("38. existing_checklist_inspections table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_reminder_intervals(\
        user_id varchar(255),\
        date_to_implement_from varchar(255),\
        time_to_implement_from varchar(255),\
        interval_weeks varchar(255),\
        interval_months varchar(255),\
        interval_days varchar(255),\
        interval_hours varchar(255),\
        interval_minutes varchar(255),\
        interval_seconds varchar(255),\
        include_time varchar(255),\
        to_whom varchar(255),\
        accreditation_board_email varchar(255)\
    )";
    await connection.query(sql);
    console.log("39. surveillance_audit_reminder_intervals table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_reminder_fixed(\
        user_id varchar(255),\
        date_to_implement_from varchar(255),\
        time_to_implement_from varchar(255),\
        on_every_date_day varchar(255),\
        on_every_date_month varchar(255),\
        on_every_day_of_week varchar(255),\
        on_every_hour varchar(255),\
        on_every_minute varchar(255),\
        on_every_second varchar(255),\
        include_time varchar(255),\
        execution_done varchar(255),\
        to_whom varchar(255),\
        accreditation_board_email varchar(255)\
    )";
    await connection.query(sql);
    console.log("40. surveillance_audit_reminder_fixed table created");

    sql = "CREATE TABLE IF NOT EXISTS stage1_audit_plan_attendance_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        checklist_id varchar(255),\
        template_name varchar(255),\
        attendance_id varchar(255),\
        member_id varchar(255),\
        `Member Name` varchar(255),\
        `Work Description` varchar(255),\
        address varchar(255),\
        latitude varchar(255),\
        longitude varchar(255),\
        audit_status varchar(255),\
        attendance_status varchar(255),\
        attendance_latitude varchar(255),\
        attendance_longitude varchar(255),\
        cur_latitude varchar(255),\
        cur_longitude varchar(255),\
        attendance_date varchar(255),\
        attendance_time varchar(255)\
    )";
    await connection.query(sql);
    console.log("41. stage1_audit_plan_attendance_list table created");

    sql = "CREATE TABLE IF NOT EXISTS stage2_audit_plan_attendance_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        checklist_id varchar(255),\
        template_name varchar(255),\
        attendance_id varchar(255),\
        member_id varchar(255),\
        `Member Name` varchar(255),\
        `Work Description` varchar(255),\
        address varchar(255),\
        latitude varchar(255),\
        longitude varchar(255),\
        audit_status varchar(255),\
        attendance_status varchar(255),\
        attendance_latitude varchar(255),\
        attendance_longitude varchar(255),\
        cur_latitude varchar(255),\
        cur_longitude varchar(255),\
        attendance_date varchar(255),\
        attendance_time varchar(255)\
    )";
    await connection.query(sql);
    console.log("42. stage2_audit_plan_attendance_list table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_plan_attendance_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        checklist_id varchar(255),\
        template_name varchar(255),\
        attendance_id varchar(255),\
        member_id varchar(255),\
        `Member Name` varchar(255),\
        `Work Description` varchar(255),\
        address varchar(255),\
        latitude varchar(255),\
        longitude varchar(255),\
        audit_status varchar(255),\
        attendance_status varchar(255),\
        attendance_latitude varchar(255),\
        attendance_longitude varchar(255),\
        cur_latitude varchar(255),\
        cur_longitude varchar(255),\
        attendance_date varchar(255),\
        attendance_time varchar(255)\
    )";
    await connection.query(sql);
    console.log("43. surveillance_audit_plan_attendance_list table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_plan_attendance_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        checklist_id varchar(255),\
        template_name varchar(255),\
        attendance_id varchar(255),\
        member_id varchar(255),\
        `Member Name` varchar(255),\
        `Work Description` varchar(255),\
        address varchar(255),\
        latitude varchar(255),\
        longitude varchar(255),\
        audit_status varchar(255),\
        attendance_status varchar(255),\
        attendance_latitude varchar(255),\
        attendance_longitude varchar(255),\
        cur_latitude varchar(255),\
        cur_longitude varchar(255),\
        attendance_date varchar(255),\
        attendance_time varchar(255)\
    )";
    await connection.query(sql);
    console.log("44. surveillance_audit_plan_attendance_list table created");

    sql = "CREATE TABLE IF NOT EXISTS attendance_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        attendance_id varchar(255),\
        audit_type varchar(255),\
        `date` varchar(255),\
        `time` varchar(255)\
    )";
    await connection.query(sql);
    console.log("45. attendance_list table created");

    sql = "CREATE TABLE IF NOT EXISTS accreditation_board_credentials (\
        user_id varchar(255),\
        username varchar(255),\
        default_password varchar(255),\
        password varchar(255)\
    )";
    await connection.query(sql);
    console.log("46. accreditation_board_credentials table created");

    sql = "CREATE TABLE IF NOT EXISTS columns_to_filter_for_ab (\
        user_id varchar(255),\
        table_name varchar(255),\
        to_be_shown varchar(255),\
        `table_type` varchar(255),\
        filter_value varchar(255)\
    )";
    await connection.query(sql);
    console.log("47. columns_to_filter_for_ab table created");

    sql = "CREATE TABLE IF NOT EXISTS incomplete_file_upload_cleanup (\
        user_id varchar(255),\
        client_id varchar(255),\
        category varchar(255),\
        delete_or_not varchar(255),\
        deleted_from_database_or_not varchar(255),\
        dirpath varchar(255)\
    )";
    
    await connection.query(sql);
    console.log("48. incomplete_file_upload_cleanup table created");

    sql = "CREATE TABLE IF NOT EXISTS paid_plan_clients_info (\
        customer_id varchar(255),\
        company_name varchar(255),\
        company_address_line_1 varchar(255),\
        company_address_line_2 varchar(255),\
        town_or_city varchar(255),\
        state varchar(255),\
        pincode varchar(255),\
        phno varchar(255),\
        company_email varchar(255),\
        plan_name varchar(255),\
        plan_price varchar(255),\
        invoice_status varchar(255)\
    )";
    
    await connection.query(sql);
    console.log("49. paid_plan_clients_info table created");
    // var tables = [
    //     "accreditation_board_credentials",
    //     "assigned_recertification_audit_teams",
    //     "assigned_stage1_audit_teams",
    //     "assigned_stage2_audit_teams",
    //     "assigned_surveillance_audit_teams",
    //     "attendance_list",
    //     "columns_to_filter_for_ab",
    //     "employees",
    //     "existing_checklist_inspections",
    //     "Form_Data",
    //     "ho_activities",
    //     "ho_activity_logs",
    //     "initial_certification_conclusion",
    //     "initial_certification_conclusion_logs",
    //     "initial_certification_logs",
    //     "inspection_checklist_templates",
    //     "quotation_logs",
    //     "quotations",
    //     "recertification_audit_client_logs",
    //     "recertification_audit_clients",
    //     "recertification_audit_conclusion",
    //     "recertification_audit_conclusion_logs",
    //     "recertification_audit_plan_attendance_list",
    //     "recertification_audit_plan_logs",
    //     "recertification_audit_plan_task_list",
    //     "recertification_audit_plans",
    //     "registered_users",
    //     "stage1_audit_plan_attendance_list",
    //     "stage1_audit_plan_logs",
    //     "stage1_audit_plan_task_list",
    //     "stage1_audit_plans",
    //     "stage1_audit_teams",
    //     "stage2_audit_plan_attendance_list",
    //     "stage2_audit_plan_logs",
    //     "stage2_audit_plan_task_list",
    //     "stage2_audit_plans",
    //     "stage2_audit_teams",
    //     "surveillance_audit_client_logs",
    //     "surveillance_audit_clients",
    //     "surveillance_audit_conclusion",
    //     "surveillance_audit_conclusion_logs",
    //     "surveillance_audit_plan_attendance_list",
    //     "surveillance_audit_plan_logs",
    //     "surveillance_audit_plan_task_list",
    //     "surveillance_audit_plans",
    //     "surveillance_audit_reminder_fixed",
    //     "surveillance_audit_reminder_intervals"
    // ]
    var tables = [
        "accreditation_board_credentials",
        "assigned_recertification_audit_teams",
        "assigned_stage1_audit_teams",
        "assigned_stage2_audit_teams",
        "assigned_surveillance_audit_teams",
        "attendance_list",
        "columns_to_filter_for_ab",
        "employees",
        "existing_checklist_inspections",
        "Form_Data",
        "ho_activities",
        "ho_activity_logs",
        "initial_certification_conclusion",
        "initial_certification_conclusion_logs",
        "initial_certification_logs",
        "inspection_checklist_templates",
        "quotation_logs",
        "quotations",
        "recertification_audit_client_logs",
        "recertification_audit_clients",
        "recertification_audit_conclusion",
        "recertification_audit_conclusion_logs",
        "recertification_audit_plan_attendance_list",
        "recertification_audit_plan_logs",
        "recertification_audit_plan_task_list",
        "recertification_audit_plans",
        //"registered_users",
        "stage1_audit_plan_attendance_list",
        "stage1_audit_plan_logs",
        "stage1_audit_plan_task_list",
        "stage1_audit_plans",
        "stage1_audit_teams",
        "stage2_audit_plan_attendance_list",
        "stage2_audit_plan_logs",
        "stage2_audit_plan_task_list",
        "stage2_audit_plans",
        "stage2_audit_teams",
        "surveillance_audit_client_logs",
        "surveillance_audit_clients",
        "surveillance_audit_conclusion",
        "surveillance_audit_conclusion_logs",
        "surveillance_audit_plan_attendance_list",
        "surveillance_audit_plan_logs",
        "surveillance_audit_plan_task_list",
        "surveillance_audit_plans",
        "surveillance_audit_reminder_fixed",
        "surveillance_audit_reminder_intervals"
    ]
    for (var intIdx = 0; intIdx < tables.length; intIdx++)
    {
        var sql = "DELETE FROM " + tables[intIdx] + " WHERE user_id = '" + req.body['userid'] + "' OR user_id = ''";
        await connection.query(sql);
        console.log((intIdx + 1) + ". " + tables[intIdx] + " table truncated");
    }
    //res.send("Done");
    const fs = require('fs');
    var request = require('request');
    const path = require('path');
    const mainDirPath = path.join(__dirname, '/');
    var download = function (url, dest, callback) {
        request
          .get(url)
          .on('error', function (err) {
            console.log(err);
          })
          .pipe(fs.createWriteStream(dest))
          .on('close', callback);
    };
    const downloadFile = () => {
        return new Promise((resolve, reject)=>{
            download("https://cwac.in/softwares_apps/quest_global_mcs/audit_software/database_backups/" + req.body['userid'] + "/database_backup.xlsx", mainDirPath + req.body['userid'] + "_database_backup.xlsx", async function () {
                return resolve(true);
            });
        });
    };
    const QueryData = (query) => {
        return new Promise((resolve, reject)=>{
            connection.query(query,  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    var initTodayDate = new Date();
    var idd = String(initTodayDate.getDate()).padStart(2, '0');
    var imm = String(initTodayDate.getMonth() + 1).padStart(2, '0'); //January is 0!
    var iyyyy = initTodayDate.getFullYear();
    var ihh = String(initTodayDate.getHours()).padStart(2, '0');
    var imins = String(initTodayDate.getMinutes()).padStart(2, '0');
    var iss = String(initTodayDate.getSeconds()).padStart(2, '0');
    await QueryData("UPDATE registered_users SET database_import_date_time = '" + idd + "-" + NoToMonth[parseInt(imm - 1)] + "-" + iyyyy + ";" + ihh + ":" + imins + ":" + iss + "' WHERE id = '" + req.body['userid'] + "'");
    //if (req.body['intIdx'] == 0)
    await downloadFile();
    }
    const InsertData = (query) =>{
        return new Promise((resolve, reject)=>{
            connection.query(query,  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    const mainDirPath = path.join(__dirname, '/');
    const readXlsxFile = require('read-excel-file/node')
    const ReadExcel = (intIdx) =>{
        return new Promise((resolve, reject)=>{
            readXlsxFile(mainDirPath + req.body['userid'] + "_database_backup.xlsx", { sheet: intIdx + 1 }).then(async (rows) => {
                for (var intIIdx = 2; intIIdx < rows.length; intIIdx++)
                {
                    var queryString = "INSERT INTO " + req.body['tableName'] + " VALUES ('";
                    for (var intIIIdx = 0; intIIIdx < rows[intIIdx].length - 1; intIIIdx++)
                    {
                        queryString = queryString + (rows[intIIdx][intIIIdx] == "null" || rows[intIIdx][intIIIdx] == null ? "" : rows[intIIdx][intIIIdx].replaceAll("'", "\\'").replaceAll(".. ", "\\n").replaceAll("<<SPC>>", " ").replaceAll("<<UNDS>>", "_").replaceAll('<<DBLQT>>', '"')) + "', '";
                    }
                    queryString = queryString + (rows[intIIdx][rows[intIIdx].length - 1] == "null" || rows[intIIdx][rows[intIIdx].length - 1] == null ? "" : rows[intIIdx][rows[intIIdx].length - 1].replaceAll("'", "\\'").replaceAll(".. ", "\\n").replaceAll("<<SPC>>", " ").replaceAll("<<UNDS>>", "_").replaceAll('<<DBLQT>>', '"')) + "')";
                    await InsertData(queryString);
                }
                resolve("done");
            })
        });
    };
    //for (var intIdx = 1; intIdx <= 47; intIdx++)
    //{
        await ReadExcel(req.body['intIdx']);
        //console.log("Progress: " + intIdx + "/47");
    //}
    connection.end();
    res.send("Done");
    });
})
app.post("/import_database", (req, res) => {
    var mysql = require('mysql');
    var connection = mysql.createConnection({
    host     : DBENDPOINT,
    user     : "admin",
    password : "qwertyui",
    port     : "3306",
    database : "mydb"
    });

    connection.connect(async function(err) {
    if (err) {
        //console.error('Database connection failed: ' + err.stack);
        res.send(err.stack);
        connection.end();
        return;
    }

    //console.log('Connected to database.');
    //res.send('Connected to database.')
    var sql = 'CREATE TABLE IF NOT EXISTS Form_Data ( user_id varchar(255), client_id varchar(255), Approved varchar(255), `Client Name` varchar(255), HO_activity_date varchar(255), HO_activity_status varchar(255), assignedToWhom varchar(255), date varchar(255), description varchar(255), email varchar(255), initial_certification_conclusion varchar(255), initial_certification_conclusion_date varchar(255), phone varchar(255), quotation_date varchar(255), quotation_status varchar(255), stage1_plan_date varchar(255), stage1_plan_status varchar(255), stage1_plan_task_date varchar(255), stage1_plan_task_status varchar(255), stage1_team_assigned varchar(255), stage2_plan_date varchar(255), stage2_plan_status varchar(255), stage2_plan_task_date varchar(255), stage2_plan_task_status varchar(255), stage2_team_assigned varchar(255), surveillance_audit_status varchar(255))';
    await connection.query(sql);
    console.log("1. Form_Data table created");
    sql = "CREATE TABLE IF NOT EXISTS assigned_recertification_audit_teams (\
        user_id varchar(255),\
        client_id varchar(255),\
        member_id varchar(255),\
        group_chat_google_id varchar(255),\
        personal_chat_google_id varchar(255),\
        `Member Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("2. assigned_recertification_audit_teams table created");
    sql = "CREATE TABLE IF NOT EXISTS assigned_stage1_audit_teams (\
        user_id varchar(255),\
        client_id varchar(255),\
        member_id varchar(255),\
        group_chat_google_id varchar(255),\
        personal_chat_google_id varchar(255),\
        `Member Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("3. assigned_stage1_audit_teams table created");
    sql = "CREATE TABLE IF NOT EXISTS assigned_stage2_audit_teams (\
        user_id varchar(255),\
        client_id varchar(255),\
        member_id varchar(255),\
        group_chat_google_id varchar(255),\
        personal_chat_google_id varchar(255),\
        `Member Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("4. assigned_stage2_audit_teams table created");
    sql = "CREATE TABLE IF NOT EXISTS assigned_surveillance_audit_teams (\
        user_id varchar(255),\
        client_id varchar(255),\
        member_id varchar(255),\
        group_chat_google_id varchar(255),\
        personal_chat_google_id varchar(255),\
        `Member Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("5. assigned_surveillance_audit_teams table created");

    sql = "CREATE TABLE IF NOT EXISTS employees (\
        user_id varchar(255),\
        employee_id varchar(255),\
        `Member Designation` varchar(255),\
        `Member Email` varchar(255),\
        `Member Name` varchar(255),\
        `Member PhoneNumber` varchar(255),\
        password varchar(255),\
        group_chat_google_id varchar(255),\
        personal_chat_google_id varchar(255)\
    )";
    await connection.query(sql);
    console.log("6. employees table created");

    sql = "CREATE TABLE IF NOT EXISTS ho_activities (\
        user_id varchar(255),\
        client_id varchar(255),\
        `HOActivityDescription` varchar(255)\
    )";
    await connection.query(sql);
    console.log("7. ho_activities table created");

    sql = "CREATE TABLE IF NOT EXISTS initial_certification_conclusion (\
        user_id varchar(255),\
        client_id varchar(255),\
        conclusionDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("8. initial_certification_conclusion table created");

    sql = "CREATE TABLE IF NOT EXISTS initial_certification_conclusion_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("9. initial_certification_conclusion_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS quotations (\
        user_id varchar(255),\
        client_id varchar(255),\
        quotation_description varchar(255)\
    )";
    await connection.query(sql);
    console.log("10. quotations table created");

    sql = "CREATE TABLE IF NOT EXISTS quotation_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("11. quotation_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_clients (\
        user_id varchar(255),\
        client_id varchar(255),\
        `Client Name` varchar(255),\
        `Status` varchar(255),\
        `description` varchar(255),\
        recertification_audit_conclusion varchar(255),\
        recertification_audit_conclusion_date varchar(255),\
        recertification_audit_date varchar(255),\
        recertification_audit_plan_date varchar(255),\
        recertification_audit_team_assigned varchar(255),\
        recertification_description varchar(255),\
        recertification_plan_status varchar(255),\
        recertification_plan_task_status varchar(255),\
        recertification_status varchar(255)\
    )";
    await connection.query(sql);
    console.log("12. recertification_audit_clients table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_client_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("13. recertification_audit_client_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_conclusion (\
        user_id varchar(255),\
        client_id varchar(255),\
        conclusionDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("14. recertification_audit_conclusion table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_conclusion_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("15. recertification_audit_conclusion_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_plans (\
        user_id varchar(255),\
        client_id varchar(255),\
        recertificationAuditPlanDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("16. recertification_audit_plans table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_plan_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("17. recertification_audit_plan_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_plan_task_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `Member Assigned` varchar(255),\
        `Task Description` varchar(255),\
        `Task Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("18. recertification_audit_plan_task_list table created");

    sql = "CREATE TABLE IF NOT EXISTS registered_users (\
        id varchar(255),\
        username varchar(255),\
        new_username varchar(255),\
        `password` varchar(255),\
        `new_password` varchar(255),\
        `name` varchar(255),\
        `company_name` varchar(255),\
        `email` varchar(255),\
        `phone_no` varchar(255),\
        `filter_workflow` varchar(255),\
        `subs_expiry_date` varchar(255),\
        `database_export_date_time` varchar(255),\
        `database_import_date_time` varchar(255),\
        `database_delete_date_time` varchar(255)\
    )";
    await connection.query(sql);
    console.log("19. registered_users table created");

    sql = "CREATE TABLE IF NOT EXISTS stage1_audit_plans (\
        user_id varchar(255),\
        client_id varchar(255),\
        stage1PlanDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("20. stage1_audit_plans table created");

    sql = "CREATE TABLE IF NOT EXISTS stage1_audit_plan_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `stage1PlanDescription` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("21. stage1_audit_plan_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS stage1_audit_plan_task_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `Member Assigned` varchar(255),\
        `Task Description` varchar(255),\
        `Task Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("22. stage1_audit_plan_task_list table created");

    sql = "CREATE TABLE IF NOT EXISTS stage1_audit_teams (\
        user_id varchar(255),\
        id varchar(255),\
        `Member Email` varchar(255),\
        `Member Name` varchar(255),\
        `Member PhoneNumber` varchar(255),\
        `password` varchar(255),\
        `group_chat_google_id` varchar(255),\
        `personal_chat_google_id` varchar(255)\
    )";
    await connection.query(sql);
    console.log("23. stage1_audit_teams table created");

    sql = "CREATE TABLE IF NOT EXISTS stage2_audit_plans (\
        user_id varchar(255),\
        client_id varchar(255),\
        stage2PlanDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("24. stage2_audit_plans table created");

    sql = "CREATE TABLE IF NOT EXISTS stage2_audit_plan_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `stage2PlanDescription` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("25. stage2_audit_plan_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS stage2_audit_plan_task_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `Member Assigned` varchar(255),\
        `Task Description` varchar(255),\
        `Task Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("26. stage2_audit_plan_task_list table created");

    sql = "CREATE TABLE IF NOT EXISTS stage2_audit_teams (\
        user_id varchar(255),\
        id varchar(255),\
        `Member Email` varchar(255),\
        `Member Name` varchar(255),\
        `Member PhoneNumber` varchar(255),\
        `password` varchar(255),\
        `group_chat_google_id` varchar(255),\
        `personal_chat_google_id` varchar(255)\
    )";
    await connection.query(sql);
    console.log("27. stage2_audit_teams table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_clients (\
        user_id varchar(255),\
        client_id varchar(255),\
        `Client Name` varchar(255),\
        `Status` varchar(255),\
        `description` varchar(255),\
        surveillance_audit_conclusion varchar(255),\
        surveillance_audit_conclusion_date varchar(255),\
        surveillance_audit_date varchar(255),\
        surveillance_audit_plan_date varchar(255),\
        surveillance_audit_team_assigned varchar(255),\
        surveillance_plan_status varchar(255),\
        surveillance_plan_task_status varchar(255)\
    )";
    await connection.query(sql);
    console.log("28. surveillance_audit_clients table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_conclusion (\
        user_id varchar(255),\
        client_id varchar(255),\
        conclusionDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("29. surveillance_audit_conclusion table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_conclusion_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("30. surveillance_audit_conclusion_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_plans (\
        user_id varchar(255),\
        client_id varchar(255),\
        surveillanceAuditPlanDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("31. surveillance_audit_plans table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_plan_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("32. surveillance_audit_plan_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_plan_task_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `Member Assigned` varchar(255),\
        `Task Description` varchar(255),\
        `Task Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("33. surveillance_audit_plan_task_list table created");

    sql = "CREATE TABLE IF NOT EXISTS initial_certification_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("34. initial_certification_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS ho_activity_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("35. ho_activity_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_client_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("36. surveillance_audit_client_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS inspection_checklist_templates (\
        user_id varchar(255),\
        checklist_id varchar(255),\
        general_fields varchar(255),\
        template_desc varchar(255),\
        template_name varchar(255),\
        min_score varchar(255),\
        max_score varchar(255),\
        statuses varchar(255)\
    )";
    await connection.query(sql);
    console.log("37. inspection_checklist_templates table created");
    //
    sql = "CREATE TABLE IF NOT EXISTS existing_checklist_inspections (\
        user_id varchar(255),\
        checklist_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        audit_type varchar(255),\
        current_responses varchar(255),\
        total_responses varchar(255),\
        revision_id varchar(255),\
        revision_no varchar(255)\
    )";
    await connection.query(sql);
    console.log("38. existing_checklist_inspections table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_reminder_intervals(\
        user_id varchar(255),\
        date_to_implement_from varchar(255),\
        time_to_implement_from varchar(255),\
        interval_weeks varchar(255),\
        interval_months varchar(255),\
        interval_days varchar(255),\
        interval_hours varchar(255),\
        interval_minutes varchar(255),\
        interval_seconds varchar(255),\
        include_time varchar(255),\
        to_whom varchar(255),\
        accreditation_board_email varchar(255)\
    )";
    await connection.query(sql);
    console.log("39. surveillance_audit_reminder_intervals table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_reminder_fixed(\
        user_id varchar(255),\
        date_to_implement_from varchar(255),\
        time_to_implement_from varchar(255),\
        on_every_date_day varchar(255),\
        on_every_date_month varchar(255),\
        on_every_day_of_week varchar(255),\
        on_every_hour varchar(255),\
        on_every_minute varchar(255),\
        on_every_second varchar(255),\
        include_time varchar(255),\
        execution_done varchar(255),\
        to_whom varchar(255),\
        accreditation_board_email varchar(255)\
    )";
    await connection.query(sql);
    console.log("40. surveillance_audit_reminder_fixed table created");

    sql = "CREATE TABLE IF NOT EXISTS stage1_audit_plan_attendance_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        checklist_id varchar(255),\
        template_name varchar(255),\
        attendance_id varchar(255),\
        member_id varchar(255),\
        `Member Name` varchar(255),\
        `Work Description` varchar(255),\
        address varchar(255),\
        latitude varchar(255),\
        longitude varchar(255),\
        audit_status varchar(255),\
        attendance_status varchar(255),\
        attendance_latitude varchar(255),\
        attendance_longitude varchar(255),\
        cur_latitude varchar(255),\
        cur_longitude varchar(255),\
        attendance_date varchar(255),\
        attendance_time varchar(255)\
    )";
    await connection.query(sql);
    console.log("41. stage1_audit_plan_attendance_list table created");

    sql = "CREATE TABLE IF NOT EXISTS stage2_audit_plan_attendance_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        checklist_id varchar(255),\
        template_name varchar(255),\
        attendance_id varchar(255),\
        member_id varchar(255),\
        `Member Name` varchar(255),\
        `Work Description` varchar(255),\
        address varchar(255),\
        latitude varchar(255),\
        longitude varchar(255),\
        audit_status varchar(255),\
        attendance_status varchar(255),\
        attendance_latitude varchar(255),\
        attendance_longitude varchar(255),\
        cur_latitude varchar(255),\
        cur_longitude varchar(255),\
        attendance_date varchar(255),\
        attendance_time varchar(255)\
    )";
    await connection.query(sql);
    console.log("42. stage2_audit_plan_attendance_list table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_plan_attendance_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        checklist_id varchar(255),\
        template_name varchar(255),\
        attendance_id varchar(255),\
        member_id varchar(255),\
        `Member Name` varchar(255),\
        `Work Description` varchar(255),\
        address varchar(255),\
        latitude varchar(255),\
        longitude varchar(255),\
        audit_status varchar(255),\
        attendance_status varchar(255),\
        attendance_latitude varchar(255),\
        attendance_longitude varchar(255),\
        cur_latitude varchar(255),\
        cur_longitude varchar(255),\
        attendance_date varchar(255),\
        attendance_time varchar(255)\
    )";
    await connection.query(sql);
    console.log("43. surveillance_audit_plan_attendance_list table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_plan_attendance_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        checklist_id varchar(255),\
        template_name varchar(255),\
        attendance_id varchar(255),\
        member_id varchar(255),\
        `Member Name` varchar(255),\
        `Work Description` varchar(255),\
        address varchar(255),\
        latitude varchar(255),\
        longitude varchar(255),\
        audit_status varchar(255),\
        attendance_status varchar(255),\
        attendance_latitude varchar(255),\
        attendance_longitude varchar(255),\
        cur_latitude varchar(255),\
        cur_longitude varchar(255),\
        attendance_date varchar(255),\
        attendance_time varchar(255)\
    )";
    await connection.query(sql);
    console.log("44. surveillance_audit_plan_attendance_list table created");

    sql = "CREATE TABLE IF NOT EXISTS attendance_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        attendance_id varchar(255),\
        audit_type varchar(255),\
        `date` varchar(255),\
        `time` varchar(255)\
    )";
    await connection.query(sql);
    console.log("45. attendance_list table created");

    sql = "CREATE TABLE IF NOT EXISTS accreditation_board_credentials (\
        user_id varchar(255),\
        username varchar(255),\
        default_password varchar(255),\
        password varchar(255)\
    )";
    await connection.query(sql);
    console.log("46. accreditation_board_credentials table created");

    sql = "CREATE TABLE IF NOT EXISTS columns_to_filter_for_ab (\
        user_id varchar(255),\
        table_name varchar(255),\
        to_be_shown varchar(255),\
        `table_type` varchar(255),\
        filter_value varchar(255)\
    )";
    await connection.query(sql);
    console.log("47. columns_to_filter_for_ab table created");

    sql = "CREATE TABLE IF NOT EXISTS incomplete_file_upload_cleanup (\
        user_id varchar(255),\
        client_id varchar(255),\
        category varchar(255),\
        delete_or_not varchar(255),\
        deleted_from_database_or_not varchar(255),\
        dirpath varchar(255)\
    )";
    
    await connection.query(sql);
    console.log("48. incomplete_file_upload_cleanup table created");

    sql = "CREATE TABLE IF NOT EXISTS paid_plan_clients_info (\
        customer_id varchar(255),\
        company_name varchar(255),\
        company_address_line_1 varchar(255),\
        company_address_line_2 varchar(255),\
        town_or_city varchar(255),\
        state varchar(255),\
        pincode varchar(255),\
        phno varchar(255),\
        company_email varchar(255),\
        plan_name varchar(255),\
        plan_price varchar(255),\
        invoice_status varchar(255)\
    )";
    
    await connection.query(sql);
    console.log("49. paid_plan_clients_info table created");
    var tables = [
        "accreditation_board_credentials",
        "assigned_recertification_audit_teams",
        "assigned_stage1_audit_teams",
        "assigned_stage2_audit_teams",
        "assigned_surveillance_audit_teams",
        "attendance_list",
        "columns_to_filter_for_ab",
        "employees",
        "existing_checklist_inspections",
        "Form_Data",
        "ho_activities",
        "ho_activity_logs",
        "initial_certification_conclusion",
        "initial_certification_conclusion_logs",
        "initial_certification_logs",
        "inspection_checklist_templates",
        "quotation_logs",
        "quotations",
        "recertification_audit_client_logs",
        "recertification_audit_clients",
        "recertification_audit_conclusion",
        "recertification_audit_conclusion_logs",
        "recertification_audit_plan_attendance_list",
        "recertification_audit_plan_logs",
        "recertification_audit_plan_task_list",
        "recertification_audit_plans",
        "registered_users",
        "stage1_audit_plan_attendance_list",
        "stage1_audit_plan_logs",
        "stage1_audit_plan_task_list",
        "stage1_audit_plans",
        "stage1_audit_teams",
        "stage2_audit_plan_attendance_list",
        "stage2_audit_plan_logs",
        "stage2_audit_plan_task_list",
        "stage2_audit_plans",
        "stage2_audit_teams",
        "surveillance_audit_client_logs",
        "surveillance_audit_clients",
        "surveillance_audit_conclusion",
        "surveillance_audit_conclusion_logs",
        "surveillance_audit_plan_attendance_list",
        "surveillance_audit_plan_logs",
        "surveillance_audit_plan_task_list",
        "surveillance_audit_plans",
        "surveillance_audit_reminder_fixed",
        "surveillance_audit_reminder_intervals",
        "incomplete_file_upload_cleanup"
    ]
    const fs = require('fs');
    var request = require('request');
    const path = require('path');
    const mainDirPath = path.join(__dirname, '/');
    var download = function (url, dest, callback) {
        request
          .get(url)
          .on('error', function (err) {
            console.log(err);
          })
          .pipe(fs.createWriteStream(dest))
          .on('close', callback);
    };
    const downloadFile = () => {
        return new Promise((resolve, reject)=>{
            download("https://cwac.in/softwares_apps/quest_global_mcs/audit_software/database_backups/" + req.body['userid'] + "/database_backup.xlsx", mainDirPath + req.body['userid'] + "_database_backup.xlsx", async function () {
                return resolve(true);
            });
        });
    };
    //if (req.body['intIdx'] == 0)
    await downloadFile();
    const InsertData = (query) =>{
        return new Promise((resolve, reject)=>{
            connection.query(query,  (error, results)=>{
                if(error){
                    return reject(error);
                }
                return resolve(results);
            });
        });
    };
    const readXlsxFile = require('read-excel-file/node')
    const ReadExcel = (intIdx) =>{
        return new Promise((resolve, reject)=>{
            readXlsxFile(mainDirPath + req.body['userid'] + "_database_backup.xlsx", { sheet: intIdx }).then(async (rows) => {
                for (var intIIdx = 2; intIIdx < rows.length; intIIdx++)
                {
                    var queryString = "INSERT INTO " + tables[req.body['intIdx'] - 1] + " VALUES ('";
                    for (var intIIIdx = 0; intIIIdx < rows[intIIdx].length - 1; intIIIdx++)
                    {
                        queryString = queryString + (rows[intIIdx][intIIIdx] == "null" || rows[intIIdx][intIIIdx] == null ? "" : rows[intIIdx][intIIIdx].replaceAll("'", "\\'")) + "', '";
                    }
                    queryString = queryString + (rows[intIIdx][rows[intIIdx].length - 1] == "null" || rows[intIIdx][rows[intIIdx].length - 1] == null ? "" : rows[intIIdx][rows[intIIdx].length - 1].replaceAll("'", "\\'")) + "')";
                    await InsertData(queryString);
                }
                resolve("done");
            })
        });
    };
    for (var intIdx = 1; intIdx <= 47; intIdx++)
    {
        await ReadExcel(intIdx);
        console.log("Progress: " + intIdx + "/47");
    }
    connection.end();
    res.send("Database imported successfully");
    });
})
app.get("/abc", (req, res) => {
    const readXlsxFile = require('read-excel-file/node')
    // File path.
    readXlsxFile('a.xlsx', { sheet: 2 }).then((rows) => {
        console.log(rows);
        res.send(rows);
        // //var lstPinCodes = rows.map(row => row[1]);
        // var resList = rows.filter((row, idx) => {if (idx != 0) return row});
        // resList = resList.map(row => {
        //     return {"scope": row[0], "ea_code": row[1], "nace_code": row[2]}
        // });
        // //res.send({"pincodes": lstPinCodes})
        // console.log({"data": resList});
        // res.send({"data": resList})
    })
})
app.get("/aws_rds_create_app_tables_v1", (req, res) => {
    var mysql = require('mysql');
    var connection = mysql.createConnection({
    host     : DBENDPOINT,
    user     : "admin",
    password : "qwertyui",
    port     : "3306",
    database : "mydb"
    });

    connection.connect(async function(err) {
    if (err) {
        //console.error('Database connection failed: ' + err.stack);
        res.send(err.stack);
        connection.end();
        return;
    }

    //console.log('Connected to database.');
    //res.send('Connected to database.')
    var sql = 'CREATE TABLE IF NOT EXISTS Form_Data ( user_id varchar(255), client_id varchar(255), Approved varchar(255), `Client Name` varchar(255), HO_activity_date varchar(255), HO_activity_status varchar(255), assignedToWhom varchar(255), date varchar(255), description varchar(255), email varchar(255), initial_certification_conclusion varchar(255), initial_certification_conclusion_date varchar(255), phone varchar(255), quotation_date varchar(255), quotation_status varchar(255), stage1_plan_date varchar(255), stage1_plan_status varchar(255), stage1_plan_task_date varchar(255), stage1_plan_task_status varchar(255), stage1_team_assigned varchar(255), stage2_plan_date varchar(255), stage2_plan_status varchar(255), stage2_plan_task_date varchar(255), stage2_plan_task_status varchar(255), stage2_team_assigned varchar(255), surveillance_audit_status varchar(255))';
    await connection.query(sql);
    console.log("1. Form_Data table created");
    sql = "CREATE TABLE IF NOT EXISTS assigned_recertification_audit_teams (\
        user_id varchar(255),\
        client_id varchar(255),\
        `Member Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("2. assigned_recertification_audit_teams table created");
    sql = "CREATE TABLE IF NOT EXISTS assigned_stage1_audit_teams (\
        user_id varchar(255),\
        client_id varchar(255),\
        member_id varchar(255),\
        group_chat_google_id varchar(255),\
        personal_chat_google_id varchar(255),\
        `Member Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("3. assigned_stage1_audit_teams table created");
    sql = "CREATE TABLE IF NOT EXISTS assigned_stage2_audit_teams (\
        user_id varchar(255),\
        client_id varchar(255),\
        member_id varchar(255),\
        group_chat_google_id varchar(255),\
        personal_chat_google_id varchar(255),\
        `Member Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("4. assigned_stage2_audit_teams table created");
    sql = "CREATE TABLE IF NOT EXISTS assigned_surveillance_audit_teams (\
        user_id varchar(255),\
        client_id varchar(255),\
        member_id varchar(255),\
        group_chat_google_id varchar(255),\
        personal_chat_google_id varchar(255),\
        `Member Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("5. assigned_surveillance_audit_teams table created");

    sql = "CREATE TABLE IF NOT EXISTS employees (\
        user_id varchar(255),\
        employee_id varchar(255),\
        `Member Designation` varchar(255),\
        `Member Email` varchar(255),\
        `Member Name` varchar(255),\
        `Member PhoneNumber` varchar(255)\
    )";
    await connection.query(sql);
    console.log("6. employees table created");

    sql = "CREATE TABLE IF NOT EXISTS ho_activities (\
        user_id varchar(255),\
        client_id varchar(255),\
        `HOActivityDescription` varchar(255)\
    )";
    await connection.query(sql);
    console.log("7. ho_activities table created");

    sql = "CREATE TABLE IF NOT EXISTS initial_certification_conclusion (\
        user_id varchar(255),\
        client_id varchar(255),\
        conclusionDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("8. initial_certification_conclusion table created");

    sql = "CREATE TABLE IF NOT EXISTS initial_certification_conclusion_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("9. initial_certification_conclusion_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS quotations (\
        user_id varchar(255),\
        client_id varchar(255),\
        quotation_description varchar(255)\
    )";
    await connection.query(sql);
    console.log("10. quotations table created");

    sql = "CREATE TABLE IF NOT EXISTS quotation_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("11. quotation_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_clients (\
        user_id varchar(255),\
        client_id varchar(255),\
        `Client Name` varchar(255),\
        `Status` varchar(255),\
        `description` varchar(255),\
        recertification_audit_conclusion varchar(255),\
        recertification_audit_conclusion_date varchar(255),\
        recertification_audit_date varchar(255),\
        recertification_audit_plan_date varchar(255),\
        recertification_audit_team_assigned varchar(255),\
        recertification_description varchar(255),\
        recertification_plan_status varchar(255),\
        recertification_plan_task_status varchar(255),\
        recertification_status varchar(255)\
    )";
    await connection.query(sql);
    console.log("12. recertification_audit_clients table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_client_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("13. recertification_audit_client_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_conclusion (\
        user_id varchar(255),\
        client_id varchar(255),\
        conclusionDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("14. recertification_audit_conclusion table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_conclusion_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("15. recertification_audit_conclusion_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_plans (\
        user_id varchar(255),\
        client_id varchar(255),\
        recertificationAuditPlanDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("16. recertification_audit_plans table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_plan_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("17. recertification_audit_plan_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_plan_task_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `Member Assigned` varchar(255),\
        `Task Description` varchar(255),\
        `Task Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("18. recertification_audit_plan_task_list table created");

    sql = "CREATE TABLE IF NOT EXISTS registered_users (\
        id varchar(255),\
        username varchar(255),\
        new_username varchar(255),\
        `password` varchar(255),\
        `new_password` varchar(255),\
        `name` varchar(255),\
        `company_name` varchar(255),\
        `email` varchar(255),\
        `phone_no` varchar(255),\
        `filter_workflow` varchar(255),\
        `subs_expiry_date` varchar(255),\
        `database_export_date_time` varchar(255),\
        `database_import_date_time` varchar(255),\
        `database_delete_date_time` varchar(255)\
    )";
    await connection.query(sql);
    console.log("19. registered_users table created");

    sql = "CREATE TABLE IF NOT EXISTS stage1_audit_plans (\
        user_id varchar(255),\
        client_id varchar(255),\
        stage1PlanDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("20. stage1_audit_plans table created");

    sql = "CREATE TABLE IF NOT EXISTS stage1_audit_plan_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `stage1PlanDescription` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("21. stage1_audit_plan_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS stage1_audit_plan_task_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `Member Assigned` varchar(255),\
        `Task Description` varchar(255),\
        `Task Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("22. stage1_audit_plan_task_list table created");

    sql = "CREATE TABLE IF NOT EXISTS stage1_audit_teams (\
        user_id varchar(255),\
        id varchar(255),\
        `Member Email` varchar(255),\
        `Member Name` varchar(255),\
        `Member PhoneNumber` varchar(255),\
        `password` varchar(255),\
        `group_chat_google_id` varchar(255),\
        `personal_chat_google_id` varchar(255)\
    )";
    await connection.query(sql);
    console.log("23. stage1_audit_teams table created");

    sql = "CREATE TABLE IF NOT EXISTS stage2_audit_plans (\
        user_id varchar(255),\
        client_id varchar(255),\
        stage2PlanDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("24. stage2_audit_plans table created");

    sql = "CREATE TABLE IF NOT EXISTS stage2_audit_plan_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `stage2PlanDescription` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("25. stage2_audit_plan_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS stage2_audit_plan_task_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `Member Assigned` varchar(255),\
        `Task Description` varchar(255),\
        `Task Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("26. stage2_audit_plan_task_list table created");

    sql = "CREATE TABLE IF NOT EXISTS stage2_audit_teams (\
        user_id varchar(255),\
        id varchar(255),\
        `Member Email` varchar(255),\
        `Member Name` varchar(255),\
        `Member PhoneNumber` varchar(255),\
        `password` varchar(255),\
        `group_chat_google_id` varchar(255),\
        `personal_chat_google_id` varchar(255)\
    )";
    await connection.query(sql);
    console.log("27. stage2_audit_teams table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_clients (\
        user_id varchar(255),\
        client_id varchar(255),\
        `Client Name` varchar(255),\
        `Status` varchar(255),\
        `description` varchar(255),\
        surveillance_audit_conclusion varchar(255),\
        surveillance_audit_conclusion_date varchar(255),\
        surveillance_audit_date varchar(255),\
        surveillance_audit_plan_date varchar(255),\
        surveillance_audit_team_assigned varchar(255),\
        surveillance_plan_status varchar(255),\
        surveillance_plan_task_status varchar(255)\
    )";
    await connection.query(sql);
    console.log("28. surveillance_audit_clients table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_conclusion (\
        user_id varchar(255),\
        client_id varchar(255),\
        conclusionDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("29. surveillance_audit_conclusion table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_conclusion_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("30. surveillance_audit_conclusion_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_plans (\
        user_id varchar(255),\
        client_id varchar(255),\
        surveillanceAuditPlanDescription varchar(255)\
    )";
    await connection.query(sql);
    console.log("31. surveillance_audit_plans table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_plan_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("32. surveillance_audit_plan_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_plan_task_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `Member Assigned` varchar(255),\
        `Task Description` varchar(255),\
        `Task Name` varchar(255)\
    )";
    await connection.query(sql);
    console.log("33. surveillance_audit_plan_task_list table created");

    sql = "CREATE TABLE IF NOT EXISTS initial_certification_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("34. initial_certification_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS ho_activity_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("35. ho_activity_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_client_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255)\
    )";
    await connection.query(sql);
    console.log("36. surveillance_audit_client_logs table created");

    sql = "CREATE TABLE IF NOT EXISTS inspection_checklist_templates (\
        user_id varchar(255),\
        checklist_id varchar(255),\
        general_fields varchar(255),\
        template_desc varchar(255),\
        template_name varchar(255),\
        min_score varchar(255),\
        max_score varchar(255),\
        statuses varchar(255)\
    )";
    await connection.query(sql);
    console.log("37. inspection_checklist_templates table created");
    //
    sql = "CREATE TABLE IF NOT EXISTS existing_checklist_inspections (\
        user_id varchar(255),\
        checklist_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        audit_type varchar(255),\
        current_responses varchar(255),\
        total_responses varchar(255),\
        revision_id varchar(255),\
        revision_no varchar(255)\
    )";
    await connection.query(sql);
    console.log("38. existing_checklist_inspections table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_reminder_intervals(\
        user_id varchar(255),\
        date_to_implement_from varchar(255),\
        time_to_implement_from varchar(255),\
        interval_weeks varchar(255),\
        interval_months varchar(255),\
        interval_days varchar(255),\
        interval_hours varchar(255),\
        interval_minutes varchar(255),\
        interval_seconds varchar(255),\
        include_time varchar(255),\
        to_whom varchar(255),\
        accreditation_board_email varchar(255)\
    )";
    await connection.query(sql);
    console.log("39. surveillance_audit_reminder_intervals table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_reminder_fixed(\
        user_id varchar(255),\
        date_to_implement_from varchar(255),\
        time_to_implement_from varchar(255),\
        on_every_date_day varchar(255),\
        on_every_date_month varchar(255),\
        on_every_day_of_week varchar(255),\
        on_every_hour varchar(255),\
        on_every_minute varchar(255),\
        on_every_second varchar(255),\
        include_time varchar(255),\
        to_whom varchar(255),\
        accreditation_board_email varchar(255)\
    )";
    await connection.query(sql);
    console.log("40. surveillance_audit_reminder_fixed table created");

    sql = "CREATE TABLE IF NOT EXISTS stage1_audit_plan_attendance_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        checklist_id varchar(255),\
        template_name varchar(255),\
        attendance_id varchar(255),\
        member_id varchar(255),\
        `Member Name` varchar(255),\
        `Work Description` varchar(255),\
        address varchar(255),\
        latitude varchar(255),\
        longitude varchar(255),\
        audit_status varchar(255),\
        attendance_latitude varchar(255),\
        attendance_longitude varchar(255),\
        cur_latitude varchar(255),\
        cur_longitude varchar(255),\
        attendance_date varchar(255),\
        attendance_time varchar(255)\
    )";
    await connection.query(sql);
    console.log("41. stage1_audit_plan_attendance_list table created");

    sql = "CREATE TABLE IF NOT EXISTS stage2_audit_plan_attendance_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        checklist_id varchar(255),\
        template_name varchar(255),\
        attendance_id varchar(255),\
        member_id varchar(255),\
        `Member Name` varchar(255),\
        `Work Description` varchar(255),\
        address varchar(255),\
        latitude varchar(255),\
        longitude varchar(255),\
        audit_status varchar(255),\
        attendance_status varchar(255),\
        attendance_latitude varchar(255),\
        attendance_longitude varchar(255),\
        cur_latitude varchar(255),\
        cur_longitude varchar(255),\
        attendance_date varchar(255),\
        attendance_time varchar(255)\
    )";
    await connection.query(sql);
    console.log("42. stage2_audit_plan_attendance_list table created");

    sql = "CREATE TABLE IF NOT EXISTS surveillance_audit_plan_attendance_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        checklist_id varchar(255),\
        template_name varchar(255),\
        attendance_id varchar(255),\
        member_id varchar(255),\
        `Member Name` varchar(255),\
        `Work Description` varchar(255),\
        address varchar(255),\
        latitude varchar(255),\
        longitude varchar(255),\
        audit_status varchar(255),\
        attendance_status varchar(255),\
        attendance_latitude varchar(255),\
        attendance_longitude varchar(255),\
        cur_latitude varchar(255),\
        cur_longitude varchar(255),\
        attendance_date varchar(255),\
        attendance_time varchar(255)\
    )";
    await connection.query(sql);
    console.log("43. surveillance_audit_plan_attendance_list table created");

    sql = "CREATE TABLE IF NOT EXISTS recertification_audit_plan_attendance_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        checklist_id varchar(255),\
        template_name varchar(255),\
        attendance_id varchar(255),\
        member_id varchar(255),\
        `Member Name` varchar(255),\
        `Work Description` varchar(255),\
        address varchar(255),\
        latitude varchar(255),\
        longitude varchar(255),\
        audit_status varchar(255),\
        attendance_status varchar(255),\
        attendance_latitude varchar(255),\
        attendance_longitude varchar(255),\
        cur_latitude varchar(255),\
        cur_longitude varchar(255),\
        attendance_date varchar(255),\
        attendance_time varchar(255)\
    )";
    await connection.query(sql);
    console.log("44. surveillance_audit_plan_attendance_list table created");

    sql = "CREATE TABLE IF NOT EXISTS attendance_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        attendance_id varchar(255),\
        audit_type varchar(255),\
        `date` varchar(255),\
        `time` varchar(255)\
    )";
    await connection.query(sql);
    console.log("45. attendance_list table created");

    sql = "CREATE TABLE IF NOT EXISTS accreditation_board_credentials (\
        user_id varchar(255),\
        username varchar(255),\
        default_password varchar(255),\
        password varchar(255),\
    )";
    await connection.query(sql);
    console.log("46. accreditation_board_credentials table created");

    sql = "CREATE TABLE IF NOT EXISTS columns_to_filter_for_ab (\
        user_id varchar(255),\
        table_name varchar(255),\
        to_be_shown varchar(255),\
        `table_type` varchar(255),\
        filter_value varchar(255)\
    )";
    await connection.query(sql);
    console.log("47. columns_to_filter_for_ab table created");

    sql = "CREATE TABLE IF NOT EXISTS incomplete_file_upload_cleanup (\
        user_id varchar(255),\
        client_id varchar(255),\
        category varchar(255),\
        delete_or_not varchar(255),\
        deleted_from_database_or_not varchar(255),\
        dirpath varchar(255)\
    )";

    await connection.query(sql);
    console.log("48. incomplete_file_upload_cleanup table created");

    sql = "CREATE TABLE IF NOT EXISTS paid_plan_clients_info (\
        customer_id varchar(255),\
        company_name varchar(255),\
        company_address_line_1 varchar(255),\
        company_address_line_2 varchar(255),\
        town_or_city varchar(255),\
        state varchar(255),\
        pincode varchar(255),\
        phno varchar(255),\
        company_email varchar(255),\
        plan_name varchar(255),\
        plan_price varchar(255),\
        invoice_status varchar(255)\
    )";
    
    await connection.query(sql);
    console.log("49. paid_plan_clients_info table created");

    res.send("tables created");
    });

})
app.get("/aws_rds_create_app_tables", async (req, res) => {
    var mysql = require('mysql');
    var connection = mysql.createConnection({
    host     : DBENDPOINT,
    user     : "admin",
    password : "qwertyui",
    port     : "3306",
    database : "mydb"
    });

    connection.connect(function(err) {
    if (err) {
        //console.error('Database connection failed: ' + err.stack);
        res.send(err.stack);
        connection.end();
        return;
    }

    //console.log('Connected to database.');
    //res.send('Connected to database.')
    var sql = "CREATE TABLE IF NOT EXISTS Form_Data (\
        user_id varchar(255),\
        client_id varchar(255),\
        Approved varchar(255),\
        `Client Name` varchar(255),\
        HO_activity_date varchar(255),\
        HO_activity_status varchar(255),\
        assignedToWhom varchar(255),\
        date varchar(255),\
        description varchar(255),\
        email varchar(255),\
        initial_certification_conclusion varchar(255),\
        initial_certification_conclusion_date varchar(255),\
        phone varchar(255),\
        quotation_date varchar(255),\
        quotation_status varchar(255),\
        stage1_plan_date varchar(255),\
        stage1_plan_status varchar(255),\
        stage1_plan_task_date varchar(255),\
        stage1_plan_task_status varchar(255),\
        stage1_team_assigned varchar(255),\
        stage2_plan_date varchar(255),\
        stage2_plan_status varchar(255),\
        stage2_plan_task_date varchar(255),\
        stage2_plan_task_status varchar(255),\
        stage2_team_assigned varchar(255),\
        surveillance_audit_status varchar(255)\
    );\
    CREATE TABLE IF NOT EXISTS assigned_recertification_audit_teams (\
        user_id varchar(255),\
        client_id varchar(255),\
        member_id varchar(255),\
        group_chat_google_id varchar(255),\
        personal_chat_google_id varchar(255),\
        `Member Name` varchar(255)\
    );\
    CREATE TABLE IF NOT EXISTS assigned_stage1_audit_teams (\
        user_id varchar(255),\
        client_id varchar(255),\
        `Member Name` varchar(255)\
    );\
    CREATE TABLE IF NOT EXISTS assigned_stage2_audit_teams (\
        user_id varchar(255),\
        client_id varchar(255),\
        `Member Name` varchar(255)\
    );\
    CREATE TABLE IF NOT EXISTS assigned_surveillance_audit_teams (\
        user_id varchar(255),\
        client_id varchar(255),\
        `Member Name` varchar(255)\
    );\
    CREATE TABLE IF NOT EXISTS employees (\
        user_id varchar(255),\
        employee_id varchar(255),\
        `Member Designation` varchar(255),\
        `Member Email` varchar(255),\
        `Member Name` varchar(255),\
        `Member PhoneNumber` varchar(255),\
        `password` varchar(255),\
        `group_chat_google_id` varchar(255),\
        `personal_chat_google_id` varchar(255)\
    );\
    CREATE TABLE IF NOT EXISTS ho_activities (\
        user_id varchar(255),\
        client_id varchar(255),\
        `HOActivityDescription` varchar(255)\
    );\
    CREATE TABLE IF NOT EXISTS initial_certification_conclusion (\
        user_id varchar(255),\
        client_id varchar(255),\
        conclusionDescription varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS initial_certification_conclusion_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS quotations (\
        user_id varchar(255),\
        client_id varchar(255),\
        quotation_description varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS quotation_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS recertification_audit_clients (\
        user_id varchar(255),\
        client_id varchar(255),\
        `Client Name` varchar(255),\
        `Status` varchar(255),\
        `description` varchar(255),\
        recertification_audit_conclusion varchar(255),\
        recertification_audit_conclusion_date varchar(255),\
        recertification_audit_date varchar(255),\
        recertification_audit_plan_date varchar(255),\
        recertification_audit_team_assigned varchar(255),\
        recertification_description varchar(255),\
        recertification_plan_status varchar(255),\
        recertification_plan_task_status varchar(255),\
        recertification_status varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS recertification_audit_client_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS recertification_audit_conclusion (\
        user_id varchar(255),\
        client_id varchar(255),\
        conclusionDescription varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS recertification_audit_conclusion_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS recertification_audit_plans (\
        user_id varchar(255),\
        client_id varchar(255),\
        recertificationAuditPlanDescription varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS recertification_audit_plan_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS recertification_audit_plan_task_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `Member Assigned` varchar(255),\
        `Task Description` varchar(255),\
        `Task Name` varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS registered_users (\
        id varchar(255),\
        username varchar(255),\
        new_username varchar(255),\
        `password` varchar(255),\
        `new_password` varchar(255),\
        `name` varchar(255),\
        `company_name` varchar(255),\
        `email` varchar(255),\
        `phone_no` varchar(255),\
        `filter_workflow` varchar(255),\
        `subs_expiry_date` varchar(255),\
        `database_export_date_time` varchar(255),\
        `database_import_date_time` varchar(255),\
        `database_delete_date_time` varchar(255)\
    );\
    CREATE TABLE IF NOT EXISTS stage1_audit_plans (\
        user_id varchar(255),\
        client_id varchar(255),\
        stage1PlanDescription varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS stage1_audit_plan_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `stage1PlanDescription` varchar(255),\
        `status` varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS stage1_audit_plan_task_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `Member Assigned` varchar(255),\
        `Task Description` varchar(255),\
        `Task Name` varchar(255)\
    );\
    CREATE TABLE IF NOT EXISTS stage1_audit_teams (\
        user_id varchar(255),\
        id varchar(255),\
        `Member Email` varchar(255),\
        `Member Name` varchar(255),\
        `Member PhoneNumber` varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS stage2_audit_plans (\
        user_id varchar(255),\
        client_id varchar(255),\
        stage2PlanDescription varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS stage2_audit_plan_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `stage2PlanDescription` varchar(255),\
        `status` varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS stage2_audit_plan_task_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `Member Assigned` varchar(255),\
        `Task Description` varchar(255),\
        `Task Name` varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS stage2_audit_teams (\
        user_id varchar(255),\
        id varchar(255),\
        `Member Email` varchar(255),\
        `Member Name` varchar(255),\
        `Member PhoneNumber` varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS surveillance_audit_clients (\
        user_id varchar(255),\
        client_id varchar(255),\
        `Client Name` varchar(255),\
        `Status` varchar(255),\
        `description` varchar(255),\
        surveillance_audit_conclusion varchar(255),\
        surveillance_audit_conclusion_date varchar(255),\
        surveillance_audit_date varchar(255),\
        surveillance_audit_plan_date varchar(255),\
        surveillance_audit_team_assigned varchar(255),\
        surveillance_plan_status varchar(255),\
        surveillance_plan_task_status varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS surveillance_audit_conclusion (\
        user_id varchar(255),\
        client_id varchar(255),\
        conclusionDescription varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS surveillance_audit_conclusion_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS surveillance_audit_plans (\
        user_id varchar(255),\
        client_id varchar(255),\
        surveillanceAuditPlanDescription varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS surveillance_audit_plan_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS surveillance_audit_plan_task_list (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `Member Assigned` varchar(255),\
        `Task Description` varchar(255),\
        `Task Name` varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS initial_certification_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS ho_activity_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255),\
    );\
    CREATE TABLE IF NOT EXISTS surveillance_audit_client_logs (\
        user_id varchar(255),\
        client_id varchar(255),\
        id varchar(255),\
        `date` varchar(255),\
        `description` varchar(255),\
        `status` varchar(255),\
    );";
    connection.query(sql, function (err, result) {
        connection.end();
        if (err) res.send(err);
        res.send("Table created");
    });
    });

})
app.post('/generate_report_test1', (req, res) => {
  console.log("entered_3")
  const Ftp = require('ftp');
  const sharp = require('sharp');
  const fs = require('fs');
  const sizeOf = require('image-size');
  var xl = require('excel4node');
  const path = require('path')
  var clientid = req.body['clientid'];
  var largestWidth = -1;
  var largestHeight = -1;
  var videofilenames = req.body['videofilenames'];
  var filenames = req.body['filenames'];
  var questions = req.body['questions'];
  var responses = req.body['responses'];
  var scores = req.body['scores'];
  var statuses = req.body['status'];
  var lstNameVideos = videofilenames.replace("[", "").replace("]", "").split(", ");
  var lstNameFiles = filenames.replace("[", "").replace("]", "").split(", ");
  const mainDirPath = path.join(__dirname, '/');
  const dirPath = path.join(__dirname, '/file_to_process/');
  const newDirPath = path.join(__dirname, '/file_to_process_new/');
  var revisionNo = "";
  var filename = clientid + "_" + req.body['timestamp'];
  console.log("req.body['loadExisting'], ", req.body['loadExisting']);
  var dirName = clientid + "_" + req.body['timestamp'];
  if (req.body['loadExisting'] == 'true') 
  {
      revisionNo = req.body['revisionNo'];
      filename = clientid + "_" + req.body['timestamp'] + "__" + req.body['revisionNo'];
      dirName = dirName + "__" + req.body['revisionNo'];
  }
  fs.readdir(dirPath + dirName, async (err, oFiles) => {
        var idx = 0;
        var iidx = 0;
        var lstImages = [];
        var lstQuestions = questions.split("<-_-_->, ")
        var lstResponses = responses.split("<-_-_->, ")
        var lstScores = scores.split("<-_-_->, ")
        var lstStatus = statuses.split("<-_-_->, ")
        const { JavaCaller } = require("java-caller");
        const java = new JavaCaller({
            classPath: 'AuditPlatformProject.jar', // CLASSPATH referencing the package embedded jar files
            mainClass: 'auditplatformproject.AuditPlatformProject',// Main class to call, must be available from CLASSPATH,
            rootPath: __dirname,
        });
        //const { status, stdout, stderr } = await java.run([JSON.stringify(oFiles) + ";;;" + JSON.stringify(questions) + ";;;" + JSON.stringify(responses) + ";;;" + JSON.stringify(scores) + ";;;" + JSON.stringify(statuses) + ";;;" + JSON.stringify(lstNameVideos) + ";;;" + JSON.stringify(lstNameFiles), JSON.stringify(clientid) + ";;;iso_14001;;;" + req.body['checklistid'] + ";;;" + req.body['timestamp']]);
        const { status, stdout, stderr } = await java.run([JSON.stringify(oFiles) + ";;;" + JSON.stringify(questions) + ";;;" + JSON.stringify(responses) + ";;;" + JSON.stringify(scores) + ";;;" + JSON.stringify(statuses) + ";;;" + JSON.stringify(lstNameVideos) + ";;;" + JSON.stringify(lstNameFiles) + ";;;" + req.body['loadExisting'] + ";;;" + revisionNo, JSON.stringify(clientid) + ";;;" + req.body['checklistid'] + ";;;" + req.body['timestamp']]);
        console.log(stdout);
        const ftpClient = new Ftp();
        var buffer = fs.readFileSync('./' + req.body['checklistid'] + "_" + clientid + "_" + req.body['timestamp'] + '_avail.xlsx');
        ftpClient.on( 'ready', function() {
            ftpClient.put( buffer, 'domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/inspection_checklist/' + filename + ".xlsx", async function( err, list ) {
                if ( err ) throw err;
                ftpClient.end();     
                const rimraf = require('rimraf');
                fs.readdir(dirPath + dirName, (err, oFiles) => {
                  oFiles.forEach((file) => {
                    if (
                      fs.existsSync(dirPath + dirName + '/' + file)
                    ) {
                      fs.unlinkSync(
                        dirPath + dirName + '/' + file
                      );
                      console.log("deleted file: ", dirPath + dirName + '/' + file);
                    }
                  });
                  rimraf.sync(dirPath + dirName);
                  console.log("deleted folder: ", dirPath + dirName);
                });
                await fs.unlinkSync(
                    mainDirPath + req.body['checklistid'] + "_" + clientid + "_" + req.body['timestamp'] + '.xlsx'
                );
                await fs.unlinkSync(
                    mainDirPath + req.body['checklistid'] + "_" + clientid + "_" + req.body['timestamp'] + '_avail.xlsx'
                );
                console.log("Checklist Created Successfully")
                res.send({'status': 'Checklist Created Successfully'}); 
                //wb.write('Excel.xlsx', res);
            });
        });
        
        ftpClient.connect( {
            'host': 'ftp.cwac.in',
            'user': 'cwacin',
            'password': '$Rv01111996'
        });
    });
})
app.post('/download_multiple_files_v2', (req, res) => {
    //
    const fs = require('fs');
    const Ftp = require('ftp');
    const path = require('path')
    console.log("__dirname: ", __dirname);
    const mainDirPath = path.join(__dirname, '/');
    const dirPath = path.join(__dirname, '/file_to_process/');
    const newDirPath = path.join(__dirname, '/file_to_process_new/');
    const ftpClient = new Ftp();
    const timestamp = req.body['clientid'];
    var dirName = timestamp + "_" + req.body['timestamp'];
    if (req.body['loadExisting'] == 'true') dirName = timestamp + "_" + req.body['timestamp'] + "__" + req.body['revisionNo'];
    if (!fs.existsSync(dirPath + dirName)) {
      fs.mkdir(dirPath + dirName, {recursive: true}, err => {});
    }
    // if (!fs.existsSync(newDirPath + timestamp)) {
    //   fs.mkdir(newDirPath + timestamp, {recursive: true}, err => {});
    // }
    ftpClient.on('ready', function () {
      ftpClient.list(
        'domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_images/' +
            dirName +
          '/',
        false,
        async function (err, list) {
          var urlList = [];
          for (var intIdx = 0; intIdx < list.length; intIdx++) {
            if (list[intIdx].name != '.' && list[intIdx].name != '..')
              urlList.push(
                'https://cwac.in/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_images/' +
                    dirName +
                  '/' +
                  list[intIdx].name
              );
          }
          var idx = 0;
          var request = require('request');
          var download = function (url, dest, callback) {
            request
              .get(url)
              .on('error', function (err) {
                console.log(err);
              })
              .pipe(fs.createWriteStream(dest))
              .on('close', callback);
          };
  
          urlList.forEach(function (str) {
            var filename =
              dirPath + dirName + '/' + str.split('/').pop();
            console.log('Downloading ' + filename);
            download(str, filename, async function () {
              console.log('Finished Downloading' + filename);
              idx++;
              if (idx == urlList.length) 
              {
                console.log("downloaded")
                await download("https://cwac.in/softwares_apps/quest_global_mcs/audit_app/inspection_templates/" + req.body['checklistid'] + "/template.xlsx", mainDirPath + req.body['checklistid'] + "_" + req.body['clientid'] + "_" + req.body['timestamp'] + ".xlsx", async function () {
                    console.log('Finished Downloading' + req.body['checklistid'] + "_" + req.body['clientid'] + "_" + req.body['timestamp'] + ".xlsx");
                    //idx++;

                      console.log("downloaded")
                      res.send({"status": "downloaded"});
                    
                  });
                //res.send({"status": "downloaded"});
              }
            });
          });
        }
      );
    });
    ftpClient.connect({
      host: 'ftp.cwac.in',
      user: 'cwacin',
      password: '$Rv01111996',
    });
});
app.post('/list_all_files', async (req, res) => {
    var request = require('request');
    const fs = require('fs');
    var download = function (url, dest, callback) {
        request
          .get(url)
          .on('error', function (err) {
            console.log(err);
          })
          .pipe(fs.createWriteStream(dest))
          .on('close', callback);
    };
    const downloadFile = (fileName, savePath) =>{
        return new Promise((resolve, reject)=>{
            //download("https://cwac.in/softwares_apps/quest_global_mcs/audit_app/inspection_checklist/" + fileName, savePath, async function () {
            download(fileName, savePath, async function () {
                return resolve(true);
            });
        });
    };
    const downloadChecklistFile = (fileName, savePath) =>{
        return new Promise((resolve, reject)=>{
            //download("https://cwac.in/softwares_apps/quest_global_mcs/audit_app/inspection_checklist/" + fileName, savePath, async function () {
            download(fileName, savePath, async function () {
                return resolve(true);
            });
        });
    };

    const Ftp = require('ftp');
    const ftpClient = new Ftp();
    const timestamp = req.body['timestamp'];
    const clientid = req.body['clientid'];
    const checklistid = req.body['checklistid'];
    var urlList = [];
    var imagesListed = false;
    var videosListed = false;
    var filesListed = false;
    console.log("dirName", clientid + "_" + timestamp);
    var questionnaireDetails = "";
    var templateDetails = "";
    const { JavaCaller } = require("java-caller");
    var dirName = clientid + "_" + timestamp;
    const mainDirPath = path.join(__dirname, '/');
    if (req.body['revisionType'] == 'No Revision')
        await downloadFile("https://cwac.in/softwares_apps/quest_global_mcs/audit_app/inspection_checklist/" + clientid + "_" + timestamp + ".xlsx", mainDirPath + clientid + "_" + timestamp + ".xlsx");
    else
    {
        if (req.body['revisionNo'] == "")
            await downloadFile("https://cwac.in/softwares_apps/quest_global_mcs/audit_app/inspection_checklist/" + clientid + "_" + timestamp + ".xlsx", mainDirPath + clientid + "_" + timestamp + ".xlsx");
        else 
        {
            dirName = dirName + "__" + req.body['revisionNo'];
            await downloadFile("https://cwac.in/softwares_apps/quest_global_mcs/audit_app/inspection_checklist/" + clientid + "_" + timestamp + "__" + req.body['revisionNo'] + ".xlsx", mainDirPath + clientid + "_" + timestamp + ".xlsx");
        }
    }
    await downloadFile("https://cwac.in/softwares_apps/quest_global_mcs/audit_app/inspection_templates/" + checklistid + "/template_info.xlsx", mainDirPath + checklistid + ".xlsx");


    var lstJavaArgs = [clientid + ";;;" + timestamp, checklistid];
    var lstMainClassFile = ['ReadChecklistFile', 'ReadChecklistTemplateFile']
    var outChecklistFile = "";
    var outChecklistTemplateFile = "";

    for (var intIdx = 0; intIdx < lstJavaArgs.length; intIdx++)
    {
        const java = new JavaCaller({
            classPath: 'AuditPlatformProject.jar', // CLASSPATH referencing the package embedded jar files
            mainClass: 'auditplatformproject.' + lstMainClassFile[intIdx],// Main class to call, must be available from CLASSPATH,
            rootPath: __dirname,
        });
        const { status, stdout, stderr } = await java.run([lstJavaArgs[intIdx]]);
        console.log(stdout);
        if (intIdx == 0) outChecklistFile = stdout;
        else outChecklistTemplateFile = stdout;
    }


    questionnaireDetails = outChecklistFile.replaceAll("\r\n", "");
    questionnaireDetails = questionnaireDetails.split("__________");
    questionnaireDetails.pop();
    questionnaireDetails = questionnaireDetails.map((ele, iIdx) => {
        var newEle = {};
        newEle['question'] =  ele.split(";;;")[0].replaceAll("\n", "");
        newEle['response'] =  ele.split(";;;")[1];
        newEle['score'] =  ele.split(";;;")[2];
        newEle['status'] =  ele.split(";;;")[3];
        newEle['idx'] = iIdx;
        return newEle;
    })

    templateDetails = outChecklistTemplateFile.replaceAll("\r\n", "");
    templateDetails = templateDetails.split("__________");
    templateDetails.pop();
    templateDetails = templateDetails.map((ele, iIdx) => {
        var newEle = {};
        newEle['question'] =  ele.split(";;;")[0].replaceAll("\n", "");
        newEle['maxScore'] =  ele.split(";;;")[1];
        newEle['statuses'] =  ele.split(";;;")[2].split(";");
        newEle['category'] =  ele.split(";;;")[3];
        newEle['fieldtype'] =  ele.split(";;;")[4];
        newEle['important'] =  ele.split(";;;")[5];
        newEle['idx'] = iIdx;
        return newEle;
    })
    if (fs.existsSync(mainDirPath + clientid + '_' + timestamp + ".xlsx"))
    {
        try {
        fs.unlinkSync(
            mainDirPath + clientid + '_' + timestamp + ".xlsx"
        );
        fs.unlinkSync(
            mainDirPath + checklistid + ".xlsx"
        );
        } catch(e) {
            
        }
    }
    ftpClient.on('ready', function () {
      ftpClient.list(
        'domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_images/' +
            dirName +
          '/',
        false,
        async function (err, list) {
            for (var intIdx = 0; intIdx < list.length; intIdx++) {
            if (list[intIdx].name != '.' && list[intIdx].name != '..')
                urlList.push(list[intIdx].name);
            }
            imagesListed = true;
            if (filesListed && videosListed && imagesListed) 
            {
                ftpClient.end();
                res.send({"output": urlList, "checklistData": questionnaireDetails, "checklistFormData": templateDetails});
            }
        }
      );
      ftpClient.list(
        'domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_videos/' +
            dirName +
          '/',
        false,
        async function (err, list) {
            for (var intIdx = 0; intIdx < list.length; intIdx++) {
            if (list[intIdx].name != '.' && list[intIdx].name != '..')
                urlList.push(list[intIdx].name);
            }
            videosListed = true;
            if (filesListed && videosListed && imagesListed) 
            {
                ftpClient.end();
                res.send({"output": urlList, "checklistData": questionnaireDetails, "checklistFormData": templateDetails});
            }
        }
      );
      ftpClient.list(
        'domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_files/' +
            dirName +
          '/',
        false,
        async function (err, list) {
            for (var intIdx = 0; intIdx < list.length; intIdx++) {
            if (list[intIdx].name != '.' && list[intIdx].name != '..')
                urlList.push(list[intIdx].name);
            }
            filesListed = true;
            if (filesListed && videosListed && imagesListed) 
            {
                ftpClient.end();
                res.send({"output": urlList, "checklistData": questionnaireDetails, "checklistFormData": templateDetails});
            }
        }
      );
    });
    ftpClient.connect({
      host: 'ftp.cwac.in',
      user: 'cwacin',
      password: '$Rv01111996',
    });
})
app.post('/aws_rds__add_audit_checklist_into', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        const QuerySQL = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query, (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        //var request = new sql.Request();
        if (req.body['loadExisting'] == "false")
        {
            sql.query("INSERT INTO existing_checklist_inspections VALUES ('"
            + req.body['userid'] + "', '"
            + req.body['checklistid'] + "', '"
            + req.body['clientid'] + "', '"
            + req.body['id'] + "', '"
            + req.body['audittype'] + "', '"
            + req.body['current_responses'] + "', '"
            + req.body['total_responses'] + "', '"
            + req.body['id'] + "', '"
            + "" + "')", async function (err, recordset) {
                if (err)
                {
                    sql.end();
                    console.log(err);
                    res.send({"data": 'Something went wrong. Please submit again.'})
                }
                else 
                {
                    await QuerySQL("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['clientid'] + "__" + req.body['id'] + "', '" + req.body['audittype'] + " Audit', 'No', 'No', '" + 'domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_images/' + req.body['clientid'] + "_" + req.body['id'] + "/" + "')");
                    await QuerySQL("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['clientid'] + "__" + req.body['id'] + "', '" + req.body['audittype'] + " Audit', 'No', 'No', '" + 'domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_videos/' + req.body['clientid'] + "_" + req.body['id'] + "/" + "')");
                    await QuerySQL("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['clientid'] + "__" + req.body['id'] + "', '" + req.body['audittype'] + " Audit', 'No', 'No', '" + 'domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_files/' + req.body['clientid'] + "_" + req.body['id'] + "/" + "')");
                    sql.end();
                    res.send({"data": "Client Details Added Successfully", "revision_no": "0"});
                }
            });
        }
        else
        {
            const QueryForRevision = () => {
                return new Promise((resolve, reject)=>{
                    sql.query("SELECT * FROM existing_checklist_inspections WHERE user_id = '" + req.body['userid'] + "' AND checklist_id = '" + req.body['checklistid'] + "' AND client_id = '" + req.body['clientid'] + "' AND id = '" + req.body['id'] + "'",  (error, results)=>{
                        if(error){
                            return reject(error);
                        }
                        return resolve(results);
                    });
                });
            };
            var resultRevision = await QueryForRevision();
            sql.query("INSERT INTO existing_checklist_inspections VALUES ('"
            + req.body['userid'] + "', '"
            + req.body['checklistid'] + "', '"
            + req.body['clientid'] + "', '"
            + req.body['id'] + "', '"
            + req.body['audittype'] + "', '"
            + req.body['current_responses'] + "', '"
            + req.body['total_responses'] + "', '"
            + req.body['revisionId'] + "', '"
            + (resultRevision.length) + "" + "')", async function (err, recordset) {
                if (err)
                {
                    sql.end();
                    console.log(err);
                    res.send({"data": 'Something went wrong. Please submit again.'})
                }
                else 
                {
                    await QuerySQL("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['clientid'] + "__" + req.body['revisionId'] + "', '" + req.body['audittype'] + " Audit', 'No', 'No', '" + 'domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_images/' + req.body['clientid'] + "_" + req.body['id'] + "__" + resultRevision.length + "/" + "')");
                    await QuerySQL("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['clientid'] + "__" + req.body['revisionId'] + "', '" + req.body['audittype'] + " Audit', 'No', 'No', '" + 'domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_videos/' + req.body['clientid'] + "_" + req.body['id'] + "__" + resultRevision.length + "/" + "')");
                    await QuerySQL("INSERT INTO incomplete_file_upload_cleanup VALUES('" + req.body['userid'] + "', '" + req.body['clientid'] + "__" + req.body['revisionId'] + "', '" + req.body['audittype'] + " Audit', 'No', 'No', '" + 'domains/cwac.in/public_html/softwares_apps/quest_global_mcs/audit_app/clause_images_files/clause_files/' + req.body['clientid'] + "_" + req.body['id'] + "__" + resultRevision.length + "/" + "')");
                    sql.end();
                    res.send({"data": "Client Details Added Successfully", "revision_no": resultRevision.length});
                }
            });
        }
    });
});
app.post('/aws_rds__cleanup_checklist_data', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(async function (err) {
        if (err) console.log(err);
        else console.log('connected');
        const QuerySQL = (query) => {
            return new Promise((resolve, reject)=>{
                sql.query(query, (error, results)=>{
                    if(error){
                        return reject(error);
                    }
                    return resolve(results);
                });
            });
        };
        if (req.body['isRevised'] == "No")
            await QuerySQL("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['clientid'] + "__" + req.body['id'] + "' AND category = '" + req.body['audittype'] + " Audit'");
        else await QuerySQL("DELETE FROM incomplete_file_upload_cleanup WHERE user_id = '" + req.body['userid'] + "' AND client_id = '" + req.body['clientid'] + "__" + req.body['revisionid'] + "' AND category = '" + req.body['audittype'] + " Audit'");
        sql.end();
        res.send({"result": "done"});
    });
});
app.post('/aws_rds__mark_audit_attendance', (req, res) => {
    var mysql = require("mysql");
    // const fs = require('fs');
    // var info = {};
    // const allFileContents = fs.readFileSync('sql_server_config.txt', 'utf-8');
    // allFileContents.split(/\r?\n/).forEach(line =>  {        
    //     info[[line.split("-->")[0]]] = [line.split("-->")[1]]
    // });
    var tableName = "";
    if (req.body['audit_type'] == "Stage 1 Audit")
        tableName = 'stage1_audit_plan_attendance_list';
    else if (req.body['audit_type'] == "Stage 2 Audit")
        tableName = 'stage2_audit_plan_attendance_list';
    else if (req.body['audit_type'] == "Surveillance Audit")
        tableName = 'surveillance_audit_plan_attendance_list';
    else if (req.body['audit_type'] == "Recertification Audit")
        tableName = 'recertification_audit_plan_attendance_list';
    var sql = mysql.createConnection({
        host     : DBENDPOINT,
        user     : "admin",
        password : "qwertyui",
        port     : "3306",
        database : "mydb"
    });
    sql.connect(function (err) {
        if (err) console.log(err);
        else console.log('connected');
        //var request = new sql.Request();
        sql.query("UPDATE " + tableName + " SET attendance_latitude = '"
        + req.body['attendance_latitude'] + "', attendance_longitude = '"
        + req.body['attendance_longitude'] + "', attendance_date = '"
        + req.body['attendance_date'] + "', attendance_time = '"
        + req.body['attendance_time'] + "', attendance_status = 'marked' WHERE user_id = '" + req.body['userid'] 
        + "' AND client_id = '" + req.body['clientid'] 
        + "' AND `Member Name` = '" + req.body['member_name'] + "' AND attendance_id = '" + req.body['attendance_id'] + "'", async function (err, recordset) {
            sql.end();
            if (err)
            {
                console.log(err);
                res.send({"data": 'Something went wrong. Please mark again.'})
            }
            else 
            {
                res.send({"data": "Attendance Marked Successfully"});
            }
        });
    });
});
app.get('/add_email_to_firebase_and_authenticate', async (req, res) => {
    var emailId = "abc@gmail.com"
    var serviceAccount = require('./admin_group_chat.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
            authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
            authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef=db.ref("Contacts");
    // await userRef.once('value').then((snapshot) => {
    //     snapshot.forEach(function(item) {
    //         console.log(item.val());
    //     });
    //     client.delete();
    //     res.send("ok");
    // }, (errorObject) => {

    // }); 
    var result = await admin.auth().createUser(
        {
           email: "jkl@gmail.com",
           emailVerified: true,
           password: "123456",
           displayName: "John Doe",
           //phoneNumber: "+11234567890",
           disabled: false,
          }
     );
     console.log(result.uid);
     result = await admin.auth().createUser(
        {
           email: "mno@gmail.com",
           emailVerified: true,
           password: "123456",
           displayName: "John1 Doe1",
           //phoneNumber: "+11234567890",
           disabled: false,
          }
     );
     console.log(result.uid);
     res.send(result.uid);
})
app.get("/test_realtime", async (req, res) => {
    var serviceAccount = require('./admin_group_chat.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
            authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
            authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
        });
    }
    var db=admin.database();
    var userRef= await db.ref("2345/abcd/efgh");
    await userRef.set("okay");
    userRef=await db.ref("2345/abcd/ijkl/mnop");
    await userRef.set("okay1");
    client.delete();
    res.send("okay");
})
app.get('/export_chat_data_code', (req, res) => {
    var serviceAccount = require('./admin_group_chat.json');
    var client;
    if (!admin.apps.length) {
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
            authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
        });
    }else {
        client = admin.app(); // if already initialized, use that one
        client.delete();
        client = admin.initializeApp({
            credential: admin.credential.cert(serviceAccount),
            databaseURL: "https://chat-app-1-dec43-default-rtdb.asia-southeast1.firebasedatabase.app/",
            authDomain: "chat-app-1-dec43-default-rtdb.firebaseapp.com",
        });
    }
    var db = admin.database();
    var fullDataDump;
  db.ref('/').once('value', function(snapshot) {
     //fullDataDump = snapshotToArray(snapshot);
     var allowed = '213234234231_1661603745593_';
     var raw = JSON.parse(JSON.stringify(snapshot))
     //console.log(raw);
     var curSnapshot = Object.keys(raw)
     //.filter(key => allowed.includes(key))
     .filter(key => key.includes(allowed))
     .reduce((obj, key) => {
       obj[key] = raw[key];
       return obj;
     }, {});
     //console.log(curSnapshot);
     //res.status(200).json(curSnapshot);

     const fs = require('fs')
    const content = JSON.stringify(curSnapshot);

    fs.writeFile('213234234231_1661603745593_chats.json', content, err => {
    if (err) {
        console.error(err)
        res.send(err);
        return
    }
    res.send("done");
    //file written successfully
    })
 });
 
 
 });
 app.get('/import_chat_data_code', (req, res) => {
    var fs = require('fs');

    fs.readFile('213234234231_1661603745593_chats.json', 'utf8', function(err, data) {
        if (err) throw err;
        var chatdata = JSON.parse(data);
        //console.log(chatdata);
        var keys = Object.keys(chatdata);
        //Object.keys(chatdata).forEach(function(key) {
        for (var intIdx = 0; intIdx < keys.length; intIdx++)
        {
            var key = keys[intIdx];
            console.log(key);
        }
        res.send(chatdata);
    });
 
 
 });
 function snapshotToArray(snapshot) {
   var returnArr = [];
 
   snapshot.forEach(function(childSnapshot) {
       var item = childSnapshot.val();
       item.key = childSnapshot.key;
 
       returnArr.push(item);
   });
 
   return returnArr;
 };
// production url: https://audit-software.herokuapp.com/
app.listen(process.env.PORT || backendPort,()=>
{
    console.log("APP IS RUNNING AT " + backendPort)
})